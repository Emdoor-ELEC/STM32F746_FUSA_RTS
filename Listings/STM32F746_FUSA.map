Component: Arm Compiler for Embedded FuSa 6.16.2 Tool: armlink [5e005f00]

==============================================================================

Section Cross References

    main.o(.text.HAL_GetTick) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    main.o(.text.HAL_GetTick) refers to rtx_kernel.o(.text.osKernelGetTickCount) for osKernelGetTickCount
    main.o(.text.HAL_GetTick) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    main.o(.text.HAL_GetTick) refers to main.o(.bss.HAL_GetTick.ticks) for HAL_GetTick.ticks
    main.o(.ARM.exidx.text.HAL_GetTick) refers to main.o(.text.HAL_GetTick) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.HAL_InitTick) refers to main.o(.text.HAL_InitTick) for [Anonymous Symbol]
    main.o(.text.main) refers to main.o(.text.MPU_Config) for MPU_Config
    main.o(.text.main) refers to main.o(.text.CPU_CACHE_Enable) for CPU_CACHE_Enable
    main.o(.text.main) refers to stm32f7xx_hal.o(.text.HAL_Init) for HAL_Init
    main.o(.text.main) refers to main.o(.text.SystemClock_Config) for SystemClock_Config
    main.o(.text.main) refers to system_stm32f7xx.o(.text.SystemCoreClockUpdate) for SystemCoreClockUpdate
    main.o(.text.main) refers to led_756g_eval.o(.text.LED_Initialize) for LED_Initialize
    main.o(.text.main) refers to thread.o(.text.Init_Thread) for Init_Thread
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    main.o(.text.main) refers to rtx_kernel.o(.text.osKernelStart) for osKernelStart
    main.o(.ARM.exidx.text.main) refers to main.o(.text.main) for [Anonymous Symbol]
    main.o(.text.MPU_Config) refers to stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable) for HAL_MPU_Disable
    main.o(.text.MPU_Config) refers to stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion) for HAL_MPU_ConfigRegion
    main.o(.text.MPU_Config) refers to stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable) for HAL_MPU_Enable
    main.o(.ARM.exidx.text.MPU_Config) refers to main.o(.text.MPU_Config) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.CPU_CACHE_Enable) refers to main.o(.text.CPU_CACHE_Enable) for [Anonymous Symbol]
    main.o(.text.SystemClock_Config) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig) for HAL_RCC_OscConfig
    main.o(.text.SystemClock_Config) refers to main.o(.text.Error_Handler) for Error_Handler
    main.o(.text.SystemClock_Config) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive) for HAL_PWREx_EnableOverDrive
    main.o(.text.SystemClock_Config) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) for HAL_RCC_ClockConfig
    main.o(.ARM.exidx.text.SystemClock_Config) refers to main.o(.text.SystemClock_Config) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.Error_Handler) refers to main.o(.text.Error_Handler) for [Anonymous Symbol]
    thread.o(.text.Init_Thread) refers to thread.o(.text.Thread) for Thread
    thread.o(.text.Init_Thread) refers to rtx_thread.o(.text.osThreadNew) for osThreadNew
    thread.o(.text.Init_Thread) refers to thread.o(.bss.tid_Thread) for tid_Thread
    thread.o(.ARM.exidx.text.Init_Thread) refers to thread.o(.text.Init_Thread) for [Anonymous Symbol]
    thread.o(.text.Thread) refers to led_756g_eval.o(.text.LED_Off) for LED_Off
    thread.o(.text.Thread) refers to rtx_delay.o(.text.osDelay) for osDelay
    thread.o(.text.Thread) refers to led_756g_eval.o(.text.LED_On) for LED_On
    thread.o(.text.Thread) refers to rtx_thread.o(.text.osThreadYield) for osThreadYield
    thread.o(.ARM.exidx.text.Thread) refers to thread.o(.text.Thread) for [Anonymous Symbol]
    led_756g_eval.o(.text.LED_Initialize) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init) for HAL_GPIO_Init
    led_756g_eval.o(.ARM.exidx.text.LED_Initialize) refers to led_756g_eval.o(.text.LED_Initialize) for [Anonymous Symbol]
    led_756g_eval.o(.text.LED_Uninitialize) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_DeInit) for HAL_GPIO_DeInit
    led_756g_eval.o(.ARM.exidx.text.LED_Uninitialize) refers to led_756g_eval.o(.text.LED_Uninitialize) for [Anonymous Symbol]
    led_756g_eval.o(.text.LED_On) refers to led_756g_eval.o(.rodata.LED_PIN) for LED_PIN
    led_756g_eval.o(.text.LED_On) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin) for HAL_GPIO_WritePin
    led_756g_eval.o(.ARM.exidx.text.LED_On) refers to led_756g_eval.o(.text.LED_On) for [Anonymous Symbol]
    led_756g_eval.o(.text.LED_Off) refers to led_756g_eval.o(.rodata.LED_PIN) for LED_PIN
    led_756g_eval.o(.text.LED_Off) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin) for HAL_GPIO_WritePin
    led_756g_eval.o(.ARM.exidx.text.LED_Off) refers to led_756g_eval.o(.text.LED_Off) for [Anonymous Symbol]
    led_756g_eval.o(.text.LED_SetOut) refers to led_756g_eval.o(.text.LED_On) for LED_On
    led_756g_eval.o(.text.LED_SetOut) refers to led_756g_eval.o(.text.LED_Off) for LED_Off
    led_756g_eval.o(.ARM.exidx.text.LED_SetOut) refers to led_756g_eval.o(.text.LED_SetOut) for [Anonymous Symbol]
    led_756g_eval.o(.ARM.exidx.text.LED_GetCount) refers to led_756g_eval.o(.text.LED_GetCount) for [Anonymous Symbol]
    irq_armv7m.o(.text) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    irq_armv7m.o(.text) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    irq_armv7m.o(.text) refers to rtx_lib.o(.text.osZoneSetup_Callback) for osZoneSetup_Callback
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_armv7m.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_armv7m.o(.text) refers to rtx_lib.o(.rodata.osRtxUserSVC) for osRtxUserSVC
    irq_armv7m.o(.ARM.exidx) refers to irq_armv7m.o(.text) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelay) refers to rtx_evr.o(.text.EvrRtxDelay) for EvrRtxDelay
    rtx_delay.o(.text.osDelay) refers to rtx_delay.o(.text.IsException) for IsException
    rtx_delay.o(.text.osDelay) refers to rtx_delay.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_delay.o(.text.osDelay) refers to rtx_evr.o(.text.EvrRtxDelayError) for EvrRtxDelayError
    rtx_delay.o(.text.osDelay) refers to rtx_delay.o(.text.svcRtxDelay) for svcRtxDelay
    rtx_delay.o(.ARM.exidx.text.osDelay) refers to rtx_delay.o(.text.osDelay) for [Anonymous Symbol]
    rtx_delay.o(.ARM.exidx.text.IsException) refers to rtx_delay.o(.text.IsException) for [Anonymous Symbol]
    rtx_delay.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_delay.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_delay.o(.text.osDelayUntil) refers to rtx_evr.o(.text.EvrRtxDelayUntil) for EvrRtxDelayUntil
    rtx_delay.o(.text.osDelayUntil) refers to rtx_delay.o(.text.IsException) for IsException
    rtx_delay.o(.text.osDelayUntil) refers to rtx_delay.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_delay.o(.text.osDelayUntil) refers to rtx_evr.o(.text.EvrRtxDelayError) for EvrRtxDelayError
    rtx_delay.o(.text.osDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for svcRtxDelayUntil
    rtx_delay.o(.ARM.exidx.text.osDelayUntil) refers to rtx_delay.o(.text.osDelayUntil) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelay) refers to rtx_evr.o(.text.EvrRtxDelayError) for EvrRtxDelayError
    rtx_delay.o(.text.svcRtxDelay) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.text.svcRtxDelay) refers to rtx_evr.o(.text.EvrRtxDelayStarted) for EvrRtxDelayStarted
    rtx_delay.o(.ARM.exidx.text.svcRtxDelay) refers to rtx_delay.o(.text.svcRtxDelay) for [Anonymous Symbol]
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_evr.o(.text.EvrRtxDelayError) for EvrRtxDelayError
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_delay.o(.text.svcRtxDelayUntil) refers to rtx_evr.o(.text.EvrRtxDelayUntilStarted) for EvrRtxDelayUntilStarted
    rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil) refers to rtx_delay.o(.text.svcRtxDelayUntil) for [Anonymous Symbol]
    rtx_evflags.o(.text.osRtxEventFlagsDeleteClass) refers to rtx_evflags.o(.text.osRtxObject) for osRtxObject
    rtx_evflags.o(.text.osRtxEventFlagsDeleteClass) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_evflags.o(.text.osRtxEventFlagsDeleteClass) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.osRtxEventFlagsDeleteClass) refers to rtx_evflags.o(.text.osRtxEventFlagsDestroy) for osRtxEventFlagsDestroy
    rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsDeleteClass) refers to rtx_evflags.o(.text.osRtxEventFlagsDeleteClass) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.osRtxObject) refers to rtx_evflags.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_evflags.o(.text.osRtxEventFlagsDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.text.osRtxEventFlagsDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_evflags.o(.text.osRtxEventFlagsDestroy) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_evflags.o(.text.osRtxEventFlagsDestroy) refers to rtx_evr.o(.text.EvrRtxEventFlagsDestroyed) for EvrRtxEventFlagsDestroyed
    rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsDestroy) refers to rtx_evflags.o(.text.osRtxEventFlagsDestroy) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evr.o(.text.EvrRtxEventFlagsNew) for EvrRtxEventFlagsNew
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.osEventFlagsNew) refers to rtx_evflags.o(.text.svcRtxEventFlagsNew) for svcRtxEventFlagsNew
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsNew) refers to rtx_evflags.o(.text.osEventFlagsNew) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.IsException) refers to rtx_evflags.o(.text.IsException) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_evflags.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.svcRtxEventFlagsGetName) for svcRtxEventFlagsGetName
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsGetName) refers to rtx_evflags.o(.text.osEventFlagsGetName) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsGetName) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.svcRtxEventFlagsGetName) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsGetName) refers to rtx_evr.o(.text.EvrRtxEventFlagsGetName) for EvrRtxEventFlagsGetName
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGetName) refers to rtx_evflags.o(.text.svcRtxEventFlagsGetName) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsSet) for EvrRtxEventFlagsSet
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evflags.o(.text.isrRtxEventFlagsSet) for isrRtxEventFlagsSet
    rtx_evflags.o(.text.osEventFlagsSet) refers to rtx_evflags.o(.text.svcRtxEventFlagsSet) for svcRtxEventFlagsSet
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsSet) refers to rtx_evflags.o(.text.osEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_evflags.o(.text.EventFlagsSet) for EventFlagsSet
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_evflags.o(.text.osRtxObject) for osRtxObject
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_evflags.o(.text.isrRtxEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsSetDone) for EvrRtxEventFlagsSetDone
    rtx_evflags.o(.ARM.exidx.text.isrRtxEventFlagsSet) refers to rtx_evflags.o(.text.isrRtxEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsClear) refers to rtx_evr.o(.text.EvrRtxEventFlagsClear) for EvrRtxEventFlagsClear
    rtx_evflags.o(.text.osEventFlagsClear) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsClear) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsClear) refers to rtx_evflags.o(.text.svcRtxEventFlagsClear) for svcRtxEventFlagsClear
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsClear) refers to rtx_evflags.o(.text.osEventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsClear) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_evflags.o(.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.EventFlagsClear) for EventFlagsClear
    rtx_evflags.o(.text.svcRtxEventFlagsClear) refers to rtx_evr.o(.text.EvrRtxEventFlagsClearDone) for EvrRtxEventFlagsClearDone
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsClear) refers to rtx_evflags.o(.text.svcRtxEventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsGet) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsGet) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsGet) refers to rtx_evflags.o(.text.svcRtxEventFlagsGet) for svcRtxEventFlagsGet
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsGet) refers to rtx_evflags.o(.text.osEventFlagsGet) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsGet) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.svcRtxEventFlagsGet) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsGet) refers to rtx_evr.o(.text.EvrRtxEventFlagsGet) for EvrRtxEventFlagsGet
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGet) refers to rtx_evflags.o(.text.svcRtxEventFlagsGet) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWait) for EvrRtxEventFlagsWait
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.isrRtxEventFlagsWait) for isrRtxEventFlagsWait
    rtx_evflags.o(.text.osEventFlagsWait) refers to rtx_evflags.o(.text.svcRtxEventFlagsWait) for svcRtxEventFlagsWait
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsWait) refers to rtx_evflags.o(.text.osEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.isrRtxEventFlagsWait) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.isrRtxEventFlagsWait) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.isrRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.isrRtxEventFlagsWait) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.isrRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted) for EvrRtxEventFlagsWaitCompleted
    rtx_evflags.o(.text.isrRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitNotCompleted) for EvrRtxEventFlagsWaitNotCompleted
    rtx_evflags.o(.ARM.exidx.text.isrRtxEventFlagsWait) refers to rtx_evflags.o(.text.isrRtxEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evr.o(.text.EvrRtxEventFlagsDelete) for EvrRtxEventFlagsDelete
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.IsException) for IsException
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.svcRtxEventFlagsDelete) for svcRtxEventFlagsDelete
    rtx_evflags.o(.ARM.exidx.text.osEventFlagsDelete) refers to rtx_evflags.o(.text.osEventFlagsDelete) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.osRtxEventFlagsPostProcess) for osRtxEventFlagsPostProcess
    rtx_evflags.o(.text.svcRtxEventFlagsNew) refers to rtx_evr.o(.text.EvrRtxEventFlagsCreated) for EvrRtxEventFlagsCreated
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsNew) refers to rtx_evflags.o(.text.svcRtxEventFlagsNew) for [Anonymous Symbol]
    rtx_evflags.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_evflags.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_evflags.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.IsEventFlagsPtrValid) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for [Anonymous Symbol]
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.osRtxEventFlagsPostProcess) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted) for EvrRtxEventFlagsWaitCompleted
    rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsPostProcess) refers to rtx_evflags.o(.text.osRtxEventFlagsPostProcess) for [Anonymous Symbol]
    rtx_evflags.o(.text.EventFlagsCheck) refers to rtx_evflags.o(.text.atomic_chk32_all) for atomic_chk32_all
    rtx_evflags.o(.text.EventFlagsCheck) refers to rtx_evflags.o(.text.atomic_chk32_any) for atomic_chk32_any
    rtx_evflags.o(.ARM.exidx.text.EventFlagsCheck) refers to rtx_evflags.o(.text.EventFlagsCheck) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.atomic_chk32_all) refers to rtx_evflags.o(.text.atomic_chk32_all) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.atomic_chk32_any) refers to rtx_evflags.o(.text.atomic_chk32_any) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsId) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for [Anonymous Symbol]
    rtx_evflags.o(.text.EventFlagsSet) refers to rtx_evflags.o(.text.atomic_set32) for atomic_set32
    rtx_evflags.o(.ARM.exidx.text.EventFlagsSet) refers to rtx_evflags.o(.text.EventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.atomic_set32) refers to rtx_evflags.o(.text.atomic_set32) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.EventFlagsSet) for EventFlagsSet
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted) for EvrRtxEventFlagsWaitCompleted
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_evflags.o(.text.svcRtxEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsSetDone) for EvrRtxEventFlagsSetDone
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsSet) refers to rtx_evflags.o(.text.svcRtxEventFlagsSet) for [Anonymous Symbol]
    rtx_evflags.o(.text.EventFlagsClear) refers to rtx_evflags.o(.text.atomic_clr32) for atomic_clr32
    rtx_evflags.o(.ARM.exidx.text.EventFlagsClear) refers to rtx_evflags.o(.text.EventFlagsClear) for [Anonymous Symbol]
    rtx_evflags.o(.ARM.exidx.text.atomic_clr32) refers to rtx_evflags.o(.text.atomic_clr32) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.EventFlagsCheck) for EventFlagsCheck
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted) for EvrRtxEventFlagsWaitCompleted
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitPending) for EvrRtxEventFlagsWaitPending
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.osRtxObject) for osRtxObject
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout) for EvrRtxEventFlagsWaitTimeout
    rtx_evflags.o(.text.svcRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitNotCompleted) for EvrRtxEventFlagsWaitNotCompleted
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsWait) refers to rtx_evflags.o(.text.svcRtxEventFlagsWait) for [Anonymous Symbol]
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.osRtxEventFlagsId) for osRtxEventFlagsId
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.IsEventFlagsPtrValid) for IsEventFlagsPtrValid
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for EvrRtxEventFlagsError
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.osRtxObject) for osRtxObject
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_evflags.o(.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.osRtxEventFlagsDestroy) for osRtxEventFlagsDestroy
    rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsDelete) refers to rtx_evflags.o(.text.svcRtxEventFlagsDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryInit) refers to rtx_evr.o(.text.EvrRtxMemoryInit) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryFree) refers to rtx_evr.o(.text.EvrRtxMemoryFree) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryBlockInit) refers to rtx_evr.o(.text.EvrRtxMemoryBlockInit) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryBlockAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryBlockAlloc) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryBlockFree) refers to rtx_evr.o(.text.EvrRtxMemoryBlockFree) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelError) refers to rtx_evr.o(.text.EvrRtxKernelError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelInitialize) refers to rtx_evr.o(.text.EvrRtxKernelInitialize) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelInitialized) refers to rtx_evr.o(.text.EvrRtxKernelInitialized) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetInfo) refers to rtx_evr.o(.text.EvrRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelInfoRetrieved) refers to rtx_evr.o(.text.EvrRtxKernelInfoRetrieved) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetState) refers to rtx_evr.o(.text.EvrRtxKernelGetState) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelStart) refers to rtx_evr.o(.text.EvrRtxKernelStart) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelStarted) refers to rtx_evr.o(.text.EvrRtxKernelStarted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelLock) refers to rtx_evr.o(.text.EvrRtxKernelLock) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelLocked) refers to rtx_evr.o(.text.EvrRtxKernelLocked) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelUnlock) refers to rtx_evr.o(.text.EvrRtxKernelUnlock) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelUnlocked) refers to rtx_evr.o(.text.EvrRtxKernelUnlocked) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelRestoreLock) refers to rtx_evr.o(.text.EvrRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelLockRestored) refers to rtx_evr.o(.text.EvrRtxKernelLockRestored) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelSuspend) refers to rtx_evr.o(.text.EvrRtxKernelSuspend) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelSuspended) refers to rtx_evr.o(.text.EvrRtxKernelSuspended) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelResume) refers to rtx_evr.o(.text.EvrRtxKernelResume) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelResumed) refers to rtx_evr.o(.text.EvrRtxKernelResumed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelProtect) refers to rtx_evr.o(.text.EvrRtxKernelProtect) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelProtected) refers to rtx_evr.o(.text.EvrRtxKernelProtected) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetTickCount) refers to rtx_evr.o(.text.EvrRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetTickFreq) refers to rtx_evr.o(.text.EvrRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetSysTimerCount) refers to rtx_evr.o(.text.EvrRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetSysTimerFreq) refers to rtx_evr.o(.text.EvrRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelErrorNotify) refers to rtx_evr.o(.text.EvrRtxKernelErrorNotify) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxKernelDestroyClass) refers to rtx_evr.o(.text.EvrRtxKernelDestroyClass) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadError) refers to rtx_evr.o(.text.EvrRtxThreadError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadNew) refers to rtx_evr.o(.text.EvrRtxThreadNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadCreated) refers to rtx_evr.o(.text.EvrRtxThreadCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetName) refers to rtx_evr.o(.text.EvrRtxThreadGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetClass) refers to rtx_evr.o(.text.EvrRtxThreadGetClass) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetZone) refers to rtx_evr.o(.text.EvrRtxThreadGetZone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetId) refers to rtx_evr.o(.text.EvrRtxThreadGetId) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetState) refers to rtx_evr.o(.text.EvrRtxThreadGetState) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetStackSize) refers to rtx_evr.o(.text.EvrRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetStackSpace) refers to rtx_evr.o(.text.EvrRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSetPriority) refers to rtx_evr.o(.text.EvrRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadPriorityUpdated) refers to rtx_evr.o(.text.EvrRtxThreadPriorityUpdated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetPriority) refers to rtx_evr.o(.text.EvrRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadYield) refers to rtx_evr.o(.text.EvrRtxThreadYield) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSuspend) refers to rtx_evr.o(.text.EvrRtxThreadSuspend) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSuspended) refers to rtx_evr.o(.text.EvrRtxThreadSuspended) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadResume) refers to rtx_evr.o(.text.EvrRtxThreadResume) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadResumed) refers to rtx_evr.o(.text.EvrRtxThreadResumed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadDetach) refers to rtx_evr.o(.text.EvrRtxThreadDetach) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadDetached) refers to rtx_evr.o(.text.EvrRtxThreadDetached) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadJoin) refers to rtx_evr.o(.text.EvrRtxThreadJoin) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadJoinPending) refers to rtx_evr.o(.text.EvrRtxThreadJoinPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadJoined) refers to rtx_evr.o(.text.EvrRtxThreadJoined) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadBlocked) refers to rtx_evr.o(.text.EvrRtxThreadBlocked) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadUnblocked) refers to rtx_evr.o(.text.EvrRtxThreadUnblocked) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadPreempted) refers to rtx_evr.o(.text.EvrRtxThreadPreempted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSwitched) refers to rtx_evr.o(.text.EvrRtxThreadSwitched) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadExit) refers to rtx_evr.o(.text.EvrRtxThreadExit) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadTerminate) refers to rtx_evr.o(.text.EvrRtxThreadTerminate) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadDestroyed) refers to rtx_evr.o(.text.EvrRtxThreadDestroyed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFeedWatchdog) refers to rtx_evr.o(.text.EvrRtxThreadFeedWatchdog) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFeedWatchdogDone) refers to rtx_evr.o(.text.EvrRtxThreadFeedWatchdogDone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadProtectPrivileged) refers to rtx_evr.o(.text.EvrRtxThreadProtectPrivileged) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadPrivilegedProtected) refers to rtx_evr.o(.text.EvrRtxThreadPrivilegedProtected) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetCount) refers to rtx_evr.o(.text.EvrRtxThreadGetCount) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadEnumerate) refers to rtx_evr.o(.text.EvrRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSuspendClass) refers to rtx_evr.o(.text.EvrRtxThreadSuspendClass) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadResumeClass) refers to rtx_evr.o(.text.EvrRtxThreadResumeClass) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadTerminateZone) refers to rtx_evr.o(.text.EvrRtxThreadTerminateZone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadWatchdogExpired) refers to rtx_evr.o(.text.EvrRtxThreadWatchdogExpired) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsError) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsSetDone) refers to rtx_evr.o(.text.EvrRtxThreadFlagsSetDone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsClear) refers to rtx_evr.o(.text.EvrRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsClearDone) refers to rtx_evr.o(.text.EvrRtxThreadFlagsClearDone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsGet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitPending) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitTimeout) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitCompleted) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitNotCompleted) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitNotCompleted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxDelayError) refers to rtx_evr.o(.text.EvrRtxDelayError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxDelay) refers to rtx_evr.o(.text.EvrRtxDelay) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxDelayUntil) refers to rtx_evr.o(.text.EvrRtxDelayUntil) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxDelayStarted) refers to rtx_evr.o(.text.EvrRtxDelayStarted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxDelayUntilStarted) refers to rtx_evr.o(.text.EvrRtxDelayUntilStarted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxDelayCompleted) refers to rtx_evr.o(.text.EvrRtxDelayCompleted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerError) refers to rtx_evr.o(.text.EvrRtxTimerError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerCallback) refers to rtx_evr.o(.text.EvrRtxTimerCallback) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerNew) refers to rtx_evr.o(.text.EvrRtxTimerNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerCreated) refers to rtx_evr.o(.text.EvrRtxTimerCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerGetName) refers to rtx_evr.o(.text.EvrRtxTimerGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStart) refers to rtx_evr.o(.text.EvrRtxTimerStart) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStarted) refers to rtx_evr.o(.text.EvrRtxTimerStarted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStop) refers to rtx_evr.o(.text.EvrRtxTimerStop) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStopped) refers to rtx_evr.o(.text.EvrRtxTimerStopped) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerIsRunning) refers to rtx_evr.o(.text.EvrRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerDelete) refers to rtx_evr.o(.text.EvrRtxTimerDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxTimerDestroyed) refers to rtx_evr.o(.text.EvrRtxTimerDestroyed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsError) refers to rtx_evr.o(.text.EvrRtxEventFlagsError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsNew) refers to rtx_evr.o(.text.EvrRtxEventFlagsNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsCreated) refers to rtx_evr.o(.text.EvrRtxEventFlagsCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsGetName) refers to rtx_evr.o(.text.EvrRtxEventFlagsGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsSet) refers to rtx_evr.o(.text.EvrRtxEventFlagsSet) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsSetDone) refers to rtx_evr.o(.text.EvrRtxEventFlagsSetDone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsClear) refers to rtx_evr.o(.text.EvrRtxEventFlagsClear) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsClearDone) refers to rtx_evr.o(.text.EvrRtxEventFlagsClearDone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsGet) refers to rtx_evr.o(.text.EvrRtxEventFlagsGet) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWait) refers to rtx_evr.o(.text.EvrRtxEventFlagsWait) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitPending) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitTimeout) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitCompleted) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitNotCompleted) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitNotCompleted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsDelete) refers to rtx_evr.o(.text.EvrRtxEventFlagsDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsDestroyed) refers to rtx_evr.o(.text.EvrRtxEventFlagsDestroyed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexError) refers to rtx_evr.o(.text.EvrRtxMutexError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexNew) refers to rtx_evr.o(.text.EvrRtxMutexNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexCreated) refers to rtx_evr.o(.text.EvrRtxMutexCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexGetName) refers to rtx_evr.o(.text.EvrRtxMutexGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexAcquire) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquirePending) refers to rtx_evr.o(.text.EvrRtxMutexAcquirePending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquireTimeout) refers to rtx_evr.o(.text.EvrRtxMutexAcquireTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquired) refers to rtx_evr.o(.text.EvrRtxMutexAcquired) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexNotAcquired) refers to rtx_evr.o(.text.EvrRtxMutexNotAcquired) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexRelease) refers to rtx_evr.o(.text.EvrRtxMutexRelease) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexReleased) refers to rtx_evr.o(.text.EvrRtxMutexReleased) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexGetOwner) refers to rtx_evr.o(.text.EvrRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexDelete) refers to rtx_evr.o(.text.EvrRtxMutexDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMutexDestroyed) refers to rtx_evr.o(.text.EvrRtxMutexDestroyed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreError) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreNew) refers to rtx_evr.o(.text.EvrRtxSemaphoreNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreCreated) refers to rtx_evr.o(.text.EvrRtxSemaphoreCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreGetName) refers to rtx_evr.o(.text.EvrRtxSemaphoreGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquire) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquirePending) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquireTimeout) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquired) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquired) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreNotAcquired) refers to rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreRelease) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreReleased) refers to rtx_evr.o(.text.EvrRtxSemaphoreReleased) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreGetCount) refers to rtx_evr.o(.text.EvrRtxSemaphoreGetCount) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreDelete) refers to rtx_evr.o(.text.EvrRtxSemaphoreDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreDestroyed) refers to rtx_evr.o(.text.EvrRtxSemaphoreDestroyed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolError) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolNew) refers to rtx_evr.o(.text.EvrRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolCreated) refers to rtx_evr.o(.text.EvrRtxMemoryPoolCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetName) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocPending) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocTimeout) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocated) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocFailed) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocFailed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolDeallocated) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDeallocated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolFreeFailed) refers to rtx_evr.o(.text.EvrRtxMemoryPoolFreeFailed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetCapacity) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetBlockSize) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetCount) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetSpace) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolDelete) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolDestroyed) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDestroyed) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueError) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueNew) refers to rtx_evr.o(.text.EvrRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueCreated) refers to rtx_evr.o(.text.EvrRtxMessageQueueCreated) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetName) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueuePutPending) refers to rtx_evr.o(.text.EvrRtxMessageQueuePutPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueuePutTimeout) refers to rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueInsertPending) refers to rtx_evr.o(.text.EvrRtxMessageQueueInsertPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueInserted) refers to rtx_evr.o(.text.EvrRtxMessageQueueInserted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueNotInserted) refers to rtx_evr.o(.text.EvrRtxMessageQueueNotInserted) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetPending) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetPending) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetTimeout) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueRetrieved) refers to rtx_evr.o(.text.EvrRtxMessageQueueRetrieved) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueNotRetrieved) refers to rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetCapacity) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetMsgSize) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetCount) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetSpace) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueResetDone) refers to rtx_evr.o(.text.EvrRtxMessageQueueResetDone) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueDelete) refers to rtx_evr.o(.text.EvrRtxMessageQueueDelete) for [Anonymous Symbol]
    rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueDestroyed) refers to rtx_evr.o(.text.EvrRtxMessageQueueDestroyed) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelBeforeInit) refers to rtx_kernel.o(.text.osRtxKernelBeforeInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxKernelErrorNotify) refers to rtx_evr.o(.text.EvrRtxKernelErrorNotify) for EvrRtxKernelErrorNotify
    rtx_kernel.o(.text.osRtxKernelErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelBeforeInit) for osRtxKernelBeforeInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_evr.o(.text.EvrRtxKernelInitialize) for EvrRtxKernelInitialize
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsException) refers to rtx_kernel.o(.text.IsException) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_kernel.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_evr.o(.text.EvrRtxKernelGetInfo) for EvrRtxKernelGetInfo
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.IsPrivileged) for IsPrivileged
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsPrivileged) refers to rtx_kernel.o(.text.IsPrivileged) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.1) for .L.str
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_evr.o(.text.EvrRtxKernelInfoRetrieved) for EvrRtxKernelInfoRetrieved
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.IsPrivileged) for IsPrivileged
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.osRtxKernelState) for osRtxKernelState
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_evr.o(.text.EvrRtxKernelGetState) for EvrRtxKernelGetState
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_evr.o(.text.EvrRtxKernelStart) for EvrRtxKernelStart
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelStart) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_evr.o(.text.EvrRtxKernelLock) for EvrRtxKernelLock
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelLock) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_evr.o(.text.EvrRtxKernelUnlock) for EvrRtxKernelUnlock
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_evr.o(.text.EvrRtxKernelRestoreLock) for EvrRtxKernelRestoreLock
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.IsFault) for IsFault
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.IsSVCallIrq) for IsSVCallIrq
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.IsPendSvIrq) for IsPendSvIrq
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.IsTickIrq) for IsTickIrq
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsFault) refers to rtx_kernel.o(.text.IsFault) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsSVCallIrq) refers to rtx_kernel.o(.text.IsSVCallIrq) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsPendSvIrq) refers to rtx_kernel.o(.text.IsPendSvIrq) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.IsTickIrq) refers to rtx_kernel.o(.text.IsTickIrq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_evr.o(.text.EvrRtxKernelLockRestored) for EvrRtxKernelLockRestored
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_evr.o(.text.EvrRtxKernelSuspend) for EvrRtxKernelSuspend
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_evr.o(.text.EvrRtxKernelResume) for EvrRtxKernelResume
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelResume) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelProtect) refers to rtx_evr.o(.text.EvrRtxKernelProtect) for EvrRtxKernelProtect
    rtx_kernel.o(.text.osKernelProtect) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelProtect) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelProtect) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.osKernelProtect) refers to rtx_kernel.o(.text.svcRtxKernelProtect) for svcRtxKernelProtect
    rtx_kernel.o(.ARM.exidx.text.osKernelProtect) refers to rtx_kernel.o(.text.osKernelProtect) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_evr.o(.text.EvrRtxKernelDestroyClass) for EvrRtxKernelDestroyClass
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_kernel.o(.text.IsTickIrq) for IsTickIrq
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_kernel.o(.text.svcRtxKernelDestroyClass) for svcRtxKernelDestroyClass
    rtx_kernel.o(.text.osKernelDestroyClass) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.ARM.exidx.text.osKernelDestroyClass) refers to rtx_kernel.o(.text.osKernelDestroyClass) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.text.IsSVCallIrq) for IsSVCallIrq
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_mutex.o(.text.osRtxMutexDeleteClass) for osRtxMutexDeleteClass
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass) for osRtxSemaphoreDeleteClass
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass) for osRtxMemoryPoolDeleteClass
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass) for osRtxMessageQueueDeleteClass
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_evflags.o(.text.osRtxEventFlagsDeleteClass) for osRtxEventFlagsDeleteClass
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_timer.o(.text.osRtxTimerDeleteClass) for osRtxTimerDeleteClass
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for osRtxThreadWatchdogRemove
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.text.osRtxThreadSetRunning) for osRtxThreadSetRunning
    rtx_kernel.o(.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelDestroyClass) refers to rtx_kernel.o(.text.svcRtxKernelDestroyClass) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_evr.o(.text.EvrRtxKernelGetTickCount) for EvrRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_evr.o(.text.EvrRtxKernelGetTickFreq) for EvrRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_evr.o(.text.EvrRtxKernelGetSysTimerCount) for EvrRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.IsException) for IsException
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to rtx_evr.o(.text.EvrRtxKernelGetSysTimerFreq) for EvrRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_evr.o(.text.EvrRtxKernelInitialized) for EvrRtxKernelInitialized
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rt_memclr_w.o(.text) for __aeabi_memclr4
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxKernelState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelState) refers to rtx_kernel.o(.text.osRtxKernelState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.SVC_Setup) for SVC_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_armv7m.o(.text) for SysTick_Handler
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_evr.o(.text.EvrRtxKernelStarted) for EvrRtxKernelStarted
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.SVC_Setup) refers to rtx_kernel.o(.text.__NVIC_GetPriorityGrouping) for __NVIC_GetPriorityGrouping
    rtx_kernel.o(.ARM.exidx.text.SVC_Setup) refers to rtx_kernel.o(.text.SVC_Setup) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.__NVIC_GetPriorityGrouping) refers to rtx_kernel.o(.text.__NVIC_GetPriorityGrouping) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_evr.o(.text.EvrRtxKernelLocked) for EvrRtxKernelLocked
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_evr.o(.text.EvrRtxKernelUnlocked) for EvrRtxKernelUnlocked
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.KernelBlock) for KernelBlock
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_evr.o(.text.EvrRtxKernelSuspended) for EvrRtxKernelSuspended
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.KernelBlock) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.KernelBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.KernelBlock) refers to rtx_kernel.o(.text.GetPendSV) for GetPendSV
    rtx_kernel.o(.text.KernelBlock) refers to rtx_kernel.o(.text.ClrPendSV) for ClrPendSV
    rtx_kernel.o(.ARM.exidx.text.KernelBlock) refers to rtx_kernel.o(.text.KernelBlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.GetKernelSleepTime) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime) refers to rtx_kernel.o(.text.GetKernelSleepTime) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.GetPendSV) refers to rtx_kernel.o(.text.GetPendSV) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.ClrPendSV) refers to rtx_kernel.o(.text.ClrPendSV) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_evr.o(.text.EvrRtxKernelResumed) for EvrRtxKernelResumed
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadWatchdogTick) for osRtxThreadWatchdogTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.KernelUnblock) for KernelUnblock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.KernelUnblock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.KernelUnblock) refers to rtx_kernel.o(.text.SetPendSV) for SetPendSV
    rtx_kernel.o(.text.KernelUnblock) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.ARM.exidx.text.KernelUnblock) refers to rtx_kernel.o(.text.KernelUnblock) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.SetPendSV) refers to rtx_kernel.o(.text.SetPendSV) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelProtect) refers to rtx_evr.o(.text.EvrRtxKernelError) for EvrRtxKernelError
    rtx_kernel.o(.text.svcRtxKernelProtect) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelProtect) refers to rtx_evr.o(.text.EvrRtxKernelProtected) for EvrRtxKernelProtected
    rtx_kernel.o(.text.svcRtxKernelProtect) refers to rtx_kernel.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelProtect) refers to rtx_kernel.o(.text.svcRtxKernelProtect) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelGetState) refers to rtx_kernel.o(.text.osRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxThreadSetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osRtxThreadSetRunning) refers to rtx_kernel.o(.text.osRtxThreadSetRunning) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.1) for [Anonymous Symbol]
    rtx_lib.o(.ARM.exidx.text.osWatchdogAlarm_Handler) refers to rtx_lib.o(.text.osWatchdogAlarm_Handler) for [Anonymous Symbol]
    rtx_lib.o(.ARM.exidx.text.osZoneSetup_Callback) refers to rtx_lib.o(.text.osZoneSetup_Callback) for [Anonymous Symbol]
    rtx_lib.o(.text._platform_post_stackheap_init) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    rtx_lib.o(.ARM.exidx.text._platform_post_stackheap_init) refers to rtx_lib.o(.text._platform_post_stackheap_init) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.idle.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.timer.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.mem) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_idle_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerSetup) for osRtxTimerSetup
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_mq_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata.irqRtxLibRef) refers to irq_armv7m.o(.rodata) for irqRtxLib
    rtx_memory.o(.text.osRtxMemoryInit) refers to rtx_evr.o(.text.EvrRtxMemoryInit) for EvrRtxMemoryInit
    rtx_memory.o(.text.osRtxMemoryInit) refers to rtx_memory.o(.text.MemHeadPtr) for MemHeadPtr
    rtx_memory.o(.text.osRtxMemoryInit) refers to rtx_memory.o(.text.MemBlockPtr) for MemBlockPtr
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.MemHeadPtr) refers to rtx_memory.o(.text.MemHeadPtr) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.MemBlockPtr) refers to rtx_memory.o(.text.MemBlockPtr) for [Anonymous Symbol]
    rtx_memory.o(.text.osRtxMemoryAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryAlloc) for EvrRtxMemoryAlloc
    rtx_memory.o(.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.MemBlockPtr) for MemBlockPtr
    rtx_memory.o(.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.MemHeadPtr) for MemHeadPtr
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.text.osRtxMemoryFree) refers to rtx_evr.o(.text.EvrRtxMemoryFree) for EvrRtxMemoryFree
    rtx_memory.o(.text.osRtxMemoryFree) refers to rtx_memory.o(.text.MemBlockPtr) for MemBlockPtr
    rtx_memory.o(.text.osRtxMemoryFree) refers to rtx_memory.o(.text.MemHeadPtr) for MemHeadPtr
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolInit) refers to rtx_evr.o(.text.EvrRtxMemoryBlockInit) for EvrRtxMemoryBlockInit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryBlockAlloc) for EvrRtxMemoryBlockAlloc
    rtx_mempool.o(.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.atomic_link_get) for atomic_link_get
    rtx_mempool.o(.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.atomic_inc32) for atomic_inc32
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.atomic_link_get) refers to rtx_mempool.o(.text.atomic_link_get) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.atomic_inc32) refers to rtx_mempool.o(.text.atomic_inc32) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryBlockFree) for EvrRtxMemoryBlockFree
    rtx_mempool.o(.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.atomic_link_put) for atomic_link_put
    rtx_mempool.o(.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.atomic_dec32) for atomic_dec32
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.atomic_link_put) refers to rtx_mempool.o(.text.atomic_link_put) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.atomic_dec32) refers to rtx_mempool.o(.text.atomic_dec32) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass) refers to rtx_mempool.o(.text.osRtxObject) for osRtxObject
    rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass) refers to rtx_mempool.o(.text.osRtxMemoryPoolDestroy) for osRtxMemoryPoolDestroy
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolDeleteClass) refers to rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxObject) refers to rtx_mempool.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.osRtxMemoryPoolDestroy) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.osRtxMemoryPoolDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osRtxMemoryPoolDestroy) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDestroyed) for EvrRtxMemoryPoolDestroyed
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolDestroy) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_evr.o(.text.EvrRtxMemoryPoolNew) for EvrRtxMemoryPoolNew
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.IsException) refers to rtx_mempool.o(.text.IsException) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_mempool.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolGetName) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetName) for EvrRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAlloc) for EvrRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) for isrRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocFailed) for EvrRtxMemoryPoolAllocFailed
    rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocated) for EvrRtxMemoryPoolAllocated
    rtx_mempool.o(.ARM.exidx.text.isrRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.isrRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolFree) for EvrRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.isrRtxMemoryPoolFree) for isrRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxObject) for osRtxObject
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDeallocated) for EvrRtxMemoryPoolDeallocated
    rtx_mempool.o(.text.isrRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolFreeFailed) for EvrRtxMemoryPoolFreeFailed
    rtx_mempool.o(.ARM.exidx.text.isrRtxMemoryPoolFree) refers to rtx_mempool.o(.text.isrRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetCapacity) for EvrRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetBlockSize) for EvrRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetCount) for EvrRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) refers to rtx_evr.o(.text.EvrRtxMemoryPoolGetSpace) for EvrRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDelete) for EvrRtxMemoryPoolDelete
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.IsException) for IsException
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_evr.o(.text.EvrRtxMemoryPoolCreated) for EvrRtxMemoryPoolCreated
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_mempool.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.IsMemoryPoolPtrValid) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxObject) for osRtxObject
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocated) for EvrRtxMemoryPoolAllocated
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolId) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocated) for EvrRtxMemoryPoolAllocated
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocPending) for EvrRtxMemoryPoolAllocPending
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxObject) for osRtxObject
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout) for EvrRtxMemoryPoolAllocTimeout
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocFailed) for EvrRtxMemoryPoolAllocFailed
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolDeallocated) for EvrRtxMemoryPoolDeallocated
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxObject) for osRtxObject
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocated) for EvrRtxMemoryPoolAllocated
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_evr.o(.text.EvrRtxMemoryPoolFreeFailed) for EvrRtxMemoryPoolFreeFailed
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolId) for osRtxMemoryPoolId
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.IsMemoryPoolPtrValid) for IsMemoryPoolPtrValid
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_evr.o(.text.EvrRtxMemoryPoolError) for EvrRtxMemoryPoolError
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxObject) for osRtxObject
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolDestroy) for osRtxMemoryPoolDestroy
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass) refers to rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) for osRtxMessageQueueDestroy
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueDeleteClass) refers to rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.osRtxObject) refers to rtx_msgqueue.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) refers to rtx_evr.o(.text.EvrRtxMessageQueueDestroyed) for EvrRtxMessageQueueDestroyed
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueDestroy) refers to rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueId) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_evr.o(.text.EvrRtxMessageQueueCreated) for EvrRtxMessageQueueCreated
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_evr.o(.text.EvrRtxMessageQueueNew) for EvrRtxMessageQueueNew
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.IsException) refers to rtx_msgqueue.o(.text.IsException) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_msgqueue.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetName) for EvrRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueuePut) for EvrRtxMessageQueuePut
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.isrRtxMessageQueuePut) for isrRtxMessageQueuePut
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueInsertPending) for EvrRtxMessageQueueInsertPending
    rtx_msgqueue.o(.text.isrRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueNotInserted) for EvrRtxMessageQueueNotInserted
    rtx_msgqueue.o(.ARM.exidx.text.isrRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.isrRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueGet) for EvrRtxMessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.isrRtxMessageQueueGet) for isrRtxMessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueRetrieved) for EvrRtxMessageQueueRetrieved
    rtx_msgqueue.o(.text.isrRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved) for EvrRtxMessageQueueNotRetrieved
    rtx_msgqueue.o(.ARM.exidx.text.isrRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.isrRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetCapacity) for EvrRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetMsgSize) for EvrRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetCount) for EvrRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetSpace) for EvrRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueReset) for EvrRtxMessageQueueReset
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_evr.o(.text.EvrRtxMessageQueueDelete) for EvrRtxMessageQueueDelete
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.IsException) for IsException
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_msgqueue.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.IsMessageQueuePtrValid) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_evr.o(.text.EvrRtxMessageQueueInserted) for EvrRtxMessageQueueInserted
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_evr.o(.text.EvrRtxMessageQueueRetrieved) for EvrRtxMessageQueueRetrieved
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.atomic_inc32) for atomic_inc32
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.atomic_inc32) refers to rtx_msgqueue.o(.text.atomic_inc32) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueInserted) for EvrRtxMessageQueueInserted
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueRetrieved) for EvrRtxMessageQueueRetrieved
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueuePutPending) for EvrRtxMessageQueuePutPending
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout) for EvrRtxMessageQueuePutTimeout
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_evr.o(.text.EvrRtxMessageQueueNotInserted) for EvrRtxMessageQueueNotInserted
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.atomic_dec32_nz) for atomic_dec32_nz
    rtx_msgqueue.o(.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.atomic_wr8) for atomic_wr8
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.atomic_dec32_nz) refers to rtx_msgqueue.o(.text.atomic_dec32_nz) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.atomic_wr8) refers to rtx_msgqueue.o(.text.atomic_wr8) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueRetrieved) for EvrRtxMessageQueueRetrieved
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueInserted) for EvrRtxMessageQueueInserted
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetPending) for EvrRtxMessageQueueGetPending
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout) for EvrRtxMessageQueueGetTimeout
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved) for EvrRtxMessageQueueNotRetrieved
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueRetrieved) for EvrRtxMessageQueueRetrieved
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueInserted) for EvrRtxMessageQueueInserted
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_evr.o(.text.EvrRtxMessageQueueResetDone) for EvrRtxMessageQueueResetDone
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.osRtxMessageQueueId) for osRtxMessageQueueId
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.IsMessageQueuePtrValid) for IsMessageQueuePtrValid
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_evr.o(.text.EvrRtxMessageQueueError) for EvrRtxMessageQueueError
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.osRtxObject) for osRtxObject
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.osRtxMessageQueueDestroy) for osRtxMessageQueueDestroy
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_evr.o(.text.EvrRtxMutexReleased) for EvrRtxMutexReleased
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxObject) for osRtxObject
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_evr.o(.text.EvrRtxMutexAcquired) for EvrRtxMutexAcquired
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.osRtxObject) refers to rtx_mutex.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRestore) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexDeleteClass) refers to rtx_mutex.o(.text.osRtxMutexOwnerUnlock) for osRtxMutexOwnerUnlock
    rtx_mutex.o(.text.osRtxMutexDeleteClass) refers to rtx_mutex.o(.text.osRtxMutexDestroy) for osRtxMutexDestroy
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexDeleteClass) refers to rtx_mutex.o(.text.osRtxMutexDeleteClass) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerUnlock) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.osRtxMutexOwnerUnlock) refers to rtx_mutex.o(.text.osRtxObject) for osRtxObject
    rtx_mutex.o(.text.osRtxMutexOwnerUnlock) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerUnlock) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerUnlock) refers to rtx_mutex.o(.text.osRtxMutexOwnerUnlock) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.text.osRtxMutexDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.osRtxMutexDestroy) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.osRtxMutexDestroy) refers to rtx_evr.o(.text.EvrRtxMutexDestroyed) for EvrRtxMutexDestroyed
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexDestroy) refers to rtx_mutex.o(.text.osRtxMutexDestroy) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_evr.o(.text.EvrRtxMutexNew) for EvrRtxMutexNew
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.IsException) for IsException
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mutex.o(.text.osMutexNew) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.IsException) refers to rtx_mutex.o(.text.IsException) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_mutex.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.IsException) for IsException
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.osRtxMutexId) for osRtxMutexId
    rtx_mutex.o(.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.IsMutexPtrValid) for IsMutexPtrValid
    rtx_mutex.o(.text.svcRtxMutexGetName) refers to rtx_evr.o(.text.EvrRtxMutexGetName) for EvrRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexAcquire) for EvrRtxMutexAcquire
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.IsException) for IsException
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_evr.o(.text.EvrRtxMutexRelease) for EvrRtxMutexRelease
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.IsException) for IsException
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.IsException) for IsException
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_evr.o(.text.EvrRtxMutexGetOwner) for EvrRtxMutexGetOwner
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_evr.o(.text.EvrRtxMutexDelete) for EvrRtxMutexDelete
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.IsException) for IsException
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.IsMutexPtrValid) for IsMutexPtrValid
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_evr.o(.text.EvrRtxMutexCreated) for EvrRtxMutexCreated
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_mutex.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.IsMutexPtrValid) refers to rtx_mutex.o(.text.IsMutexPtrValid) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexId) refers to rtx_mutex.o(.text.osRtxMutexId) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.osRtxMutexId) for osRtxMutexId
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.IsMutexPtrValid) for IsMutexPtrValid
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexAcquired) for EvrRtxMutexAcquired
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexAcquirePending) for EvrRtxMutexAcquirePending
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.osRtxObject) for osRtxObject
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexAcquireTimeout) for EvrRtxMutexAcquireTimeout
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_evr.o(.text.EvrRtxMutexNotAcquired) for EvrRtxMutexNotAcquired
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.osRtxMutexId) for osRtxMutexId
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.IsMutexPtrValid) for IsMutexPtrValid
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_evr.o(.text.EvrRtxMutexReleased) for EvrRtxMutexReleased
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.osRtxObject) for osRtxObject
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_evr.o(.text.EvrRtxMutexAcquired) for EvrRtxMutexAcquired
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.osRtxMutexId) for osRtxMutexId
    rtx_mutex.o(.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.IsMutexPtrValid) for IsMutexPtrValid
    rtx_mutex.o(.text.svcRtxMutexGetOwner) refers to rtx_evr.o(.text.EvrRtxMutexGetOwner) for EvrRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.osRtxMutexId) for osRtxMutexId
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.IsMutexPtrValid) for IsMutexPtrValid
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_evr.o(.text.EvrRtxMutexError) for EvrRtxMutexError
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.osRtxMutexOwnerUnlock) for osRtxMutexOwnerUnlock
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.osRtxMutexDestroy) for osRtxMutexDestroy
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass) refers to rtx_semaphore.o(.text.osRtxObject) for osRtxObject
    rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass) refers to rtx_semaphore.o(.text.osRtxSemaphoreDestroy) for osRtxSemaphoreDestroy
    rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphoreDeleteClass) refers to rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.osRtxObject) refers to rtx_semaphore.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osRtxSemaphoreDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.text.osRtxSemaphoreDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_semaphore.o(.text.osRtxSemaphoreDestroy) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_semaphore.o(.text.osRtxSemaphoreDestroy) refers to rtx_evr.o(.text.EvrRtxSemaphoreDestroyed) for EvrRtxSemaphoreDestroyed
    rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphoreDestroy) refers to rtx_semaphore.o(.text.osRtxSemaphoreDestroy) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_evr.o(.text.EvrRtxSemaphoreNew) for EvrRtxSemaphoreNew
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.IsException) for IsException
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.svcRtxSemaphoreNew) for svcRtxSemaphoreNew
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreNew) refers to rtx_semaphore.o(.text.osSemaphoreNew) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.IsException) refers to rtx_semaphore.o(.text.IsException) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_semaphore.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.IsException) for IsException
    rtx_semaphore.o(.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_semaphore.o(.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetName) for svcRtxSemaphoreGetName
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetName) refers to rtx_semaphore.o(.text.osSemaphoreGetName) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreGetName) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.svcRtxSemaphoreGetName) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.svcRtxSemaphoreGetName) refers to rtx_evr.o(.text.EvrRtxSemaphoreGetName) for EvrRtxSemaphoreGetName
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetName) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetName) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquire) for EvrRtxSemaphoreAcquire
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.IsException) for IsException
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) for isrRtxSemaphoreAcquire
    rtx_semaphore.o(.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) for svcRtxSemaphoreAcquire
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreAcquire) refers to rtx_semaphore.o(.text.osSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquired) for EvrRtxSemaphoreAcquired
    rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired) for EvrRtxSemaphoreNotAcquired
    rtx_semaphore.o(.ARM.exidx.text.isrRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.isrRtxSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreRelease) for EvrRtxSemaphoreRelease
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.IsException) for IsException
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.isrRtxSemaphoreRelease) for isrRtxSemaphoreRelease
    rtx_semaphore.o(.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.svcRtxSemaphoreRelease) for svcRtxSemaphoreRelease
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreRelease) refers to rtx_semaphore.o(.text.osSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for SemaphoreTokenIncrement
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.osRtxObject) for osRtxObject
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_semaphore.o(.text.isrRtxSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreReleased) for EvrRtxSemaphoreReleased
    rtx_semaphore.o(.ARM.exidx.text.isrRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.isrRtxSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.IsException) for IsException
    rtx_semaphore.o(.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_semaphore.o(.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) for svcRtxSemaphoreGetCount
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetCount) refers to rtx_semaphore.o(.text.osSemaphoreGetCount) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) refers to rtx_evr.o(.text.EvrRtxSemaphoreGetCount) for EvrRtxSemaphoreGetCount
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetCount) refers to rtx_semaphore.o(.text.svcRtxSemaphoreGetCount) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_evr.o(.text.EvrRtxSemaphoreDelete) for EvrRtxSemaphoreDelete
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.IsException) for IsException
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.svcRtxSemaphoreDelete) for svcRtxSemaphoreDelete
    rtx_semaphore.o(.ARM.exidx.text.osSemaphoreDelete) refers to rtx_semaphore.o(.text.osSemaphoreDelete) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.osRtxSemaphorePostProcess) for osRtxSemaphorePostProcess
    rtx_semaphore.o(.text.svcRtxSemaphoreNew) refers to rtx_evr.o(.text.EvrRtxSemaphoreCreated) for EvrRtxSemaphoreCreated
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreNew) refers to rtx_semaphore.o(.text.svcRtxSemaphoreNew) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_semaphore.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_semaphore.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.IsSemaphorePtrValid) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for [Anonymous Symbol]
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.osRtxObject) for osRtxObject
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.osRtxSemaphorePostProcess) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquired) for EvrRtxSemaphoreAcquired
    rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphorePostProcess) refers to rtx_semaphore.o(.text.osRtxSemaphorePostProcess) for [Anonymous Symbol]
    rtx_semaphore.o(.text.SemaphoreTokenDecrement) refers to rtx_semaphore.o(.text.atomic_dec16_nz) for atomic_dec16_nz
    rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenDecrement) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.atomic_dec16_nz) refers to rtx_semaphore.o(.text.atomic_dec16_nz) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphoreId) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.SemaphoreTokenDecrement) for SemaphoreTokenDecrement
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquired) for EvrRtxSemaphoreAcquired
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending) for EvrRtxSemaphoreAcquirePending
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.osRtxObject) for osRtxObject
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout) for EvrRtxSemaphoreAcquireTimeout
    rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) refers to rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired) for EvrRtxSemaphoreNotAcquired
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreAcquire) refers to rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) for [Anonymous Symbol]
    rtx_semaphore.o(.text.SemaphoreTokenIncrement) refers to rtx_semaphore.o(.text.atomic_inc16_lt) for atomic_inc16_lt
    rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenIncrement) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for [Anonymous Symbol]
    rtx_semaphore.o(.ARM.exidx.text.atomic_inc16_lt) refers to rtx_semaphore.o(.text.atomic_inc16_lt) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreReleased) for EvrRtxSemaphoreReleased
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.osRtxObject) for osRtxObject
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquired) for EvrRtxSemaphoreAcquired
    rtx_semaphore.o(.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.SemaphoreTokenIncrement) for SemaphoreTokenIncrement
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreRelease) refers to rtx_semaphore.o(.text.svcRtxSemaphoreRelease) for [Anonymous Symbol]
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.osRtxSemaphoreId) for osRtxSemaphoreId
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.IsSemaphorePtrValid) for IsSemaphorePtrValid
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_evr.o(.text.EvrRtxSemaphoreError) for EvrRtxSemaphoreError
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.osRtxObject) for osRtxObject
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_semaphore.o(.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.osRtxSemaphoreDestroy) for osRtxSemaphoreDestroy
    rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreDelete) refers to rtx_semaphore.o(.text.svcRtxSemaphoreDelete) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadWatchdogTick) for osRtxThreadWatchdogTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_evr.o(.text.EvrRtxThreadPreempted) for EvrRtxThreadPreempted
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxKernelGetState) refers to rtx_system.o(.text.osRtxKernelGetState) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.isr_queue_get) for isr_queue_get
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxThreadObject) for osRtxThreadObject
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxEventFlagsObject) for osRtxEventFlagsObject
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxSemaphoreObject) for osRtxSemaphoreObject
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxMemoryPoolObject) for osRtxMemoryPoolObject
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxMessageObject) for osRtxMessageObject
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.isr_queue_get) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.text.isr_queue_get) refers to rtx_system.o(.text.atomic_dec16_nz) for atomic_dec16_nz
    rtx_system.o(.text.isr_queue_get) refers to rtx_system.o(.text.atomic_inc16_lim) for atomic_inc16_lim
    rtx_system.o(.text.isr_queue_get) refers to rtx_system.o(.text.osRtxObject) for osRtxObject
    rtx_system.o(.ARM.exidx.text.isr_queue_get) refers to rtx_system.o(.text.isr_queue_get) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.osRtxThreadObject) refers to rtx_system.o(.text.osRtxThreadObject) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.osRtxEventFlagsObject) refers to rtx_system.o(.text.osRtxEventFlagsObject) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.osRtxSemaphoreObject) refers to rtx_system.o(.text.osRtxSemaphoreObject) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.osRtxMemoryPoolObject) refers to rtx_system.o(.text.osRtxMemoryPoolObject) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.osRtxMessageObject) refers to rtx_system.o(.text.osRtxMessageObject) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_system.o(.text.isr_queue_put) for isr_queue_put
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_system.o(.text.SetPendSV) for SetPendSV
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    rtx_system.o(.text.isr_queue_put) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.text.isr_queue_put) refers to rtx_system.o(.text.atomic_inc16_lt) for atomic_inc16_lt
    rtx_system.o(.text.isr_queue_put) refers to rtx_system.o(.text.atomic_inc16_lim) for atomic_inc16_lim
    rtx_system.o(.ARM.exidx.text.isr_queue_put) refers to rtx_system.o(.text.isr_queue_put) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.SetPendSV) refers to rtx_system.o(.text.SetPendSV) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.atomic_dec16_nz) refers to rtx_system.o(.text.atomic_dec16_nz) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.atomic_inc16_lim) refers to rtx_system.o(.text.atomic_inc16_lim) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.osRtxObject) refers to rtx_system.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_system.o(.ARM.exidx.text.atomic_inc16_lt) refers to rtx_system.o(.text.atomic_inc16_lt) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadObject) for osRtxThreadObject
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadObject) refers to rtx_thread.o(.text.osRtxThreadObject) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadObject) for osRtxThreadObject
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxObject) for osRtxObject
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxObject) refers to rtx_thread.o(.text.osRtxObject) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxDelayCompleted) for EvrRtxDelayCompleted
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout) for EvrRtxThreadFlagsWaitTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRoot) for osRtxThreadListRoot
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout) for EvrRtxEventFlagsWaitTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxObject) for osRtxObject
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxMutexObject) for osRtxMutexObject
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for osRtxMutexOwnerRestore
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxMutexAcquireTimeout) for EvrRtxMutexAcquireTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout) for EvrRtxSemaphoreAcquireTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout) for EvrRtxMemoryPoolAllocTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout) for EvrRtxMessageQueueGetTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout) for EvrRtxMessageQueuePutTimeout
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_evr.o(.text.EvrRtxThreadUnblocked) for EvrRtxThreadUnblocked
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRoot) refers to rtx_thread.o(.text.osRtxThreadListRoot) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxMutexObject) refers to rtx_thread.o(.text.osRtxMutexObject) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.StackOffsetR0) for StackOffsetR0
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.StackOffsetR0) refers to rtx_thread.o(.text.StackOffsetR0) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.SetPrivileged) for SetPrivileged
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_evr.o(.text.EvrRtxThreadSwitched) for EvrRtxThreadSwitched
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.SetPrivileged) refers to rtx_thread.o(.text.SetPrivileged) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxKernelGetState) refers to rtx_thread.o(.text.osRtxKernelGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadObject) for osRtxThreadObject
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_evr.o(.text.EvrRtxThreadPreempted) for EvrRtxThreadPreempted
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_evr.o(.text.EvrRtxThreadUnblocked) for EvrRtxThreadUnblocked
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_evr.o(.text.EvrRtxThreadBlocked) for EvrRtxThreadBlocked
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWatchdogRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWatchdogRemove) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_thread.o(.text.osRtxThreadSetRunning) for osRtxThreadSetRunning
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for osRtxThreadWatchdogRemove
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_evr.o(.text.EvrRtxThreadWatchdogExpired) for EvrRtxThreadWatchdogExpired
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_thread.o(.data.os) for WatchdogAlarmFlag
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_lib.o(.text.osWatchdogAlarm_Handler) for osWatchdogAlarm_Handler
    rtx_thread.o(.text.osRtxThreadWatchdogTick) refers to rtx_thread.o(.text.osRtxThreadWatchdogInsert) for osRtxThreadWatchdogInsert
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWatchdogTick) refers to rtx_thread.o(.text.osRtxThreadWatchdogTick) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSetRunning) refers to rtx_thread.o(.text.osRtxThreadSetRunning) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWatchdogInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWatchdogInsert) refers to rtx_thread.o(.text.osRtxThreadWatchdogInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.osRtxThreadJoinWakeup) refers to rtx_evr.o(.text.EvrRtxThreadJoined) for EvrRtxThreadJoined
    rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_evr.o(.text.EvrRtxThreadDestroyed) for EvrRtxThreadDestroyed
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadDestroy) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadBeforeFree) for osRtxThreadBeforeFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBeforeFree) refers to rtx_thread.o(.text.osRtxThreadBeforeFree) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(.text.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadId) refers to rtx_thread.o(.text.osRtxThreadId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.IsClassMappingValid) for IsClassMappingValid
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.data.os) for ThreadClassTable
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadEntry) for osThreadEntry
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.xPSR_InitVal) for xPSR_InitVal
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_evr.o(.text.EvrRtxThreadCreated) for EvrRtxThreadCreated
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_evr.o(.text.EvrRtxThreadNew) for EvrRtxThreadNew
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadNew) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsException) refers to rtx_thread.o(.text.IsException) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_thread.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetName) refers to rtx_evr.o(.text.EvrRtxThreadGetName) for EvrRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetClass) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetClass) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetClass) refers to rtx_thread.o(.text.svcRtxThreadGetClass) for svcRtxThreadGetClass
    rtx_thread.o(.ARM.exidx.text.osThreadGetClass) refers to rtx_thread.o(.text.osThreadGetClass) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetClass) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetClass) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetClass) refers to rtx_evr.o(.text.EvrRtxThreadGetClass) for EvrRtxThreadGetClass
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetClass) refers to rtx_thread.o(.text.svcRtxThreadGetClass) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetZone) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetZone) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetZone) refers to rtx_thread.o(.text.svcRtxThreadGetZone) for svcRtxThreadGetZone
    rtx_thread.o(.ARM.exidx.text.osThreadGetZone) refers to rtx_thread.o(.text.osThreadGetZone) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetZone) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetZone) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetZone) refers to rtx_evr.o(.text.EvrRtxThreadGetZone) for EvrRtxThreadGetZone
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetZone) refers to rtx_thread.o(.text.svcRtxThreadGetZone) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_evr.o(.text.EvrRtxThreadGetId) for EvrRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetState) refers to rtx_evr.o(.text.EvrRtxThreadGetState) for EvrRtxThreadGetState
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_evr.o(.text.EvrRtxThreadGetStackSize) for EvrRtxThreadGetStackSize
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_evr.o(.text.EvrRtxThreadGetStackSpace) for EvrRtxThreadGetStackSpace
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_evr.o(.text.EvrRtxThreadSetPriority) for EvrRtxThreadSetPriority
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_evr.o(.text.EvrRtxThreadGetPriority) for EvrRtxThreadGetPriority
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_evr.o(.text.EvrRtxThreadYield) for EvrRtxThreadYield
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadYield) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_evr.o(.text.EvrRtxThreadSuspend) for EvrRtxThreadSuspend
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_evr.o(.text.EvrRtxThreadResume) for EvrRtxThreadResume
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadResume) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_evr.o(.text.EvrRtxThreadDetach) for EvrRtxThreadDetach
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadDetach) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_evr.o(.text.EvrRtxThreadJoin) for EvrRtxThreadJoin
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadJoin) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_evr.o(.text.EvrRtxThreadExit) for EvrRtxThreadExit
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.text.osThreadExit) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_evr.o(.text.EvrRtxThreadTerminate) for EvrRtxThreadTerminate
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFeedWatchdog) refers to rtx_evr.o(.text.EvrRtxThreadFeedWatchdog) for EvrRtxThreadFeedWatchdog
    rtx_thread.o(.text.osThreadFeedWatchdog) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadFeedWatchdog) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadFeedWatchdog) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadFeedWatchdog) refers to rtx_thread.o(.text.svcRtxThreadFeedWatchdog) for svcRtxThreadFeedWatchdog
    rtx_thread.o(.ARM.exidx.text.osThreadFeedWatchdog) refers to rtx_thread.o(.text.osThreadFeedWatchdog) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadProtectPrivileged) refers to rtx_evr.o(.text.EvrRtxThreadProtectPrivileged) for EvrRtxThreadProtectPrivileged
    rtx_thread.o(.text.osThreadProtectPrivileged) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadProtectPrivileged) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadProtectPrivileged) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadProtectPrivileged) refers to rtx_thread.o(.text.svcRtxThreadProtectPrivileged) for svcRtxThreadProtectPrivileged
    rtx_thread.o(.ARM.exidx.text.osThreadProtectPrivileged) refers to rtx_thread.o(.text.osThreadProtectPrivileged) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_evr.o(.text.EvrRtxThreadSuspendClass) for EvrRtxThreadSuspendClass
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_thread.o(.text.IsTickIrq) for IsTickIrq
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_thread.o(.text.svcRtxThreadSuspendClass) for svcRtxThreadSuspendClass
    rtx_thread.o(.text.osThreadSuspendClass) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.ARM.exidx.text.osThreadSuspendClass) refers to rtx_thread.o(.text.osThreadSuspendClass) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsTickIrq) refers to rtx_thread.o(.text.IsTickIrq) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.IsSVCallIrq) for IsSVCallIrq
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_evr.o(.text.EvrRtxThreadSuspended) for EvrRtxThreadSuspended
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_thread.o(.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspendClass) refers to rtx_thread.o(.text.svcRtxThreadSuspendClass) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_evr.o(.text.EvrRtxThreadResumeClass) for EvrRtxThreadResumeClass
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_thread.o(.text.IsTickIrq) for IsTickIrq
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_thread.o(.text.svcRtxThreadResumeClass) for svcRtxThreadResumeClass
    rtx_thread.o(.text.osThreadResumeClass) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.ARM.exidx.text.osThreadResumeClass) refers to rtx_thread.o(.text.osThreadResumeClass) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.IsSVCallIrq) for IsSVCallIrq
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_evr.o(.text.EvrRtxThreadResumed) for EvrRtxThreadResumed
    rtx_thread.o(.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResumeClass) refers to rtx_thread.o(.text.svcRtxThreadResumeClass) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_evr.o(.text.EvrRtxThreadTerminateZone) for EvrRtxThreadTerminateZone
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.IsFault) for IsFault
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.IsSVCallIrq) for IsSVCallIrq
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.IsPendSvIrq) for IsPendSvIrq
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.IsTickIrq) for IsTickIrq
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.svcRtxThreadTerminateZone) for svcRtxThreadTerminateZone
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.osThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.ARM.exidx.text.osThreadTerminateZone) refers to rtx_thread.o(.text.osThreadTerminateZone) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsFault) refers to rtx_thread.o(.text.IsFault) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsSVCallIrq) refers to rtx_thread.o(.text.IsSVCallIrq) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsPendSvIrq) refers to rtx_thread.o(.text.IsPendSvIrq) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.data.os) for WatchdogAlarmFlag
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for osRtxThreadWatchdogRemove
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.osRtxThreadSetRunning) for osRtxThreadSetRunning
    rtx_thread.o(.text.svcRtxThreadTerminateZone) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminateZone) refers to rtx_thread.o(.text.svcRtxThreadTerminateZone) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_evr.o(.text.EvrRtxThreadGetCount) for EvrRtxThreadGetCount
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_evr.o(.text.EvrRtxThreadEnumerate) for EvrRtxThreadEnumerate
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsSet) for EvrRtxThreadFlagsSet
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.isrRtxThreadFlagsSet) for isrRtxThreadFlagsSet
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for EvrRtxThreadFlagsError
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsSet) for ThreadFlagsSet
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxObject) for osRtxObject
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.isrRtxThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsSetDone) for EvrRtxThreadFlagsSetDone
    rtx_thread.o(.ARM.exidx.text.isrRtxThreadFlagsSet) refers to rtx_thread.o(.text.isrRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_evr.o(.text.EvrRtxThreadFlagsClear) for EvrRtxThreadFlagsClear
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for EvrRtxThreadFlagsError
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsGet) for EvrRtxThreadFlagsGet
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWait) for EvrRtxThreadFlagsWait
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.IsException) for IsException
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for EvrRtxThreadFlagsError
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.IsThreadPtrValid) refers to rtx_thread.o(.text.IsThreadPtrValid) for [Anonymous Symbol]
    rtx_thread.o(.text.IsClassMappingValid) refers to rtx_thread.o(.data.os) for ThreadClassTable
    rtx_thread.o(.ARM.exidx.text.IsClassMappingValid) refers to rtx_thread.o(.text.IsClassMappingValid) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEntry) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadEntry) refers to rtx_thread.o(.text.osThreadEntry) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.xPSR_InitVal) refers to rtx_thread.o(.text.xPSR_InitVal) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted) for EvrRtxThreadFlagsWaitCompleted
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.atomic_chk32_all) for atomic_chk32_all
    rtx_thread.o(.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.atomic_chk32_any) for atomic_chk32_any
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.atomic_chk32_all) refers to rtx_thread.o(.text.atomic_chk32_all) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.atomic_chk32_any) refers to rtx_thread.o(.text.atomic_chk32_any) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_evr.o(.text.EvrRtxThreadGetState) for EvrRtxThreadGetState
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.osRtxThreadState) for osRtxThreadState
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadState) refers to rtx_thread.o(.text.osRtxThreadState) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetStackSize) refers to rtx_evr.o(.text.EvrRtxThreadGetStackSize) for EvrRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_evr.o(.text.EvrRtxThreadGetStackSpace) for EvrRtxThreadGetStackSpace
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_evr.o(.text.EvrRtxThreadPriorityUpdated) for EvrRtxThreadPriorityUpdated
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_evr.o(.text.EvrRtxThreadGetPriority) for EvrRtxThreadGetPriority
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.osRtxThreadPriority) for osRtxThreadPriority
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPriority) refers to rtx_thread.o(.text.osRtxThreadPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_evr.o(.text.EvrRtxThreadPreempted) for EvrRtxThreadPreempted
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_evr.o(.text.EvrRtxThreadSuspended) for EvrRtxThreadSuspended
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_evr.o(.text.EvrRtxThreadResumed) for EvrRtxThreadResumed
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_evr.o(.text.EvrRtxThreadDetached) for EvrRtxThreadDetached
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_evr.o(.text.EvrRtxThreadJoined) for EvrRtxThreadJoined
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_evr.o(.text.EvrRtxThreadJoinPending) for EvrRtxThreadJoinPending
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for osRtxThreadWatchdogRemove
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadSetRunning) for osRtxThreadSetRunning
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for osRtxThreadWatchdogRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadStackCheck) for osRtxThreadStackCheck
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadSetRunning) for osRtxThreadSetRunning
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFeedWatchdog) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadFeedWatchdog) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadFeedWatchdog) refers to rtx_thread.o(.text.osRtxThreadWatchdogRemove) for osRtxThreadWatchdogRemove
    rtx_thread.o(.text.svcRtxThreadFeedWatchdog) refers to rtx_thread.o(.text.osRtxThreadWatchdogInsert) for osRtxThreadWatchdogInsert
    rtx_thread.o(.text.svcRtxThreadFeedWatchdog) refers to rtx_evr.o(.text.EvrRtxThreadFeedWatchdogDone) for EvrRtxThreadFeedWatchdogDone
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFeedWatchdog) refers to rtx_thread.o(.text.svcRtxThreadFeedWatchdog) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadProtectPrivileged) refers to rtx_thread.o(.text.osRtxKernelGetState) for osRtxKernelGetState
    rtx_thread.o(.text.svcRtxThreadProtectPrivileged) refers to rtx_evr.o(.text.EvrRtxThreadError) for EvrRtxThreadError
    rtx_thread.o(.text.svcRtxThreadProtectPrivileged) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadProtectPrivileged) refers to rtx_evr.o(.text.EvrRtxThreadPrivilegedProtected) for EvrRtxThreadPrivilegedProtected
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadProtectPrivileged) refers to rtx_thread.o(.text.svcRtxThreadProtectPrivileged) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_evr.o(.text.EvrRtxThreadGetCount) for EvrRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_evr.o(.text.EvrRtxThreadEnumerate) for EvrRtxThreadEnumerate
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.ThreadFlagsSet) refers to rtx_thread.o(.text.atomic_set32) for atomic_set32
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.atomic_set32) refers to rtx_thread.o(.text.atomic_set32) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadId) for osRtxThreadId
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.IsThreadPtrValid) for IsThreadPtrValid
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for EvrRtxThreadFlagsError
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsSet) for ThreadFlagsSet
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted) for EvrRtxThreadFlagsWaitCompleted
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsSetDone) for EvrRtxThreadFlagsSetDone
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for EvrRtxThreadFlagsError
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.ThreadFlagsClear) for ThreadFlagsClear
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_evr.o(.text.EvrRtxThreadFlagsClearDone) for EvrRtxThreadFlagsClearDone
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.ThreadFlagsClear) refers to rtx_thread.o(.text.atomic_clr32) for atomic_clr32
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsClear) refers to rtx_thread.o(.text.ThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.atomic_clr32) refers to rtx_thread.o(.text.atomic_clr32) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_evr.o(.text.EvrRtxThreadFlagsGet) for EvrRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsError) for EvrRtxThreadFlagsError
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted) for EvrRtxThreadFlagsWaitCompleted
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitPending) for EvrRtxThreadFlagsWaitPending
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout) for EvrRtxThreadFlagsWaitTimeout
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_evr.o(.text.EvrRtxThreadFlagsWaitNotCompleted) for EvrRtxThreadFlagsWaitNotCompleted
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for osRtxMessageQueueTimerSetup
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerSetup) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerUnlink) for TimerUnlink
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxThreadSetRunning) for osRtxThreadSetRunning
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_evr.o(.text.EvrRtxTimerCallback) for EvrRtxTimerCallback
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerDeleteClass) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.osRtxTimerDeleteClass) refers to rtx_timer.o(.text.osRtxTimerDestroy) for osRtxTimerDestroy
    rtx_timer.o(.ARM.exidx.text.osRtxTimerDeleteClass) refers to rtx_timer.o(.text.osRtxTimerDeleteClass) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerDestroy) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.osRtxTimerDestroy) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.osRtxTimerDestroy) refers to rtx_evr.o(.text.EvrRtxTimerDestroyed) for EvrRtxTimerDestroyed
    rtx_timer.o(.ARM.exidx.text.osRtxTimerDestroy) refers to rtx_timer.o(.text.osRtxTimerDestroy) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_evr.o(.text.EvrRtxTimerNew) for EvrRtxTimerNew
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.IsException) for IsException
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_timer.o(.text.osTimerNew) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.IsException) refers to rtx_timer.o(.text.IsException) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.IsIrqMasked) refers to rtx_timer.o(.text.IsIrqMasked) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.IsException) for IsException
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.osRtxTimerId) for osRtxTimerId
    rtx_timer.o(.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.IsTimerPtrValid) for IsTimerPtrValid
    rtx_timer.o(.text.svcRtxTimerGetName) refers to rtx_evr.o(.text.EvrRtxTimerGetName) for EvrRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_evr.o(.text.EvrRtxTimerStart) for EvrRtxTimerStart
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.IsException) for IsException
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_timer.o(.text.osTimerStart) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_evr.o(.text.EvrRtxTimerStop) for EvrRtxTimerStop
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.IsException) for IsException
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_timer.o(.text.osTimerStop) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.IsException) for IsException
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_evr.o(.text.EvrRtxTimerIsRunning) for EvrRtxTimerIsRunning
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_evr.o(.text.EvrRtxTimerDelete) for EvrRtxTimerDelete
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.IsException) for IsException
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.IsIrqMasked) for IsIrqMasked
    rtx_timer.o(.text.osTimerDelete) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxThreadGetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxThreadGetRunning) refers to rtx_timer.o(.text.osRtxThreadGetRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerUnlink) refers to rtx_timer.o(.text.TimerUnlink) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxThreadSetRunning) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxThreadSetRunning) refers to rtx_timer.o(.text.osRtxThreadSetRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_timer.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_timer.o(.text.IsTimerPtrValid) for IsTimerPtrValid
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_evr.o(.text.EvrRtxTimerCreated) for EvrRtxTimerCreated
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.IsTimerPtrValid) refers to rtx_timer.o(.text.IsTimerPtrValid) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.osRtxTimerId) refers to rtx_timer.o(.text.osRtxTimerId) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.osRtxTimerId) for osRtxTimerId
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.IsTimerPtrValid) for IsTimerPtrValid
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_evr.o(.text.EvrRtxTimerStarted) for EvrRtxTimerStarted
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.osRtxTimerId) for osRtxTimerId
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.IsTimerPtrValid) for IsTimerPtrValid
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_evr.o(.text.EvrRtxTimerStopped) for EvrRtxTimerStopped
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.osRtxTimerId) for osRtxTimerId
    rtx_timer.o(.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.IsTimerPtrValid) for IsTimerPtrValid
    rtx_timer.o(.text.svcRtxTimerIsRunning) refers to rtx_evr.o(.text.EvrRtxTimerIsRunning) for EvrRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.osRtxTimerId) for osRtxTimerId
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.IsTimerPtrValid) for IsTimerPtrValid
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_evr.o(.text.EvrRtxTimerError) for EvrRtxTimerError
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.osRtxThreadGetRunning) for osRtxThreadGetRunning
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.osRtxTimerDestroy) for osRtxTimerDestroy
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.os) for PendST
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.os) for PendST
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.os) for PendST
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxIdleThread) refers to rtx_config.o(.text.osRtxIdleThread) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_Init) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping) for HAL_NVIC_SetPriorityGrouping
    stm32f7xx_hal.o(.text.HAL_Init) refers to main.o(.text.HAL_InitTick) for HAL_InitTick
    stm32f7xx_hal.o(.text.HAL_Init) refers to stm32f7xx_hal.o(.text.HAL_MspInit) for HAL_MspInit
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_Init) refers to stm32f7xx_hal.o(.text.HAL_Init) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_InitTick) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    stm32f7xx_hal.o(.text.HAL_InitTick) refers to stm32f7xx_hal.o(.data.uwTickFreq) for uwTickFreq
    stm32f7xx_hal.o(.text.HAL_InitTick) refers to stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Config) for HAL_SYSTICK_Config
    stm32f7xx_hal.o(.text.HAL_InitTick) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority) for HAL_NVIC_SetPriority
    stm32f7xx_hal.o(.text.HAL_InitTick) refers to stm32f7xx_hal.o(.data.uwTickPrio) for uwTickPrio
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_InitTick) refers to stm32f7xx_hal.o(.text.HAL_InitTick) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_MspInit) refers to stm32f7xx_hal.o(.text.HAL_MspInit) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_DeInit) refers to stm32f7xx_hal.o(.text.HAL_MspDeInit) for HAL_MspDeInit
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DeInit) refers to stm32f7xx_hal.o(.text.HAL_DeInit) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_MspDeInit) refers to stm32f7xx_hal.o(.text.HAL_MspDeInit) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_IncTick) refers to stm32f7xx_hal.o(.data.uwTickFreq) for uwTickFreq
    stm32f7xx_hal.o(.text.HAL_IncTick) refers to stm32f7xx_hal.o(.bss.uwTick) for uwTick
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_IncTick) refers to stm32f7xx_hal.o(.text.HAL_IncTick) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_GetTick) refers to stm32f7xx_hal.o(.bss.uwTick) for uwTick
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetTick) refers to stm32f7xx_hal.o(.text.HAL_GetTick) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_GetTickPrio) refers to stm32f7xx_hal.o(.data.uwTickPrio) for uwTickPrio
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetTickPrio) refers to stm32f7xx_hal.o(.text.HAL_GetTickPrio) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_SetTickFreq) refers to stm32f7xx_hal.o(.data.uwTickFreq) for uwTickFreq
    stm32f7xx_hal.o(.text.HAL_SetTickFreq) refers to stm32f7xx_hal.o(.data.uwTickPrio) for uwTickPrio
    stm32f7xx_hal.o(.text.HAL_SetTickFreq) refers to main.o(.text.HAL_InitTick) for HAL_InitTick
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_SetTickFreq) refers to stm32f7xx_hal.o(.text.HAL_SetTickFreq) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_GetTickFreq) refers to stm32f7xx_hal.o(.data.uwTickFreq) for uwTickFreq
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetTickFreq) refers to stm32f7xx_hal.o(.text.HAL_GetTickFreq) for [Anonymous Symbol]
    stm32f7xx_hal.o(.text.HAL_Delay) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal.o(.text.HAL_Delay) refers to stm32f7xx_hal.o(.data.uwTickFreq) for uwTickFreq
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_Delay) refers to stm32f7xx_hal.o(.text.HAL_Delay) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_SuspendTick) refers to stm32f7xx_hal.o(.text.HAL_SuspendTick) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_ResumeTick) refers to stm32f7xx_hal.o(.text.HAL_ResumeTick) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetHalVersion) refers to stm32f7xx_hal.o(.text.HAL_GetHalVersion) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetREVID) refers to stm32f7xx_hal.o(.text.HAL_GetREVID) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetDEVID) refers to stm32f7xx_hal.o(.text.HAL_GetDEVID) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetUIDw0) refers to stm32f7xx_hal.o(.text.HAL_GetUIDw0) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetUIDw1) refers to stm32f7xx_hal.o(.text.HAL_GetUIDw1) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetUIDw2) refers to stm32f7xx_hal.o(.text.HAL_GetUIDw2) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_EnableDBGSleepMode) refers to stm32f7xx_hal.o(.text.HAL_DBGMCU_EnableDBGSleepMode) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_DisableDBGSleepMode) refers to stm32f7xx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_EnableDBGStopMode) refers to stm32f7xx_hal.o(.text.HAL_DBGMCU_EnableDBGStopMode) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_DisableDBGStopMode) refers to stm32f7xx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_EnableDBGStandbyMode) refers to stm32f7xx_hal.o(.text.HAL_DBGMCU_EnableDBGStandbyMode) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_DisableDBGStandbyMode) refers to stm32f7xx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_EnableCompensationCell) refers to stm32f7xx_hal.o(.text.HAL_EnableCompensationCell) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DisableCompensationCell) refers to stm32f7xx_hal.o(.text.HAL_DisableCompensationCell) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_EnableFMCMemorySwapping) refers to stm32f7xx_hal.o(.text.HAL_EnableFMCMemorySwapping) for [Anonymous Symbol]
    stm32f7xx_hal.o(.ARM.exidx.text.HAL_DisableFMCMemorySwapping) refers to stm32f7xx_hal.o(.text.HAL_DisableFMCMemorySwapping) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping) for __NVIC_SetPriorityGrouping
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SetPriorityGrouping) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SetPriorityGrouping) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping) for __NVIC_GetPriorityGrouping
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority) refers to stm32f7xx_hal_cortex.o(.text.NVIC_EncodePriority) for NVIC_EncodePriority
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriority) for __NVIC_SetPriority
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SetPriority) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetPriorityGrouping) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SetPriority) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriority) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.NVIC_EncodePriority) refers to stm32f7xx_hal_cortex.o(.text.NVIC_EncodePriority) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_EnableIRQ) for __NVIC_EnableIRQ
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_EnableIRQ) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_EnableIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_EnableIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_DisableIRQ) for __NVIC_DisableIRQ
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_DisableIRQ) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_DisableIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_DisableIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SystemReset) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SystemReset) for __NVIC_SystemReset
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SystemReset) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SystemReset) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SystemReset) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SystemReset) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Config) refers to stm32f7xx_hal_cortex.o(.text.SysTick_Config) for SysTick_Config
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_Config) refers to stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Config) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.SysTick_Config) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriority) for __NVIC_SetPriority
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.SysTick_Config) refers to stm32f7xx_hal_cortex.o(.text.SysTick_Config) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_MPU_Disable) refers to stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_MPU_Enable) refers to stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_MPU_ConfigRegion) refers to stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriorityGrouping) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping) for __NVIC_GetPriorityGrouping
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetPriorityGrouping) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriorityGrouping) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriority) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriority) for __NVIC_GetPriority
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriority) refers to stm32f7xx_hal_cortex.o(.text.NVIC_DecodePriority) for NVIC_DecodePriority
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetPriority) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriority) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.NVIC_DecodePriority) refers to stm32f7xx_hal_cortex.o(.text.NVIC_DecodePriority) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetPriority) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriority) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPendingIRQ) for __NVIC_SetPendingIRQ
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SetPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPendingIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SetPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_SetPendingIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPendingIRQ) for __NVIC_GetPendingIRQ
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPendingIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetPendingIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_ClearPendingIRQ) for __NVIC_ClearPendingIRQ
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_ClearPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_ClearPendingIRQ) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_ClearPendingIRQ) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetActive) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetActive) for __NVIC_GetActive
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetActive) refers to stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetActive) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetActive) refers to stm32f7xx_hal_cortex.o(.text.__NVIC_GetActive) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_CLKSourceConfig) refers to stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler) refers to stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Callback) for HAL_SYSTICK_Callback
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_IRQHandler) refers to stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler) for [Anonymous Symbol]
    stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_Callback) refers to stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Callback) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_Init) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_DeInit) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_DeInit) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_ReadPin) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_ReadPin) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_WritePin) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_TogglePin) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_LockPin) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_LockPin) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback) for HAL_GPIO_EXTI_Callback
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_EXTI_IRQHandler) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler) for [Anonymous Symbol]
    stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_EXTI_Callback) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DeInit) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_DeInit) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableBkUpAccess) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableBkUpAccess) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableBkUpAccess) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_ConfigPVD) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_ConfigPVD) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnablePVD) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnablePVD) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisablePVD) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisablePVD) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableWakeUpPin) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableWakeUpPin) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableWakeUpPin) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableWakeUpPin) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnterSLEEPMode) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnterSTOPMode) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnterSTANDBYMode) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnterSTANDBYMode) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.text.HAL_PWR_PVD_IRQHandler) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_PVDCallback) for HAL_PWR_PVDCallback
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_PVD_IRQHandler) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_PVD_IRQHandler) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_PVDCallback) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_PVDCallback) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableSleepOnExit) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableSleepOnExit) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableSleepOnExit) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableSleepOnExit) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableSEVOnPend) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableSEVOnPend) for [Anonymous Symbol]
    stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableSEVOnPend) refers to stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableSEVOnPend) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableBkUpReg) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableBkUpReg) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableBkUpReg) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableBkUpReg) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableBkUpReg) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableBkUpReg) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableFlashPowerDown) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableFlashPowerDown) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableFlashPowerDown) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableFlashPowerDown) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableMainRegulatorLowVoltage) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableMainRegulatorLowVoltage) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableMainRegulatorLowVoltage) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableMainRegulatorLowVoltage) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableLowRegulatorLowVoltage) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableLowRegulatorLowVoltage) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableLowRegulatorLowVoltage) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableLowRegulatorLowVoltage) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableOverDrive) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableOverDrive) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableOverDrive) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableOverDrive) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnterUnderDriveSTOPMode) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnterUnderDriveSTOPMode) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnterUnderDriveSTOPMode) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_GetVoltageRange) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange) for [Anonymous Symbol]
    stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_ControlVoltageScaling) refers to stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_DeInit) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_DeInit) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_DeInit) refers to stm32f7xx_hal.o(.data.uwTickPrio) for uwTickPrio
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_DeInit) refers to main.o(.text.HAL_InitTick) for HAL_InitTick
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_DeInit) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_DeInit) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_OscConfig) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq) for HAL_RCC_GetSysClockFreq
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) refers to system_stm32f7xx.o(.rodata.AHBPrescTable) for AHBPrescTable
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) refers to stm32f7xx_hal.o(.data.uwTickPrio) for uwTickPrio
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) refers to main.o(.text.HAL_InitTick) for HAL_InitTick
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_ClockConfig) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq) refers to lludivv7m.o(.text) for __aeabi_uldivmod
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetSysClockFreq) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_MCOConfig) refers to stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init) for HAL_GPIO_Init
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_MCOConfig) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_MCOConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_EnableCSS) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_EnableCSS) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_DisableCSS) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_DisableCSS) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetHCLKFreq) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq) for HAL_RCC_GetHCLKFreq
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) refers to system_stm32f7xx.o(.rodata.APBPrescTable) for APBPrescTable
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetPCLK1Freq) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq) for HAL_RCC_GetHCLKFreq
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq) refers to system_stm32f7xx.o(.rodata.APBPrescTable) for APBPrescTable
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetPCLK2Freq) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetOscConfig) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetOscConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetClockConfig) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.text.HAL_RCC_NMI_IRQHandler) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_CSSCallback) for HAL_RCC_CSSCallback
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_NMI_IRQHandler) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_NMI_IRQHandler) for [Anonymous Symbol]
    stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_CSSCallback) refers to stm32f7xx_hal_rcc.o(.text.HAL_RCC_CSSCallback) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_PeriphCLKConfig) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_GetPeriphCLKConfig) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKConfig) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_GetPeriphCLKFreq) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnablePLLI2S) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_EnablePLLI2S) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnablePLLI2S) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_DisablePLLI2S) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_DisablePLLI2S) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_DisablePLLI2S) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnablePLLSAI) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_EnablePLLSAI) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnablePLLSAI) for [Anonymous Symbol]
    stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_DisablePLLSAI) refers to main.o(.text.HAL_GetTick) for HAL_GetTick
    stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_DisablePLLSAI) refers to stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_DisablePLLSAI) for [Anonymous Symbol]
    startup_stm32f746xx.o(STACK) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f746xx.o(HEAP) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f746xx.o(RESET) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f746xx.o(RESET) refers to startup_stm32f746xx.o(STACK) for __initial_sp
    startup_stm32f746xx.o(RESET) refers to startup_stm32f746xx.o(.text) for Reset_Handler
    startup_stm32f746xx.o(RESET) refers to irq_armv7m.o(.text) for SVC_Handler
    startup_stm32f746xx.o(.text) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_stm32f746xx.o(.text) refers to system_stm32f7xx.o(.text.SystemInit) for SystemInit
    startup_stm32f746xx.o(.text) refers to __main.o(!!!main) for __main
    startup_stm32f746xx.o(.text) refers to startup_stm32f746xx.o(HEAP) for Heap_Mem
    startup_stm32f746xx.o(.text) refers to startup_stm32f746xx.o(STACK) for Stack_Mem
    system_stm32f7xx.o(.ARM.exidx.text.SystemInit) refers to system_stm32f7xx.o(.text.SystemInit) for [Anonymous Symbol]
    system_stm32f7xx.o(.text.SystemCoreClockUpdate) refers to system_stm32f7xx.o(.data.SystemCoreClock) for SystemCoreClock
    system_stm32f7xx.o(.text.SystemCoreClockUpdate) refers to system_stm32f7xx.o(.rodata.AHBPrescTable) for AHBPrescTable
    system_stm32f7xx.o(.ARM.exidx.text.SystemCoreClockUpdate) refers to system_stm32f7xx.o(.text.SystemCoreClockUpdate) for [Anonymous Symbol]
    rt_memcpy_v6.o(.text) refers to rt_memcpy_w.o(.text) for __aeabi_memcpy4
    rt_memclr.o(.text) refers to rt_memclr_w.o(.text) for _memset_w
    __main.o(!!!main) refers to __rtentry.o(.ARM.Collect$$rtentry$$00000000) for __rt_entry
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for __rt_entry_li
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for __rt_entry_main
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000C) for __rt_entry_postli_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for __rt_entry_postsh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000002) for __rt_entry_presh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for __rt_entry_sh
    aeabi_ldiv0_sigfpe.o(.text) refers to rt_div0.o(.text) for __rt_div0
    __rtentry2.o(.ARM.Collect$$rtentry$$00000008) refers to rtx_lib.o(.text._platform_post_stackheap_init) for _platform_post_stackheap_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) refers to libinit.o(.ARM.Collect$$libinit$$00000000) for __rt_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) refers to boardinit3.o(.text) for _platform_post_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to main.o(.text.main) for main
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to exit.o(.text) for exit
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000001) for .ARM.Collect$$rtentry$$00000001
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for .ARM.Collect$$rtentry$$00000008
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for .ARM.Collect$$rtentry$$0000000A
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) for .ARM.Collect$$rtentry$$0000000B
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for .ARM.Collect$$rtentry$$0000000D
    __rtentry4.o(.ARM.Collect$$rtentry$$00000004) refers to sys_stackheap_outer.o(.text) for __user_setup_stackheap
    __rtentry4.o(.ARM.exidx) refers to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for .ARM.Collect$$rtentry$$00000004
    rt_div0.o(.text) refers to defsig_fpe_outer.o(.text) for __rt_SIGFPE
    sys_stackheap_outer.o(.text) refers to libspace.o(.text) for __user_perproc_libspace
    sys_stackheap_outer.o(.text) refers to startup_stm32f746xx.o(.text) for __user_initial_stackheap
    exit.o(.text) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for __rt_exit
    defsig_fpe_outer.o(.text) refers to defsig_fpe_inner.o(.text) for __rt_SIGFPE_inner
    defsig_fpe_outer.o(.text) refers to defsig_exit.o(.text) for __sig_exit
    defsig_fpe_formal.o(.text) refers to rt_raise.o(.text) for __rt_raise
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000030) for __rt_lib_init_alloca_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000002E) for __rt_lib_init_argv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001D) for __rt_lib_init_atexit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000023) for __rt_lib_init_clock_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000034) for __rt_lib_init_cpp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000032) for __rt_lib_init_exceptions_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000001) for __rt_lib_init_fp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000021) for __rt_lib_init_fp_trap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000025) for __rt_lib_init_getenv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000C) for __rt_lib_init_heap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000013) for __rt_lib_init_lc_collate_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000015) for __rt_lib_init_lc_ctype_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000017) for __rt_lib_init_lc_monetary_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000019) for __rt_lib_init_lc_numeric_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001B) for __rt_lib_init_lc_time_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000006) for __rt_lib_init_preinit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000010) for __rt_lib_init_rand_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000004) for __rt_lib_init_relocate_pie_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000035) for __rt_lib_init_return
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001F) for __rt_lib_init_signal_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000027) for __rt_lib_init_stdio_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000E) for __rt_lib_init_user_alloc_1
    libspace.o(.text) refers to libspace.o(.bss) for __libspace_start
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for .ARM.Collect$$rtexit$$00000000
    rt_raise.o(.text) refers to __raise.o(.text) for __raise
    rt_raise.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_exit.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_fpe_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    libinit2.o(.ARM.Collect$$libinit$$00000001) refers to fpinit.o(x$fpl$fpinit) for _fp_init
    libinit2.o(.ARM.Collect$$libinit$$00000012) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000014) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000016) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000018) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$0000001A) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000028) refers to argv_veneer.o(.emb_text) for __ARM_argv_veneer
    libinit2.o(.ARM.Collect$$libinit$$00000029) refers to argv_veneer.o(.emb_text) for __ARM_argv_veneer
    sys_exit.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_exit_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    rtexit2.o(.ARM.Collect$$rtexit$$00000003) refers to libshutdown.o(.ARM.Collect$$libshutdown$$00000000) for __rt_lib_shutdown
    rtexit2.o(.ARM.Collect$$rtexit$$00000004) refers to sys_exit.o(.text) for _sys_exit
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000001) for .ARM.Collect$$rtexit$$00000001
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for .ARM.Collect$$rtexit$$00000003
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for .ARM.Collect$$rtexit$$00000004
    __raise.o(.text) refers to defsig.o(CL$$defsig) for __default_signal_handler
    defsig_general.o(.text) refers to sys_wrch.o(.text) for _ttywrch
    argv_veneer.o(.emb_text) refers to no_argv.o(.text) for __ARM_get_argv
    sys_wrch.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_wrch_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig.o(CL$$defsig) refers to defsig_fpe_inner.o(.text) for __rt_SIGFPE_inner
    defsig.o(CL$$defsig) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    _get_argv_nomalloc.o(.text) refers (Special) to hrguard.o(.text) for __heap_region$guard
    _get_argv_nomalloc.o(.text) refers to defsig_rtmem_outer.o(.text) for __rt_SIGRTMEM
    _get_argv_nomalloc.o(.text) refers to sys_command.o(.text) for _sys_command_string
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000002) for __rt_lib_shutdown_cpp_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000007) for __rt_lib_shutdown_fp_trap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F) for __rt_lib_shutdown_heap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000010) for __rt_lib_shutdown_return
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A) for __rt_lib_shutdown_signal_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000004) for __rt_lib_shutdown_stdio_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C) for __rt_lib_shutdown_user_alloc_1
    sys_command.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_command_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig_abrt_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtred_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtmem_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtmem_outer.o(.text) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    defsig_rtmem_outer.o(.text) refers to defsig_exit.o(.text) for __sig_exit
    defsig_rtmem_formal.o(.text) refers to rt_raise.o(.text) for __rt_raise
    defsig_stak_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_pvfn_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_cppl_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_segv_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_other.o(.text) refers to defsig_general.o(.text) for __default_signal_display


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.text), (0 bytes).
    Removing main.o(.ARM.exidx.text.HAL_GetTick), (8 bytes).
    Removing main.o(.ARM.exidx.text.HAL_InitTick), (8 bytes).
    Removing main.o(.ARM.exidx.text.main), (8 bytes).
    Removing main.o(.ARM.exidx.text.MPU_Config), (8 bytes).
    Removing main.o(.ARM.exidx.text.CPU_CACHE_Enable), (8 bytes).
    Removing main.o(.ARM.exidx.text.SystemClock_Config), (8 bytes).
    Removing main.o(.ARM.exidx.text.Error_Handler), (8 bytes).
    Removing main.o(.ARM.use_no_argv), (4 bytes).
    Removing thread.o(.text), (0 bytes).
    Removing thread.o(.ARM.exidx.text.Init_Thread), (8 bytes).
    Removing thread.o(.ARM.exidx.text.Thread), (8 bytes).
    Removing led_756g_eval.o(.text), (0 bytes).
    Removing led_756g_eval.o(.ARM.exidx.text.LED_Initialize), (8 bytes).
    Removing led_756g_eval.o(.text.LED_Uninitialize), (36 bytes).
    Removing led_756g_eval.o(.ARM.exidx.text.LED_Uninitialize), (8 bytes).
    Removing led_756g_eval.o(.ARM.exidx.text.LED_On), (8 bytes).
    Removing led_756g_eval.o(.ARM.exidx.text.LED_Off), (8 bytes).
    Removing led_756g_eval.o(.text.LED_SetOut), (64 bytes).
    Removing led_756g_eval.o(.ARM.exidx.text.LED_SetOut), (8 bytes).
    Removing led_756g_eval.o(.text.LED_GetCount), (4 bytes).
    Removing led_756g_eval.o(.ARM.exidx.text.LED_GetCount), (8 bytes).
    Removing irq_armv7m.o(.rodata), (1 bytes).
    Removing irq_armv7m.o(.ARM.exidx), (32 bytes).
    Removing rtx_delay.o(.text), (0 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelay), (8 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_delay.o(.text.osDelayUntil), (84 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.osDelayUntil), (8 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelay), (8 bytes).
    Removing rtx_delay.o(.text.svcRtxDelayUntil), (106 bytes).
    Removing rtx_delay.o(.ARM.exidx.text.svcRtxDelayUntil), (8 bytes).
    Removing rtx_evflags.o(.text), (0 bytes).
    Removing rtx_evflags.o(.text.osRtxEventFlagsDeleteClass), (164 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsDeleteClass), (8 bytes).
    Removing rtx_evflags.o(.text.osRtxObject), (10 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_evflags.o(.text.osRtxEventFlagsDestroy), (90 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsDestroy), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsNew), (86 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsNew), (8 bytes).
    Removing rtx_evflags.o(.text.IsException), (20 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_evflags.o(.text.IsIrqMasked), (46 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsGetName), (72 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsGetName), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsGetName), (72 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGetName), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsSet), (94 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.text.isrRtxEventFlagsSet), (106 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.isrRtxEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsClear), (94 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsClear), (144 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsGet), (72 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsGet), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsGet), (72 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsGet), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsWait), (126 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.isrRtxEventFlagsWait), (138 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.isrRtxEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.osEventFlagsDelete), (86 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osEventFlagsDelete), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsNew), (412 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsNew), (8 bytes).
    Removing rtx_evflags.o(.text.osRtxThreadGetRunning), (12 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_evflags.o(.text.IsEventFlagsPtrValid), (34 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.IsEventFlagsPtrValid), (8 bytes).
    Removing rtx_evflags.o(.text.osRtxEventFlagsPostProcess), (92 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsPostProcess), (8 bytes).
    Removing rtx_evflags.o(.text.EventFlagsCheck), (124 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.EventFlagsCheck), (8 bytes).
    Removing rtx_evflags.o(.text.atomic_chk32_all), (56 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.atomic_chk32_all), (8 bytes).
    Removing rtx_evflags.o(.text.atomic_chk32_any), (52 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.atomic_chk32_any), (8 bytes).
    Removing rtx_evflags.o(.text.osRtxEventFlagsId), (10 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.osRtxEventFlagsId), (8 bytes).
    Removing rtx_evflags.o(.text.EventFlagsSet), (26 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.EventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.text.atomic_set32), (40 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.atomic_set32), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsSet), (264 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsSet), (8 bytes).
    Removing rtx_evflags.o(.text.EventFlagsClear), (26 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.EventFlagsClear), (8 bytes).
    Removing rtx_evflags.o(.text.atomic_clr32), (40 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.atomic_clr32), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsWait), (262 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsWait), (8 bytes).
    Removing rtx_evflags.o(.text.svcRtxEventFlagsDelete), (172 bytes).
    Removing rtx_evflags.o(.ARM.exidx.text.svcRtxEventFlagsDelete), (8 bytes).
    Removing rtx_evr.o(.text), (0 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryInit), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryAlloc), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryFree), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryBlockInit), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryBlockAlloc), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryBlockFree), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelError), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelInitialize), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelInitialized), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelGetInfo), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetInfo), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelInfoRetrieved), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelInfoRetrieved), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetState), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelStart), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelStarted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelLock), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelLock), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelLocked), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelLocked), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelUnlock), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelUnlock), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelUnlocked), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelUnlocked), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelRestoreLock), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelRestoreLock), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelLockRestored), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelLockRestored), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelSuspend), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelSuspend), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelSuspended), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelSuspended), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelResume), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelResume), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelResumed), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelResumed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelProtect), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelProtect), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelProtected), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelProtected), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetTickCount), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelErrorNotify), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxKernelDestroyClass), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxKernelDestroyClass), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadError), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadNew), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetName), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetClass), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetClass), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetZone), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetZone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetId), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetId), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetState), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetState), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetStackSize), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetStackSize), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetStackSpace), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadSetPriority), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSetPriority), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadPriorityUpdated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadPriorityUpdated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetPriority), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetPriority), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadYield), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadSuspend), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSuspend), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadSuspended), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSuspended), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadResume), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadResume), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadResumed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadResumed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadDetach), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadDetach), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadDetached), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadDetached), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadJoin), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadJoin), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadJoinPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadJoinPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadJoined), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadBlocked), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadUnblocked), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadPreempted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSwitched), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadExit), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadTerminate), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadTerminate), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadDestroyed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFeedWatchdog), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFeedWatchdog), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFeedWatchdogDone), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFeedWatchdogDone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadProtectPrivileged), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadProtectPrivileged), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadPrivilegedProtected), (2 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadPrivilegedProtected), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadGetCount), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadGetCount), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadEnumerate), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadEnumerate), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadSuspendClass), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadSuspendClass), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadResumeClass), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadResumeClass), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadTerminateZone), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadTerminateZone), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadWatchdogExpired), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsError), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsError), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsSet), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsSet), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsSetDone), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsSetDone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsClear), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsClear), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsClearDone), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsClearDone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsGet), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsGet), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsWait), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWait), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsWaitPending), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitTimeout), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitCompleted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxThreadFlagsWaitNotCompleted), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxThreadFlagsWaitNotCompleted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxDelayError), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxDelay), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxDelayUntil), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxDelayUntil), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxDelayStarted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxDelayUntilStarted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxDelayUntilStarted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxDelayCompleted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerError), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerError), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerCallback), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerNew), (16 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerNew), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerCreated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerGetName), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerStart), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStart), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerStarted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStarted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerStop), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStop), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerStopped), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerStopped), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerIsRunning), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerIsRunning), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerDelete), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerDelete), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxTimerDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxTimerDestroyed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsError), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsError), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsNew), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsNew), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsCreated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsGetName), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsSet), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsSet), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsSetDone), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsSetDone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsClear), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsClear), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsClearDone), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsClearDone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsGet), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsGet), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsWait), (14 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWait), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsWaitPending), (14 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitTimeout), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted), (14 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitCompleted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsWaitNotCompleted), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsWaitNotCompleted), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsDelete), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsDelete), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxEventFlagsDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxEventFlagsDestroyed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexError), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexError), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexNew), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexNew), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexCreated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexGetName), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexAcquire), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquire), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexAcquirePending), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquirePending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquireTimeout), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexAcquired), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexNotAcquired), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexNotAcquired), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexRelease), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexRelease), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexReleased), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexGetOwner), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexGetOwner), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexDelete), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexDelete), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMutexDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMutexDestroyed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreError), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreError), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreNew), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreNew), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreCreated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreGetName), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreAcquire), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquire), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreAcquirePending), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquirePending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquireTimeout), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreAcquired), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreAcquired), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreNotAcquired), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreNotAcquired), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreRelease), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreRelease), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreReleased), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreReleased), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreGetCount), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreGetCount), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreDelete), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreDelete), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxSemaphoreDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxSemaphoreDestroyed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolError), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolError), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolNew), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolNew), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolCreated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolAlloc), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolAllocPending), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocTimeout), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolAllocated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolAllocFailed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolAllocFailed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolFree), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolFree), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolDeallocated), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolDeallocated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolFreeFailed), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolFreeFailed), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolGetCapacity), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolGetBlockSize), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolGetCount), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolGetSpace), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMemoryPoolDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMemoryPoolDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueError), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueNew), (12 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueNew), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueCreated), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueGetName), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetName), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueuePut), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueuePutPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueuePutTimeout), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueInsertPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueInserted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueNotInserted), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGet), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetPending), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetTimeout), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueRetrieved), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueNotRetrieved), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueGetCapacity), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueGetMsgSize), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueGetCount), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueGetSpace), (10 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueReset), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueReset), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueResetDone), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueResetDone), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueDelete), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueDelete), (8 bytes).
    Removing rtx_evr.o(.text.EvrRtxMessageQueueDestroyed), (8 bytes).
    Removing rtx_evr.o(.ARM.exidx.text.EvrRtxMessageQueueDestroyed), (8 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelBeforeInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (118 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsPrivileged), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (108 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (70 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (70 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (138 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.IsFault), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsFault), (8 bytes).
    Removing rtx_kernel.o(.text.IsSVCallIrq), (22 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsSVCallIrq), (8 bytes).
    Removing rtx_kernel.o(.text.IsPendSvIrq), (22 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsPendSvIrq), (8 bytes).
    Removing rtx_kernel.o(.text.IsTickIrq), (28 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.IsTickIrq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (174 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (68 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (72 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelProtect), (84 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelProtect), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelDestroyClass), (130 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelDestroyClass), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelDestroyClass), (780 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelDestroyClass), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (58 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (28 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (58 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (76 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (58 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (22 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.SVC_Setup), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.__NVIC_GetPriorityGrouping), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (136 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osRtxThreadGetRunning), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (94 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (114 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.KernelBlock), (50 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.KernelBlock), (8 bytes).
    Removing rtx_kernel.o(.text.GetKernelSleepTime), (120 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime), (8 bytes).
    Removing rtx_kernel.o(.text.GetPendSV), (18 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.GetPendSV), (8 bytes).
    Removing rtx_kernel.o(.text.ClrPendSV), (16 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.ClrPendSV), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (272 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.KernelUnblock), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.KernelUnblock), (8 bytes).
    Removing rtx_kernel.o(.text.SetPendSV), (16 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.SetPendSV), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelProtect), (240 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelProtect), (8 bytes).
    Removing rtx_kernel.o(.text.osRtxKernelGetState), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.text.osRtxThreadSetRunning), (20 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxThreadSetRunning), (8 bytes).
    Removing rtx_lib.o(.text), (0 bytes).
    Removing rtx_lib.o(.ARM.exidx.text.osWatchdogAlarm_Handler), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text.osZoneSetup_Callback), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._platform_post_stackheap_init), (8 bytes).
    Removing rtx_lib.o(.rodata.irqRtxLibRef), (4 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.MemHeadPtr), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.MemBlockPtr), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.atomic_link_get), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.atomic_inc32), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.atomic_link_put), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.atomic_dec32), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolDeleteClass), (164 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolDeleteClass), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxObject), (10 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolDestroy), (122 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolDestroy), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (114 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.IsException), (20 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_mempool.o(.text.IsIrqMasked), (46 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (94 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.isrRtxMemoryPoolAlloc), (104 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.isrRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (94 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.isrRtxMemoryPoolFree), (114 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.isrRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (80 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (86 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (786 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxThreadGetRunning), (12 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_mempool.o(.text.IsMemoryPoolPtrValid), (34 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.IsMemoryPoolPtrValid), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (68 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolId), (10 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolId), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (204 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (210 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (170 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.text.osRtxMessageQueueDeleteClass), (164 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueDeleteClass), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_msgqueue.o(.text.osRtxMessageQueueDestroy), (122 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueDestroy), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueId), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueNew), (114 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.isrRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.isrRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (72 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (80 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (86 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (86 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.IsMessageQueuePtrValid), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.atomic_inc32), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.atomic_dec32_nz), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.atomic_wr8), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (346 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (172 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore), (8 bytes).
    Removing rtx_mutex.o(.text.osRtxMutexDeleteClass), (134 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexDeleteClass), (8 bytes).
    Removing rtx_mutex.o(.text.osRtxMutexOwnerUnlock), (252 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerUnlock), (8 bytes).
    Removing rtx_mutex.o(.text.osRtxMutexDestroy), (90 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexDestroy), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexNew), (86 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.IsException), (20 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_mutex.o(.text.IsIrqMasked), (46 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (72 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (72 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexAcquire), (100 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexRelease), (86 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (78 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexDelete), (86 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexNew), (412 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osRtxThreadGetRunning), (12 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_mutex.o(.text.IsMutexPtrValid), (34 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.IsMutexPtrValid), (8 bytes).
    Removing rtx_mutex.o(.text.osRtxMutexId), (10 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexId), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexAcquire), (410 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexRelease), (416 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (96 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexDelete), (136 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing rtx_semaphore.o(.text), (0 bytes).
    Removing rtx_semaphore.o(.text.osRtxSemaphoreDeleteClass), (164 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphoreDeleteClass), (8 bytes).
    Removing rtx_semaphore.o(.text.osRtxObject), (10 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_semaphore.o(.text.osRtxSemaphoreDestroy), (90 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphoreDestroy), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreNew), (114 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreNew), (8 bytes).
    Removing rtx_semaphore.o(.text.IsException), (20 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_semaphore.o(.text.IsIrqMasked), (46 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreGetName), (72 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetName), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreGetName), (72 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetName), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreAcquire), (94 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.text.isrRtxSemaphoreAcquire), (110 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.isrRtxSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreRelease), (78 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.isrRtxSemaphoreRelease), (116 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.isrRtxSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreGetCount), (72 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreGetCount), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreGetCount), (72 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreGetCount), (8 bytes).
    Removing rtx_semaphore.o(.text.osSemaphoreDelete), (86 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osSemaphoreDelete), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreNew), (468 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreNew), (8 bytes).
    Removing rtx_semaphore.o(.text.osRtxThreadGetRunning), (12 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_semaphore.o(.text.IsSemaphorePtrValid), (34 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.IsSemaphorePtrValid), (8 bytes).
    Removing rtx_semaphore.o(.text.osRtxSemaphorePostProcess), (62 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphorePostProcess), (8 bytes).
    Removing rtx_semaphore.o(.text.SemaphoreTokenDecrement), (36 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenDecrement), (8 bytes).
    Removing rtx_semaphore.o(.text.atomic_dec16_nz), (44 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.atomic_dec16_nz), (8 bytes).
    Removing rtx_semaphore.o(.text.osRtxSemaphoreId), (10 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.osRtxSemaphoreId), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreAcquire), (218 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreAcquire), (8 bytes).
    Removing rtx_semaphore.o(.text.SemaphoreTokenIncrement), (46 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.SemaphoreTokenIncrement), (8 bytes).
    Removing rtx_semaphore.o(.text.atomic_inc16_lt), (56 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.atomic_inc16_lt), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreRelease), (210 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreRelease), (8 bytes).
    Removing rtx_semaphore.o(.text.svcRtxSemaphoreDelete), (172 bytes).
    Removing rtx_semaphore.o(.ARM.exidx.text.svcRtxSemaphoreDelete), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxKernelGetState), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.isr_queue_get), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxThreadObject), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxEventFlagsObject), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxSemaphoreObject), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxMemoryPoolObject), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxMessageObject), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.isr_queue_put), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.SetPendSV), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.atomic_dec16_nz), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.atomic_inc16_lim), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.atomic_inc16_lt), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadObject), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxObject), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRoot), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxMutexObject), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.StackOffsetR0), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.SetPrivileged), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxKernelGetState), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStackCheck), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWatchdogRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWatchdogTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSetRunning), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWatchdogInsert), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBeforeFree), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadId), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetClass), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetClass), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetClass), (78 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetClass), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetZone), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetZone), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetZone), (78 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetZone), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (58 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (22 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (80 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (78 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (78 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSetPriority), (100 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (80 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFeedWatchdog), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFeedWatchdog), (8 bytes).
    Removing rtx_thread.o(.text.osThreadProtectPrivileged), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadProtectPrivileged), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspendClass), (132 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspendClass), (8 bytes).
    Removing rtx_thread.o(.text.IsTickIrq), (28 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsTickIrq), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspendClass), (642 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspendClass), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResumeClass), (132 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResumeClass), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResumeClass), (376 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResumeClass), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminateZone), (126 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminateZone), (8 bytes).
    Removing rtx_thread.o(.text.IsFault), (48 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsFault), (8 bytes).
    Removing rtx_thread.o(.text.IsSVCallIrq), (22 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsSVCallIrq), (8 bytes).
    Removing rtx_thread.o(.text.IsPendSvIrq), (22 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsPendSvIrq), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminateZone), (510 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminateZone), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (64 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (94 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.isrRtxThreadFlagsSet), (134 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.isrRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (86 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (64 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (114 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsThreadPtrValid), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.IsClassMappingValid), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEntry), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.xPSR_InitVal), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.atomic_chk32_all), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.atomic_chk32_any), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (80 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadState), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (186 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSetPriority), (212 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (108 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadPriority), (14 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPriority), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (300 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (168 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (192 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (62 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (282 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (364 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFeedWatchdog), (66 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFeedWatchdog), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadProtectPrivileged), (62 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadProtectPrivileged), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (128 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (310 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.ThreadFlagsSet), (26 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.atomic_set32), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.atomic_set32), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (262 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (94 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.ThreadFlagsClear), (26 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.atomic_clr32), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.atomic_clr32), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (190 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.text.osRtxTimerDeleteClass), (146 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerDeleteClass), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.osRtxTimerDestroy), (94 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerDestroy), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (138 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.IsException), (20 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.IsException), (8 bytes).
    Removing rtx_timer.o(.text.IsIrqMasked), (46 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.IsIrqMasked), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (100 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (86 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (78 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (86 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxThreadGetRunning), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerUnlink), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxThreadSetRunning), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (494 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.IsTimerPtrValid), (34 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.IsTimerPtrValid), (8 bytes).
    Removing rtx_timer.o(.text.osRtxTimerId), (10 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerId), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (206 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (158 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (104 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (136 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (64 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (14 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (52 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).
    Removing rtx_config.o(.text), (0 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxErrorNotify), (8 bytes).
    Removing stm32f7xx_hal.o(.text), (0 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_Init), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_InitTick), (112 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_InitTick), (8 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_MspInit), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DeInit), (82 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DeInit), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_MspDeInit), (2 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_MspDeInit), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_IncTick), (26 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_IncTick), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetTick), (12 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetTick), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetTickPrio), (12 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetTickPrio), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_SetTickFreq), (106 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_SetTickFreq), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetTickFreq), (12 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetTickFreq), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_Delay), (66 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_Delay), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_SuspendTick), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_SuspendTick), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_ResumeTick), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_ResumeTick), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetHalVersion), (8 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetHalVersion), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetREVID), (14 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetREVID), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetDEVID), (16 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetDEVID), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetUIDw0), (12 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetUIDw0), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetUIDw1), (12 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetUIDw1), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_GetUIDw2), (12 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_GetUIDw2), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DBGMCU_EnableDBGSleepMode), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_EnableDBGSleepMode), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_DisableDBGSleepMode), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DBGMCU_EnableDBGStopMode), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_EnableDBGStopMode), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_DisableDBGStopMode), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DBGMCU_EnableDBGStandbyMode), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_EnableDBGStandbyMode), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DBGMCU_DisableDBGStandbyMode), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_EnableCompensationCell), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_EnableCompensationCell), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DisableCompensationCell), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DisableCompensationCell), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_EnableFMCMemorySwapping), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_EnableFMCMemorySwapping), (8 bytes).
    Removing stm32f7xx_hal.o(.text.HAL_DisableFMCMemorySwapping), (18 bytes).
    Removing stm32f7xx_hal.o(.ARM.exidx.text.HAL_DisableFMCMemorySwapping), (8 bytes).
    Removing stm32f7xx_hal.o(.data.uwTickFreq), (1 bytes).
    Removing stm32f7xx_hal.o(.bss.uwTick), (4 bytes).
    Removing stm32f7xx_hal_cortex.o(.text), (0 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SetPriorityGrouping), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SetPriorityGrouping), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority), (50 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SetPriority), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping), (16 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetPriorityGrouping), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriority), (66 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SetPriority), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.NVIC_EncodePriority), (108 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.NVIC_EncodePriority), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ), (20 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_EnableIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_EnableIRQ), (48 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_EnableIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ), (20 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_DisableIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_DisableIRQ), (56 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_DisableIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SystemReset), (4 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SystemReset), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_SystemReset), (38 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SystemReset), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Config), (16 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_Config), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.SysTick_Config), (82 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.SysTick_Config), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_MPU_Disable), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_MPU_Enable), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_MPU_ConfigRegion), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriorityGrouping), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetPriorityGrouping), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPriority), (36 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetPriority), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.NVIC_DecodePriority), (118 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.NVIC_DecodePriority), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_GetPriority), (66 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetPriority), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPendingIRQ), (20 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_SetPendingIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_SetPendingIRQ), (48 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_SetPendingIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetPendingIRQ), (20 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetPendingIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_GetPendingIRQ), (64 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetPendingIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ), (20 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_ClearPendingIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_ClearPendingIRQ), (48 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_ClearPendingIRQ), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_NVIC_GetActive), (20 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_NVIC_GetActive), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.__NVIC_GetActive), (64 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.__NVIC_GetActive), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig), (52 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_CLKSourceConfig), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_IRQHandler), (8 bytes).
    Removing stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Callback), (2 bytes).
    Removing stm32f7xx_hal_cortex.o(.ARM.exidx.text.HAL_SYSTICK_Callback), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text), (0 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_Init), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text.HAL_GPIO_DeInit), (604 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_DeInit), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text.HAL_GPIO_ReadPin), (46 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_ReadPin), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_WritePin), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin), (38 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_TogglePin), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text.HAL_GPIO_LockPin), (86 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_LockPin), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler), (56 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_EXTI_IRQHandler), (8 bytes).
    Removing stm32f7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback), (10 bytes).
    Removing stm32f7xx_hal_gpio.o(.ARM.exidx.text.HAL_GPIO_EXTI_Callback), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text), (0 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_DeInit), (26 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DeInit), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableBkUpAccess), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableBkUpAccess), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableBkUpAccess), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_ConfigPVD), (210 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_ConfigPVD), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnablePVD), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnablePVD), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisablePVD), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisablePVD), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableWakeUpPin), (56 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableWakeUpPin), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableWakeUpPin), (24 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableWakeUpPin), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode), (58 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnterSLEEPMode), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode), (110 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnterSTOPMode), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnterSTANDBYMode), (36 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnterSTANDBYMode), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_PVD_IRQHandler), (42 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_PVD_IRQHandler), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_PVDCallback), (2 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_PVDCallback), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableSleepOnExit), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableSleepOnExit), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableSleepOnExit), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableSleepOnExit), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_EnableSEVOnPend), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_EnableSEVOnPend), (8 bytes).
    Removing stm32f7xx_hal_pwr.o(.text.HAL_PWR_DisableSEVOnPend), (18 bytes).
    Removing stm32f7xx_hal_pwr.o(.ARM.exidx.text.HAL_PWR_DisableSEVOnPend), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text), (0 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableBkUpReg), (106 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableBkUpReg), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableBkUpReg), (106 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableBkUpReg), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableFlashPowerDown), (18 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableFlashPowerDown), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableFlashPowerDown), (18 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableFlashPowerDown), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableMainRegulatorLowVoltage), (18 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableMainRegulatorLowVoltage), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableMainRegulatorLowVoltage), (18 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableMainRegulatorLowVoltage), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableLowRegulatorLowVoltage), (18 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableLowRegulatorLowVoltage), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableLowRegulatorLowVoltage), (18 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableLowRegulatorLowVoltage), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnableOverDrive), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableOverDrive), (190 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_DisableOverDrive), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnterUnderDriveSTOPMode), (240 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_EnterUnderDriveSTOPMode), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange), (16 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_GetVoltageRange), (8 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling), (322 bytes).
    Removing stm32f7xx_hal_pwr_ex.o(.ARM.exidx.text.HAL_PWREx_ControlVoltageScaling), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text), (0 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_DeInit), (570 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_DeInit), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_OscConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_ClockConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetSysClockFreq), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_MCOConfig), (200 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_MCOConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_EnableCSS), (18 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_EnableCSS), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_DisableCSS), (18 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_DisableCSS), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq), (12 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetHCLKFreq), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq), (34 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetPCLK1Freq), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq), (34 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetPCLK2Freq), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetOscConfig), (324 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetOscConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig), (84 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_GetClockConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_NMI_IRQHandler), (40 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_NMI_IRQHandler), (8 bytes).
    Removing stm32f7xx_hal_rcc.o(.text.HAL_RCC_CSSCallback), (2 bytes).
    Removing stm32f7xx_hal_rcc.o(.ARM.exidx.text.HAL_RCC_CSSCallback), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text), (0 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig), (2162 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_PeriphCLKConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKConfig), (486 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_GetPeriphCLKConfig), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq), (752 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_GetPeriphCLKFreq), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnablePLLI2S), (200 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_EnablePLLI2S), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_DisablePLLI2S), (86 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_DisablePLLI2S), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_EnablePLLSAI), (200 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_EnablePLLSAI), (8 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_DisablePLLSAI), (92 bytes).
    Removing stm32f7xx_hal_rcc_ex.o(.ARM.exidx.text.HAL_RCCEx_DisablePLLSAI), (8 bytes).
    Removing system_stm32f7xx.o(.text), (0 bytes).
    Removing system_stm32f7xx.o(.ARM.exidx.text.SystemInit), (8 bytes).
    Removing system_stm32f7xx.o(.ARM.exidx.text.SystemCoreClockUpdate), (8 bytes).
    Removing system_stm32f7xx.o(.rodata.APBPrescTable), (8 bytes).

1233 unused section(s) (total 43646 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit1.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit3.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardshut.o ABSOLUTE
    ../clib/angel/handlers.s                 0x00000000   Number         0  __scatter_copy.o ABSOLUTE
    ../clib/angel/handlers.s                 0x00000000   Number         0  __scatter_zi.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry2.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry4.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit2.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  aeabi_ldiv0.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  aeabi_ldiv0_sigfpe.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  rt_div0.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  rt_raise.o ABSOLUTE
    ../clib/angel/scatter.s                  0x00000000   Number         0  __scatter.o ABSOLUTE
    ../clib/angel/startup.s                  0x00000000   Number         0  __main.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  sys_stackheap_outer.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  libspace.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  use_no_semi.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  indicate_semi.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit_hlt.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch_hlt.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command_hlt.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  _get_argv_nomalloc.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  no_argv.o ABSOLUTE
    ../clib/heapalloc.c                      0x00000000   Number         0  hrguard.o ABSOLUTE
    ../clib/heapaux.c                        0x00000000   Number         0  heapauxi.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit2.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown2.o ABSOLUTE
    ../clib/longlong.s                       0x00000000   Number         0  lludivv7m.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memcpy_v6.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memclr.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memclr_w.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memcpy_w.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_outer.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_formal.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_exit.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  __raise.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_general.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_abrt_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtred_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_outer.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_formal.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_stak_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_pvfn_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_cppl_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_segv_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_other.o ABSOLUTE
    ../clib/signal.s                         0x00000000   Number         0  defsig.o ABSOLUTE
    ../clib/stdlib.c                         0x00000000   Number         0  exit.o ABSOLUTE
    ../fplib/fpinit.s                        0x00000000   Number         0  fpinit.o ABSOLUTE
    LED_756G_EVAL.c                          0x00000000   Number         0  led_756g_eval.o ABSOLUTE
    RTE/Device/STM32F746NGHx/startup_stm32f746xx.s 0x00000000   Number         0  startup_stm32f746xx.o ABSOLUTE
    RTX_Config.c                             0x00000000   Number         0  rtx_config.o ABSOLUTE
    Thread.c                                 0x00000000   Number         0  thread.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    rtx_delay.c                              0x00000000   Number         0  rtx_delay.o ABSOLUTE
    rtx_evflags.c                            0x00000000   Number         0  rtx_evflags.o ABSOLUTE
    rtx_evr.c                                0x00000000   Number         0  rtx_evr.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_lib.c                                0x00000000   Number         0  rtx_lib.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_semaphore.c                          0x00000000   Number         0  rtx_semaphore.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    stm32f7xx_hal.c                          0x00000000   Number         0  stm32f7xx_hal.o ABSOLUTE
    stm32f7xx_hal_cortex.c                   0x00000000   Number         0  stm32f7xx_hal_cortex.o ABSOLUTE
    stm32f7xx_hal_gpio.c                     0x00000000   Number         0  stm32f7xx_hal_gpio.o ABSOLUTE
    stm32f7xx_hal_pwr.c                      0x00000000   Number         0  stm32f7xx_hal_pwr.o ABSOLUTE
    stm32f7xx_hal_pwr_ex.c                   0x00000000   Number         0  stm32f7xx_hal_pwr_ex.o ABSOLUTE
    stm32f7xx_hal_rcc.c                      0x00000000   Number         0  stm32f7xx_hal_rcc.o ABSOLUTE
    stm32f7xx_hal_rcc_ex.c                   0x00000000   Number         0  stm32f7xx_hal_rcc_ex.o ABSOLUTE
    system_stm32f7xx.c                       0x00000000   Number         0  system_stm32f7xx.o ABSOLUTE
    FPU_USED                                 0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    osRtxErrorStackOverflow                  0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    osRtxErrorSVC                            0x00000006   Number         0  irq_armv7m.o ABSOLUTE
    I_T_RUN_OFS                              0x00000014   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SF_OFS                               0x00000022   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SP_OFS                               0x00000038   Number         0  irq_armv7m.o ABSOLUTE
    TCB_ZONE_OFS                             0x00000044   Number         0  irq_armv7m.o ABSOLUTE
    RESET                                    0x08000000   Section      456  startup_stm32f746xx.o(RESET)
    !!!main                                  0x080001c8   Section        8  __main.o(!!!main)
    !!!scatter                               0x080001d0   Section       52  __scatter.o(!!!scatter)
    !!handler_copy                           0x08000204   Section       26  __scatter_copy.o(!!handler_copy)
    !!handler_zi                             0x08000220   Section       28  __scatter_zi.o(!!handler_zi)
    .ARM.Collect$$libinit$$00000000          0x0800023c   Section        2  libinit.o(.ARM.Collect$$libinit$$00000000)
    .ARM.Collect$$libinit$$00000001          0x0800023e   Section        4  libinit2.o(.ARM.Collect$$libinit$$00000001)
    .ARM.Collect$$libinit$$00000004          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    .ARM.Collect$$libinit$$00000006          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000006)
    .ARM.Collect$$libinit$$0000000C          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    .ARM.Collect$$libinit$$0000000E          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    .ARM.Collect$$libinit$$00000010          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000010)
    .ARM.Collect$$libinit$$00000013          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    .ARM.Collect$$libinit$$00000015          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    .ARM.Collect$$libinit$$00000017          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    .ARM.Collect$$libinit$$00000019          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    .ARM.Collect$$libinit$$0000001B          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    .ARM.Collect$$libinit$$0000001D          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    .ARM.Collect$$libinit$$0000001F          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    .ARM.Collect$$libinit$$00000021          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    .ARM.Collect$$libinit$$00000023          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    .ARM.Collect$$libinit$$00000025          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    .ARM.Collect$$libinit$$00000027          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000027)
    .ARM.Collect$$libinit$$0000002E          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    .ARM.Collect$$libinit$$00000030          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    .ARM.Collect$$libinit$$00000032          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    .ARM.Collect$$libinit$$00000034          0x08000242   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000034)
    .ARM.Collect$$libinit$$00000035          0x08000242   Section        2  libinit2.o(.ARM.Collect$$libinit$$00000035)
    .ARM.Collect$$libshutdown$$00000000      0x08000244   Section        2  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    .ARM.Collect$$libshutdown$$00000002      0x08000246   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    .ARM.Collect$$libshutdown$$00000004      0x08000246   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    .ARM.Collect$$libshutdown$$00000007      0x08000246   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    .ARM.Collect$$libshutdown$$0000000A      0x08000246   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    .ARM.Collect$$libshutdown$$0000000C      0x08000246   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    .ARM.Collect$$libshutdown$$0000000F      0x08000246   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    .ARM.Collect$$libshutdown$$00000010      0x08000246   Section        2  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    .ARM.Collect$$rtentry$$00000000          0x08000248   Section        0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    .ARM.Collect$$rtentry$$00000002          0x08000248   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    .ARM.Collect$$rtentry$$00000004          0x08000248   Section        6  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    .ARM.Collect$$rtentry$$00000008          0x0800024e   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    .ARM.Collect$$rtentry$$0000000A          0x08000256   Section        4  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    .ARM.Collect$$rtentry$$0000000C          0x0800025a   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    .ARM.Collect$$rtentry$$0000000D          0x0800025a   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    .ARM.Collect$$rtexit$$00000000           0x08000262   Section        2  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    .ARM.Collect$$rtexit$$00000002           0x08000264   Section        0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    .ARM.Collect$$rtexit$$00000003           0x08000264   Section        4  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    .ARM.Collect$$rtexit$$00000004           0x08000268   Section        6  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    [Anonymous Symbol]                       0x08000270   Section        0  irq_armv7m.o(.text)
    SVC_Context                              0x08000298   Number         0  irq_armv7m.o(.text)
    SVC_FP_LazyState                         0x080002a8   Number         0  irq_armv7m.o(.text)
    SVC_ContextSave                          0x080002ba   Number         0  irq_armv7m.o(.text)
    SVC_ContextSaveRegs                      0x080002f2   Number         0  irq_armv7m.o(.text)
    SVC_ContextRestore                       0x08000308   Number         0  irq_armv7m.o(.text)
    SVC_ZoneSetup                            0x08000316   Number         0  irq_armv7m.o(.text)
    SVC_Exit                                 0x08000334   Number         0  irq_armv7m.o(.text)
    SVC_User                                 0x08000336   Number         0  irq_armv7m.o(.text)
    $v0                                      0x08000388   Number         0  startup_stm32f746xx.o(.text)
    .text                                    0x08000388   Section       64  startup_stm32f746xx.o(.text)
    .text                                    0x080003c8   Section      240  lludivv7m.o(.text)
    .text                                    0x080004b8   Section      138  rt_memcpy_v6.o(.text)
    .text                                    0x08000542   Section       68  rt_memclr.o(.text)
    .text                                    0x08000586   Section       78  rt_memclr_w.o(.text)
    .text                                    0x080005d4   Section        0  heapauxi.o(.text)
    .text                                    0x080005da   Section      100  rt_memcpy_w.o(.text)
    .text                                    0x0800063e   Section       74  sys_stackheap_outer.o(.text)
    .text                                    0x08000688   Section        0  exit.o(.text)
    .text                                    0x0800069c   Section        8  libspace.o(.text)
    .text                                    0x080006a4   Section        0  sys_exit.o(.text)
    .text                                    0x080006b0   Section        2  use_no_semi.o(.text)
    .text                                    0x080006b2   Section        0  indicate_semi.o(.text)
    CPU_CACHE_Enable                         0x080006b9   Thumb Code   222  main.o(.text.CPU_CACHE_Enable)
    [Anonymous Symbol]                       0x080006b8   Section        0  main.o(.text.CPU_CACHE_Enable)
    Error_Handler                            0x08000799   Thumb Code     4  main.o(.text.Error_Handler)
    [Anonymous Symbol]                       0x08000798   Section        0  main.o(.text.Error_Handler)
    [Anonymous Symbol]                       0x080007a0   Section        0  rtx_evr.o(.text.EvrRtxDelay)
    [Anonymous Symbol]                       0x080007a8   Section        0  rtx_evr.o(.text.EvrRtxDelayCompleted)
    [Anonymous Symbol]                       0x080007b0   Section        0  rtx_evr.o(.text.EvrRtxDelayError)
    [Anonymous Symbol]                       0x080007b8   Section        0  rtx_evr.o(.text.EvrRtxDelayStarted)
    [Anonymous Symbol]                       0x080007c0   Section        0  rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout)
    [Anonymous Symbol]                       0x080007c8   Section        0  rtx_evr.o(.text.EvrRtxKernelError)
    [Anonymous Symbol]                       0x080007d0   Section        0  rtx_evr.o(.text.EvrRtxKernelErrorNotify)
    [Anonymous Symbol]                       0x080007e0   Section        0  rtx_evr.o(.text.EvrRtxKernelGetState)
    [Anonymous Symbol]                       0x080007e8   Section        0  rtx_evr.o(.text.EvrRtxKernelGetTickCount)
    [Anonymous Symbol]                       0x080007f0   Section        0  rtx_evr.o(.text.EvrRtxKernelInitialize)
    [Anonymous Symbol]                       0x080007f8   Section        0  rtx_evr.o(.text.EvrRtxKernelInitialized)
    [Anonymous Symbol]                       0x08000800   Section        0  rtx_evr.o(.text.EvrRtxKernelStart)
    [Anonymous Symbol]                       0x08000808   Section        0  rtx_evr.o(.text.EvrRtxKernelStarted)
    [Anonymous Symbol]                       0x08000810   Section        0  rtx_evr.o(.text.EvrRtxMemoryAlloc)
    [Anonymous Symbol]                       0x08000820   Section        0  rtx_evr.o(.text.EvrRtxMemoryBlockAlloc)
    [Anonymous Symbol]                       0x08000830   Section        0  rtx_evr.o(.text.EvrRtxMemoryBlockFree)
    [Anonymous Symbol]                       0x08000840   Section        0  rtx_evr.o(.text.EvrRtxMemoryBlockInit)
    [Anonymous Symbol]                       0x08000850   Section        0  rtx_evr.o(.text.EvrRtxMemoryFree)
    [Anonymous Symbol]                       0x08000860   Section        0  rtx_evr.o(.text.EvrRtxMemoryInit)
    [Anonymous Symbol]                       0x08000870   Section        0  rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout)
    [Anonymous Symbol]                       0x08000878   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueCreated)
    [Anonymous Symbol]                       0x08000888   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueError)
    [Anonymous Symbol]                       0x08000898   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueGet)
    [Anonymous Symbol]                       0x080008a8   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueGetPending)
    [Anonymous Symbol]                       0x080008b8   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout)
    [Anonymous Symbol]                       0x080008c0   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueInsertPending)
    [Anonymous Symbol]                       0x080008d0   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueInserted)
    [Anonymous Symbol]                       0x080008e0   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueNotInserted)
    [Anonymous Symbol]                       0x080008f0   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved)
    [Anonymous Symbol]                       0x08000900   Section        0  rtx_evr.o(.text.EvrRtxMessageQueuePut)
    [Anonymous Symbol]                       0x08000910   Section        0  rtx_evr.o(.text.EvrRtxMessageQueuePutPending)
    [Anonymous Symbol]                       0x08000920   Section        0  rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout)
    [Anonymous Symbol]                       0x08000928   Section        0  rtx_evr.o(.text.EvrRtxMessageQueueRetrieved)
    [Anonymous Symbol]                       0x08000938   Section        0  rtx_evr.o(.text.EvrRtxMutexAcquireTimeout)
    [Anonymous Symbol]                       0x08000940   Section        0  rtx_evr.o(.text.EvrRtxMutexAcquired)
    [Anonymous Symbol]                       0x08000950   Section        0  rtx_evr.o(.text.EvrRtxMutexReleased)
    [Anonymous Symbol]                       0x08000960   Section        0  rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout)
    [Anonymous Symbol]                       0x08000968   Section        0  rtx_evr.o(.text.EvrRtxThreadBlocked)
    [Anonymous Symbol]                       0x08000978   Section        0  rtx_evr.o(.text.EvrRtxThreadCreated)
    [Anonymous Symbol]                       0x08000988   Section        0  rtx_evr.o(.text.EvrRtxThreadDestroyed)
    [Anonymous Symbol]                       0x08000990   Section        0  rtx_evr.o(.text.EvrRtxThreadError)
    [Anonymous Symbol]                       0x080009a0   Section        0  rtx_evr.o(.text.EvrRtxThreadExit)
    [Anonymous Symbol]                       0x080009a8   Section        0  rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted)
    [Anonymous Symbol]                       0x080009b8   Section        0  rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout)
    [Anonymous Symbol]                       0x080009c0   Section        0  rtx_evr.o(.text.EvrRtxThreadJoined)
    [Anonymous Symbol]                       0x080009c8   Section        0  rtx_evr.o(.text.EvrRtxThreadNew)
    [Anonymous Symbol]                       0x080009d8   Section        0  rtx_evr.o(.text.EvrRtxThreadPreempted)
    [Anonymous Symbol]                       0x080009e0   Section        0  rtx_evr.o(.text.EvrRtxThreadSwitched)
    [Anonymous Symbol]                       0x080009e8   Section        0  rtx_evr.o(.text.EvrRtxThreadUnblocked)
    [Anonymous Symbol]                       0x080009f8   Section        0  rtx_evr.o(.text.EvrRtxThreadWatchdogExpired)
    [Anonymous Symbol]                       0x08000a00   Section        0  rtx_evr.o(.text.EvrRtxThreadYield)
    [Anonymous Symbol]                       0x08000a08   Section        0  rtx_evr.o(.text.EvrRtxTimerCallback)
    [Anonymous Symbol]                       0x08000a18   Section        0  stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init)
    [Anonymous Symbol]                       0x08000e08   Section        0  stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin)
    [Anonymous Symbol]                       0x08000e38   Section        0  main.o(.text.HAL_GetTick)
    [Anonymous Symbol]                       0x08000ea0   Section        0  stm32f7xx_hal.o(.text.HAL_Init)
    [Anonymous Symbol]                       0x08000ed0   Section        0  main.o(.text.HAL_InitTick)
    [Anonymous Symbol]                       0x08000ee0   Section        0  stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion)
    [Anonymous Symbol]                       0x08000f80   Section        0  stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable)
    [Anonymous Symbol]                       0x08000fa8   Section        0  stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable)
    [Anonymous Symbol]                       0x08000fd8   Section        0  stm32f7xx_hal.o(.text.HAL_MspInit)
    [Anonymous Symbol]                       0x08000fe0   Section        0  stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping)
    [Anonymous Symbol]                       0x08000ff0   Section        0  stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive)
    [Anonymous Symbol]                       0x080010b8   Section        0  stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig)
    [Anonymous Symbol]                       0x08001328   Section        0  stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq)
    [Anonymous Symbol]                       0x08001410   Section        0  stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig)
    [Anonymous Symbol]                       0x08001b28   Section        0  thread.o(.text.Init_Thread)
    IsClassMappingValid                      0x08001b69   Thumb Code   162  rtx_thread.o(.text.IsClassMappingValid)
    [Anonymous Symbol]                       0x08001b68   Section        0  rtx_thread.o(.text.IsClassMappingValid)
    IsException                              0x08001c11   Thumb Code    20  rtx_delay.o(.text.IsException)
    [Anonymous Symbol]                       0x08001c10   Section        0  rtx_delay.o(.text.IsException)
    IsException                              0x08001c29   Thumb Code    20  rtx_kernel.o(.text.IsException)
    [Anonymous Symbol]                       0x08001c28   Section        0  rtx_kernel.o(.text.IsException)
    IsException                              0x08001c41   Thumb Code    20  rtx_msgqueue.o(.text.IsException)
    [Anonymous Symbol]                       0x08001c40   Section        0  rtx_msgqueue.o(.text.IsException)
    IsException                              0x08001c59   Thumb Code    20  rtx_thread.o(.text.IsException)
    [Anonymous Symbol]                       0x08001c58   Section        0  rtx_thread.o(.text.IsException)
    IsIrqMasked                              0x08001c71   Thumb Code    46  rtx_delay.o(.text.IsIrqMasked)
    [Anonymous Symbol]                       0x08001c70   Section        0  rtx_delay.o(.text.IsIrqMasked)
    IsIrqMasked                              0x08001ca1   Thumb Code    46  rtx_kernel.o(.text.IsIrqMasked)
    [Anonymous Symbol]                       0x08001ca0   Section        0  rtx_kernel.o(.text.IsIrqMasked)
    IsIrqMasked                              0x08001cd1   Thumb Code    46  rtx_msgqueue.o(.text.IsIrqMasked)
    [Anonymous Symbol]                       0x08001cd0   Section        0  rtx_msgqueue.o(.text.IsIrqMasked)
    IsIrqMasked                              0x08001d01   Thumb Code    46  rtx_thread.o(.text.IsIrqMasked)
    [Anonymous Symbol]                       0x08001d00   Section        0  rtx_thread.o(.text.IsIrqMasked)
    IsMessageQueuePtrValid                   0x08001d31   Thumb Code    34  rtx_msgqueue.o(.text.IsMessageQueuePtrValid)
    [Anonymous Symbol]                       0x08001d30   Section        0  rtx_msgqueue.o(.text.IsMessageQueuePtrValid)
    IsPrivileged                             0x08001d59   Thumb Code    20  rtx_kernel.o(.text.IsPrivileged)
    [Anonymous Symbol]                       0x08001d58   Section        0  rtx_kernel.o(.text.IsPrivileged)
    IsThreadPtrValid                         0x08001d71   Thumb Code    34  rtx_thread.o(.text.IsThreadPtrValid)
    [Anonymous Symbol]                       0x08001d70   Section        0  rtx_thread.o(.text.IsThreadPtrValid)
    [Anonymous Symbol]                       0x08001d98   Section        0  led_756g_eval.o(.text.LED_Initialize)
    [Anonymous Symbol]                       0x08001e20   Section        0  led_756g_eval.o(.text.LED_Off)
    [Anonymous Symbol]                       0x08001e60   Section        0  led_756g_eval.o(.text.LED_On)
    MPU_Config                               0x08001ea1   Thumb Code    78  main.o(.text.MPU_Config)
    [Anonymous Symbol]                       0x08001ea0   Section        0  main.o(.text.MPU_Config)
    MemBlockPtr                              0x08001ef1   Thumb Code    24  rtx_memory.o(.text.MemBlockPtr)
    [Anonymous Symbol]                       0x08001ef0   Section        0  rtx_memory.o(.text.MemBlockPtr)
    MemHeadPtr                               0x08001f09   Thumb Code    10  rtx_memory.o(.text.MemHeadPtr)
    [Anonymous Symbol]                       0x08001f08   Section        0  rtx_memory.o(.text.MemHeadPtr)
    MessageQueueGet                          0x08001f19   Thumb Code    82  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x08001f18   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    MessageQueuePut                          0x08001f71   Thumb Code   172  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x08001f70   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    MessageQueueRemove                       0x08002021   Thumb Code    66  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x08002020   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x08002068   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    [Anonymous Symbol]                       0x08002078   Section        0  os_systick.o(.text.OS_Tick_Enable)
    [Anonymous Symbol]                       0x080020b8   Section        0  os_systick.o(.text.OS_Tick_GetIRQn)
    [Anonymous Symbol]                       0x080020c0   Section        0  os_systick.o(.text.OS_Tick_Setup)
    SVC_Setup                                0x08002141   Thumb Code   104  rtx_kernel.o(.text.SVC_Setup)
    [Anonymous Symbol]                       0x08002140   Section        0  rtx_kernel.o(.text.SVC_Setup)
    SetPendSV                                0x080021a9   Thumb Code    16  rtx_system.o(.text.SetPendSV)
    [Anonymous Symbol]                       0x080021a8   Section        0  rtx_system.o(.text.SetPendSV)
    SetPrivileged                            0x080021b9   Thumb Code    52  rtx_thread.o(.text.SetPrivileged)
    [Anonymous Symbol]                       0x080021b8   Section        0  rtx_thread.o(.text.SetPrivileged)
    StackOffsetR0                            0x080021f1   Thumb Code    24  rtx_thread.o(.text.StackOffsetR0)
    [Anonymous Symbol]                       0x080021f0   Section        0  rtx_thread.o(.text.StackOffsetR0)
    SystemClock_Config                       0x08002209   Thumb Code   120  main.o(.text.SystemClock_Config)
    [Anonymous Symbol]                       0x08002208   Section        0  main.o(.text.SystemClock_Config)
    [Anonymous Symbol]                       0x08002280   Section        0  system_stm32f7xx.o(.text.SystemCoreClockUpdate)
    [Anonymous Symbol]                       0x080023b0   Section        0  system_stm32f7xx.o(.text.SystemInit)
    [Anonymous Symbol]                       0x080023c8   Section        0  thread.o(.text.Thread)
    ThreadFlagsCheck                         0x080023f9   Thumb Code   124  rtx_thread.o(.text.ThreadFlagsCheck)
    [Anonymous Symbol]                       0x080023f8   Section        0  rtx_thread.o(.text.ThreadFlagsCheck)
    TimerInsert                              0x08002479   Thumb Code   158  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x08002478   Section        0  rtx_timer.o(.text.TimerInsert)
    TimerUnlink                              0x08002519   Thumb Code    40  rtx_timer.o(.text.TimerUnlink)
    [Anonymous Symbol]                       0x08002518   Section        0  rtx_timer.o(.text.TimerUnlink)
    __NVIC_GetPriorityGrouping               0x08002541   Thumb Code    16  rtx_kernel.o(.text.__NVIC_GetPriorityGrouping)
    [Anonymous Symbol]                       0x08002540   Section        0  rtx_kernel.o(.text.__NVIC_GetPriorityGrouping)
    __NVIC_SetPriorityGrouping               0x08002551   Thumb Code    60  stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping)
    [Anonymous Symbol]                       0x08002550   Section        0  stm32f7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping)
    [Anonymous Symbol]                       0x08002590   Section        0  rtx_lib.o(.text._platform_post_stackheap_init)
    atomic_chk32_all                         0x08002599   Thumb Code    56  rtx_thread.o(.text.atomic_chk32_all)
    [Anonymous Symbol]                       0x08002598   Section        0  rtx_thread.o(.text.atomic_chk32_all)
    atomic_chk32_any                         0x080025d1   Thumb Code    52  rtx_thread.o(.text.atomic_chk32_any)
    [Anonymous Symbol]                       0x080025d0   Section        0  rtx_thread.o(.text.atomic_chk32_any)
    atomic_dec16_nz                          0x08002609   Thumb Code    44  rtx_system.o(.text.atomic_dec16_nz)
    [Anonymous Symbol]                       0x08002608   Section        0  rtx_system.o(.text.atomic_dec16_nz)
    atomic_dec32                             0x08002639   Thumb Code    32  rtx_mempool.o(.text.atomic_dec32)
    [Anonymous Symbol]                       0x08002638   Section        0  rtx_mempool.o(.text.atomic_dec32)
    atomic_dec32_nz                          0x08002659   Thumb Code    40  rtx_msgqueue.o(.text.atomic_dec32_nz)
    [Anonymous Symbol]                       0x08002658   Section        0  rtx_msgqueue.o(.text.atomic_dec32_nz)
    atomic_inc16_lim                         0x08002681   Thumb Code    52  rtx_system.o(.text.atomic_inc16_lim)
    [Anonymous Symbol]                       0x08002680   Section        0  rtx_system.o(.text.atomic_inc16_lim)
    atomic_inc16_lt                          0x080026b9   Thumb Code    56  rtx_system.o(.text.atomic_inc16_lt)
    [Anonymous Symbol]                       0x080026b8   Section        0  rtx_system.o(.text.atomic_inc16_lt)
    atomic_inc32                             0x080026f1   Thumb Code    32  rtx_mempool.o(.text.atomic_inc32)
    [Anonymous Symbol]                       0x080026f0   Section        0  rtx_mempool.o(.text.atomic_inc32)
    atomic_inc32                             0x08002711   Thumb Code    32  rtx_msgqueue.o(.text.atomic_inc32)
    [Anonymous Symbol]                       0x08002710   Section        0  rtx_msgqueue.o(.text.atomic_inc32)
    atomic_link_get                          0x08002731   Thumb Code    40  rtx_mempool.o(.text.atomic_link_get)
    [Anonymous Symbol]                       0x08002730   Section        0  rtx_mempool.o(.text.atomic_link_get)
    atomic_link_put                          0x08002759   Thumb Code    48  rtx_mempool.o(.text.atomic_link_put)
    [Anonymous Symbol]                       0x08002758   Section        0  rtx_mempool.o(.text.atomic_link_put)
    atomic_wr8                               0x08002789   Thumb Code    40  rtx_msgqueue.o(.text.atomic_wr8)
    [Anonymous Symbol]                       0x08002788   Section        0  rtx_msgqueue.o(.text.atomic_wr8)
    isrRtxMessageQueueGet                    0x080027b1   Thumb Code   172  rtx_msgqueue.o(.text.isrRtxMessageQueueGet)
    [Anonymous Symbol]                       0x080027b0   Section        0  rtx_msgqueue.o(.text.isrRtxMessageQueueGet)
    isrRtxMessageQueuePut                    0x08002861   Thumb Code   188  rtx_msgqueue.o(.text.isrRtxMessageQueuePut)
    [Anonymous Symbol]                       0x08002860   Section        0  rtx_msgqueue.o(.text.isrRtxMessageQueuePut)
    isr_queue_get                            0x08002921   Thumb Code    84  rtx_system.o(.text.isr_queue_get)
    [Anonymous Symbol]                       0x08002920   Section        0  rtx_system.o(.text.isr_queue_get)
    isr_queue_put                            0x08002979   Thumb Code    94  rtx_system.o(.text.isr_queue_put)
    [Anonymous Symbol]                       0x08002978   Section        0  rtx_system.o(.text.isr_queue_put)
    [Anonymous Symbol]                       0x080029d8   Section        0  main.o(.text.main)
    [Anonymous Symbol]                       0x08002a08   Section        0  rtx_delay.o(.text.osDelay)
    [Anonymous Symbol]                       0x08002a60   Section        0  rtx_kernel.o(.text.osKernelGetState)
    [Anonymous Symbol]                       0x08002aa8   Section        0  rtx_kernel.o(.text.osKernelGetTickCount)
    [Anonymous Symbol]                       0x08002ae8   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x08002b38   Section        0  rtx_kernel.o(.text.osKernelStart)
    [Anonymous Symbol]                       0x08002b80   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x08002c00   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    [Anonymous Symbol]                       0x08002c90   Section        0  rtx_config.o(.text.osRtxErrorNotify)
    osRtxEventFlagsObject                    0x08002cc1   Thumb Code    10  rtx_system.o(.text.osRtxEventFlagsObject)
    [Anonymous Symbol]                       0x08002cc0   Section        0  rtx_system.o(.text.osRtxEventFlagsObject)
    [Anonymous Symbol]                       0x08002cd0   Section        0  rtx_config.o(.text.osRtxIdleThread)
    [Anonymous Symbol]                       0x08002cd8   Section        0  rtx_kernel.o(.text.osRtxKernelBeforeInit)
    [Anonymous Symbol]                       0x08002ce0   Section        0  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    osRtxKernelGetState                      0x08002d01   Thumb Code    12  rtx_system.o(.text.osRtxKernelGetState)
    [Anonymous Symbol]                       0x08002d00   Section        0  rtx_system.o(.text.osRtxKernelGetState)
    osRtxKernelGetState                      0x08002d11   Thumb Code    12  rtx_thread.o(.text.osRtxKernelGetState)
    [Anonymous Symbol]                       0x08002d10   Section        0  rtx_thread.o(.text.osRtxKernelGetState)
    osRtxKernelState                         0x08002d21   Thumb Code    12  rtx_kernel.o(.text.osRtxKernelState)
    [Anonymous Symbol]                       0x08002d20   Section        0  rtx_kernel.o(.text.osRtxKernelState)
    [Anonymous Symbol]                       0x08002d30   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x08002e80   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x08002f48   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x08002fe0   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x08003030   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x08003098   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMemoryPoolObject                    0x08003131   Thumb Code    10  rtx_system.o(.text.osRtxMemoryPoolObject)
    [Anonymous Symbol]                       0x08003130   Section        0  rtx_system.o(.text.osRtxMemoryPoolObject)
    osRtxMessageObject                       0x08003141   Thumb Code    10  rtx_system.o(.text.osRtxMessageObject)
    [Anonymous Symbol]                       0x08003140   Section        0  rtx_system.o(.text.osRtxMessageObject)
    osRtxMessageQueueId                      0x08003151   Thumb Code    10  rtx_msgqueue.o(.text.osRtxMessageQueueId)
    [Anonymous Symbol]                       0x08003150   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueueId)
    osRtxMessageQueuePostProcess             0x08003161   Thumb Code   324  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x08003160   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x080032a8   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    osRtxMutexObject                         0x080032e9   Thumb Code    10  rtx_thread.o(.text.osRtxMutexObject)
    [Anonymous Symbol]                       0x080032e8   Section        0  rtx_thread.o(.text.osRtxMutexObject)
    [Anonymous Symbol]                       0x080032f8   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    [Anonymous Symbol]                       0x08003390   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    osRtxObject                              0x08003441   Thumb Code    10  rtx_msgqueue.o(.text.osRtxObject)
    [Anonymous Symbol]                       0x08003440   Section        0  rtx_msgqueue.o(.text.osRtxObject)
    osRtxObject                              0x08003451   Thumb Code    10  rtx_mutex.o(.text.osRtxObject)
    [Anonymous Symbol]                       0x08003450   Section        0  rtx_mutex.o(.text.osRtxObject)
    osRtxObject                              0x08003461   Thumb Code    10  rtx_system.o(.text.osRtxObject)
    [Anonymous Symbol]                       0x08003460   Section        0  rtx_system.o(.text.osRtxObject)
    osRtxObject                              0x08003471   Thumb Code    10  rtx_thread.o(.text.osRtxObject)
    [Anonymous Symbol]                       0x08003470   Section        0  rtx_thread.o(.text.osRtxObject)
    [Anonymous Symbol]                       0x08003480   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x08003538   Section        0  rtx_system.o(.text.osRtxPostProcess)
    osRtxSemaphoreObject                     0x08003581   Thumb Code    10  rtx_system.o(.text.osRtxSemaphoreObject)
    [Anonymous Symbol]                       0x08003580   Section        0  rtx_system.o(.text.osRtxSemaphoreObject)
    [Anonymous Symbol]                       0x08003590   Section        0  rtx_thread.o(.text.osRtxThreadBeforeFree)
    osRtxThreadBlock                         0x08003599   Thumb Code   136  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x08003598   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadDelayInsert                   0x08003621   Thumb Code   250  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x08003620   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x08003720   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x080037c0   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    [Anonymous Symbol]                       0x08003910   Section        0  rtx_thread.o(.text.osRtxThreadDestroy)
    [Anonymous Symbol]                       0x08003970   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadFree                          0x08003a09   Thumb Code   162  rtx_thread.o(.text.osRtxThreadFree)
    [Anonymous Symbol]                       0x08003a08   Section        0  rtx_thread.o(.text.osRtxThreadFree)
    osRtxThreadGetRunning                    0x08003ab1   Thumb Code    12  rtx_msgqueue.o(.text.osRtxThreadGetRunning)
    [Anonymous Symbol]                       0x08003ab0   Section        0  rtx_msgqueue.o(.text.osRtxThreadGetRunning)
    osRtxThreadGetRunning                    0x08003ac1   Thumb Code    12  rtx_thread.o(.text.osRtxThreadGetRunning)
    [Anonymous Symbol]                       0x08003ac0   Section        0  rtx_thread.o(.text.osRtxThreadGetRunning)
    osRtxThreadGetRunning                    0x08003ad1   Thumb Code    12  rtx_timer.o(.text.osRtxThreadGetRunning)
    [Anonymous Symbol]                       0x08003ad0   Section        0  rtx_timer.o(.text.osRtxThreadGetRunning)
    osRtxThreadId                            0x08003ae1   Thumb Code    10  rtx_thread.o(.text.osRtxThreadId)
    [Anonymous Symbol]                       0x08003ae0   Section        0  rtx_thread.o(.text.osRtxThreadId)
    [Anonymous Symbol]                       0x08003af0   Section        0  rtx_thread.o(.text.osRtxThreadJoinWakeup)
    [Anonymous Symbol]                       0x08003b30   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x08003b68   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x08003be0   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListRoot                      0x08003c19   Thumb Code    34  rtx_thread.o(.text.osRtxThreadListRoot)
    [Anonymous Symbol]                       0x08003c18   Section        0  rtx_thread.o(.text.osRtxThreadListRoot)
    [Anonymous Symbol]                       0x08003c40   Section        0  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadObject                        0x08003c99   Thumb Code    10  rtx_system.o(.text.osRtxThreadObject)
    [Anonymous Symbol]                       0x08003c98   Section        0  rtx_system.o(.text.osRtxThreadObject)
    osRtxThreadObject                        0x08003ca9   Thumb Code    10  rtx_thread.o(.text.osRtxThreadObject)
    [Anonymous Symbol]                       0x08003ca8   Section        0  rtx_thread.o(.text.osRtxThreadObject)
    osRtxThreadPostProcess                   0x08003cb9   Thumb Code    68  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x08003cb8   Section        0  rtx_thread.o(.text.osRtxThreadPostProcess)
    [Anonymous Symbol]                       0x08003d00   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x08003d20   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadSetRunning                    0x08003d49   Thumb Code    20  rtx_thread.o(.text.osRtxThreadSetRunning)
    [Anonymous Symbol]                       0x08003d48   Section        0  rtx_thread.o(.text.osRtxThreadSetRunning)
    osRtxThreadSetRunning                    0x08003d61   Thumb Code    20  rtx_timer.o(.text.osRtxThreadSetRunning)
    [Anonymous Symbol]                       0x08003d60   Section        0  rtx_timer.o(.text.osRtxThreadSetRunning)
    [Anonymous Symbol]                       0x08003d78   Section        0  rtx_thread.o(.text.osRtxThreadStackCheck)
    [Anonymous Symbol]                       0x08003db8   Section        0  rtx_thread.o(.text.osRtxThreadStartup)
    [Anonymous Symbol]                       0x08003e50   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x08003e80   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x08003ef8   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxThreadWatchdogInsert                0x08003f41   Thumb Code   152  rtx_thread.o(.text.osRtxThreadWatchdogInsert)
    [Anonymous Symbol]                       0x08003f40   Section        0  rtx_thread.o(.text.osRtxThreadWatchdogInsert)
    [Anonymous Symbol]                       0x08003fd8   Section        0  rtx_thread.o(.text.osRtxThreadWatchdogRemove)
    [Anonymous Symbol]                       0x08004060   Section        0  rtx_thread.o(.text.osRtxThreadWatchdogTick)
    [Anonymous Symbol]                       0x08004158   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x08004270   Section        0  rtx_timer.o(.text.osRtxTimerSetup)
    [Anonymous Symbol]                       0x080042a0   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    osRtxTimerTick                           0x080042d9   Thumb Code   220  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x080042d8   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    osThreadEntry                            0x080043b9   Thumb Code    16  rtx_thread.o(.text.osThreadEntry)
    [Anonymous Symbol]                       0x080043b8   Section        0  rtx_thread.o(.text.osThreadEntry)
    [Anonymous Symbol]                       0x080043c8   Section        0  rtx_thread.o(.text.osThreadExit)
    [Anonymous Symbol]                       0x080043f0   Section        0  rtx_thread.o(.text.osThreadNew)
    [Anonymous Symbol]                       0x08004468   Section        0  rtx_thread.o(.text.osThreadYield)
    [Anonymous Symbol]                       0x080044b0   Section        0  rtx_lib.o(.text.osWatchdogAlarm_Handler)
    [Anonymous Symbol]                       0x080044c0   Section        0  rtx_lib.o(.text.osZoneSetup_Callback)
    svcRtxDelay                              0x080044c9   Thumb Code    80  rtx_delay.o(.text.svcRtxDelay)
    [Anonymous Symbol]                       0x080044c8   Section        0  rtx_delay.o(.text.svcRtxDelay)
    svcRtxKernelGetState                     0x08004519   Thumb Code    22  rtx_kernel.o(.text.svcRtxKernelGetState)
    [Anonymous Symbol]                       0x08004518   Section        0  rtx_kernel.o(.text.svcRtxKernelGetState)
    svcRtxKernelGetTickCount                 0x08004531   Thumb Code    28  rtx_kernel.o(.text.svcRtxKernelGetTickCount)
    [Anonymous Symbol]                       0x08004530   Section        0  rtx_kernel.o(.text.svcRtxKernelGetTickCount)
    svcRtxKernelInitialize                   0x08004551   Thumb Code   772  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x08004550   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxKernelStart                        0x08004859   Thumb Code   164  rtx_kernel.o(.text.svcRtxKernelStart)
    [Anonymous Symbol]                       0x08004858   Section        0  rtx_kernel.o(.text.svcRtxKernelStart)
    svcRtxMessageQueueGet                    0x08004901   Thumb Code   408  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x08004900   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueNew                    0x08004a99   Thumb Code   802  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x08004a98   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueuePut                    0x08004dc1   Thumb Code   396  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x08004dc0   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxThreadExit                         0x08004f51   Thumb Code   138  rtx_thread.o(.text.svcRtxThreadExit)
    [Anonymous Symbol]                       0x08004f50   Section        0  rtx_thread.o(.text.svcRtxThreadExit)
    svcRtxThreadNew                          0x08004fe1   Thumb Code  1410  rtx_thread.o(.text.svcRtxThreadNew)
    [Anonymous Symbol]                       0x08004fe0   Section        0  rtx_thread.o(.text.svcRtxThreadNew)
    svcRtxThreadYield                        0x08005569   Thumb Code    90  rtx_thread.o(.text.svcRtxThreadYield)
    [Anonymous Symbol]                       0x08005568   Section        0  rtx_thread.o(.text.svcRtxThreadYield)
    xPSR_InitVal                             0x080055c9   Thumb Code    18  rtx_thread.o(.text.xPSR_InitVal)
    [Anonymous Symbol]                       0x080055c8   Section        0  rtx_thread.o(.text.xPSR_InitVal)
    $v0                                      0x080055da   Number         0  fpinit.o(x$fpl$fpinit)
    x$fpl$fpinit                             0x080055da   Section       26  fpinit.o(x$fpl$fpinit)
    __tagsym$$used.0                         0x080055f4   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used.1                         0x08005664   Number         0  rtx_lib.o(.rodata)
    LED_PIN                                  0x080056ac   Data          16  led_756g_eval.o(.rodata.LED_PIN)
    [Anonymous Symbol]                       0x080056ac   Section        0  led_756g_eval.o(.rodata.LED_PIN)
    os_idle_thread_attr                      0x080056c0   Data          36  rtx_lib.o(.rodata.os_idle_thread_attr)
    [Anonymous Symbol]                       0x080056c0   Section        0  rtx_lib.o(.rodata.os_idle_thread_attr)
    os_timer_mq_attr                         0x080056e4   Data          24  rtx_lib.o(.rodata.os_timer_mq_attr)
    [Anonymous Symbol]                       0x080056e4   Section        0  rtx_lib.o(.rodata.os_timer_mq_attr)
    os_timer_thread_attr                     0x080056fc   Data          36  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x080056fc   Section        0  rtx_lib.o(.rodata.os_timer_thread_attr)
    .L.str                                   0x08005720   Data          11  rtx_kernel.o(.rodata.str1.1)
    [Anonymous Symbol]                       0x08005720   Section        0  rtx_kernel.o(.rodata.str1.1)
    WatchdogAlarmFlag                        0x200100a8   Data           1  rtx_thread.o(.data.os)
    [Anonymous Symbol]                       0x200100a8   Section        0  rtx_thread.o(.data.os)
    ThreadClassTable                         0x200100a9   Data          64  rtx_thread.o(.data.os)
    .bss                                     0x200100f0   Section       96  libspace.o(.bss)
    HAL_GetTick.ticks                        0x20010150   Data           4  main.o(.bss.HAL_GetTick.ticks)
    [Anonymous Symbol]                       0x20010150   Section        0  main.o(.bss.HAL_GetTick.ticks)
    os_isr_queue                             0x20010158   Data          64  rtx_lib.o(.bss.os)
    [Anonymous Symbol]                       0x20010158   Section        0  rtx_lib.o(.bss.os)
    os_mem                                   0x20010198   Data       32768  rtx_lib.o(.bss.os)
    PendST                                   0x20018198   Data           1  os_systick.o(.bss.os)
    [Anonymous Symbol]                       0x20018198   Section        0  os_systick.o(.bss.os)
    os_timer_mq_cb                           0x2001819c   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    [Anonymous Symbol]                       0x2001819c   Section        0  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_data                         0x200181d0   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    [Anonymous Symbol]                       0x200181d0   Section        0  rtx_lib.o(.bss.os.msgqueue.mem)
    os_idle_thread_cb                        0x20018220   Data          80  rtx_lib.o(.bss.os.thread.cb)
    [Anonymous Symbol]                       0x20018220   Section        0  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x20018270   Data          80  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_stack                     0x200182c0   Data         512  rtx_lib.o(.bss.os.thread.idle.stack)
    [Anonymous Symbol]                       0x200182c0   Section        0  rtx_lib.o(.bss.os.thread.idle.stack)
    os_timer_thread_stack                    0x200184c0   Data         512  rtx_lib.o(.bss.os.thread.timer.stack)
    [Anonymous Symbol]                       0x200184c0   Section        0  rtx_lib.o(.bss.os.thread.timer.stack)
    Heap_Mem                                 0x200186c8   Data         512  startup_stm32f746xx.o(HEAP)
    HEAP                                     0x200186c8   Section      512  startup_stm32f746xx.o(HEAP)
    Stack_Mem                                0x200188c8   Data        1024  startup_stm32f746xx.o(STACK)
    STACK                                    0x200188c8   Section     1024  startup_stm32f746xx.o(STACK)
    __initial_sp                             0x20018cc8   Data           0  startup_stm32f746xx.o(STACK)
    FPCCR                                    0xe000ef34   Number         0  irq_armv7m.o ABSOLUTE

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv4$E$P$D$K$B$S$7EM$VFPi5$EXTD16$VFPS$VFMA$PE$PLD8$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OSPACE$ROPI$EBA8$UX$STANDARDLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Length                - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Length                - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Length                  - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Length              - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Length                  - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __ARM_exceptions_init                     - Undefined Weak Reference
    __alloca_initialize                       - Undefined Weak Reference
    __arm_preinit_                            - Undefined Weak Reference
    __arm_relocate_pie_                       - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    __rt_locale                               - Undefined Weak Reference
    __sigvec_lookup                           - Undefined Weak Reference
    _atexit_init                              - Undefined Weak Reference
    _call_atexit_fns                          - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _fp_trap_init                             - Undefined Weak Reference
    _fp_trap_shutdown                         - Undefined Weak Reference
    _get_lc_collate                           - Undefined Weak Reference
    _get_lc_ctype                             - Undefined Weak Reference
    _get_lc_monetary                          - Undefined Weak Reference
    _get_lc_numeric                           - Undefined Weak Reference
    _get_lc_time                              - Undefined Weak Reference
    _getenv_init                              - Undefined Weak Reference
    _handle_redirection                       - Undefined Weak Reference
    _init_alloc                               - Undefined Weak Reference
    _init_user_alloc                          - Undefined Weak Reference
    _initio                                   - Undefined Weak Reference
    _rand_init                                - Undefined Weak Reference
    _signal_finish                            - Undefined Weak Reference
    _signal_init                              - Undefined Weak Reference
    _terminate_alloc                          - Undefined Weak Reference
    _terminate_user_alloc                     - Undefined Weak Reference
    _terminateio                              - Undefined Weak Reference
    .bss.os.msgqueue.cb$$Length              0x00000034   Number         0  anon$$obj.o ABSOLUTE
    __Vectors_Size                           0x000001c8   Number         0  startup_stm32f746xx.o ABSOLUTE
    __Vectors                                0x08000000   Data           4  startup_stm32f746xx.o(RESET)
    __Vectors_End                            0x080001c8   Data           0  startup_stm32f746xx.o(RESET)
    __main                                   0x080001c9   Thumb Code     8  __main.o(!!!main)
    __scatterload                            0x080001d1   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_rt2                        0x080001d1   Thumb Code    44  __scatter.o(!!!scatter)
    __scatterload_rt2_thumb_only             0x080001d1   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_null                       0x080001df   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_copy                       0x08000205   Thumb Code    26  __scatter_copy.o(!!handler_copy)
    __scatterload_zeroinit                   0x08000221   Thumb Code    28  __scatter_zi.o(!!handler_zi)
    __rt_lib_init                            0x0800023d   Thumb Code     0  libinit.o(.ARM.Collect$$libinit$$00000000)
    __rt_lib_init_fp_1                       0x0800023f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000001)
    __rt_lib_init_alloca_1                   0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    __rt_lib_init_argv_1                     0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    __rt_lib_init_atexit_1                   0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    __rt_lib_init_clock_1                    0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    __rt_lib_init_cpp_1                      0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000034)
    __rt_lib_init_exceptions_1               0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    __rt_lib_init_fp_trap_1                  0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    __rt_lib_init_getenv_1                   0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    __rt_lib_init_heap_1                     0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    __rt_lib_init_lc_collate_1               0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    __rt_lib_init_lc_ctype_1                 0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    __rt_lib_init_lc_monetary_1              0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    __rt_lib_init_lc_numeric_1               0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    __rt_lib_init_lc_time_1                  0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    __rt_lib_init_preinit_1                  0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000006)
    __rt_lib_init_rand_1                     0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000010)
    __rt_lib_init_relocate_pie_1             0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    __rt_lib_init_return                     0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000035)
    __rt_lib_init_signal_1                   0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    __rt_lib_init_stdio_1                    0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000027)
    __rt_lib_init_user_alloc_1               0x08000243   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    __rt_lib_shutdown                        0x08000245   Thumb Code     0  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    __rt_lib_shutdown_cpp_1                  0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    __rt_lib_shutdown_fp_trap_1              0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    __rt_lib_shutdown_heap_1                 0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    __rt_lib_shutdown_return                 0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    __rt_lib_shutdown_signal_1               0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    __rt_lib_shutdown_stdio_1                0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    __rt_lib_shutdown_user_alloc_1           0x08000247   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    __rt_entry                               0x08000249   Thumb Code     0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    __rt_entry_presh_1                       0x08000249   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    __rt_entry_sh                            0x08000249   Thumb Code     0  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    __rt_entry_postsh_1                      0x0800024f   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    __rt_entry_li                            0x08000257   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    __rt_entry_main                          0x0800025b   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    __rt_entry_postli_1                      0x0800025b   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    __rt_exit                                0x08000263   Thumb Code     0  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    __rt_exit_ls                             0x08000265   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    __rt_exit_prels_1                        0x08000265   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    __rt_exit_exit                           0x08000269   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    SVC_Handler                              0x08000271   Thumb Code   226  irq_armv7m.o(.text)
    PendSV_Handler                           0x08000353   Thumb Code    16  irq_armv7m.o(.text)
    SysTick_Handler                          0x08000363   Thumb Code    16  irq_armv7m.o(.text)
    osFaultResume                            0x08000373   Thumb Code     6  irq_armv7m.o(.text)
    Reset_Handler                            0x08000389   Thumb Code     8  startup_stm32f746xx.o(.text)
    NMI_Handler                              0x08000391   Thumb Code     2  startup_stm32f746xx.o(.text)
    HardFault_Handler                        0x08000393   Thumb Code     2  startup_stm32f746xx.o(.text)
    MemManage_Handler                        0x08000395   Thumb Code     2  startup_stm32f746xx.o(.text)
    BusFault_Handler                         0x08000397   Thumb Code     2  startup_stm32f746xx.o(.text)
    UsageFault_Handler                       0x08000399   Thumb Code     2  startup_stm32f746xx.o(.text)
    DebugMon_Handler                         0x0800039d   Thumb Code     2  startup_stm32f746xx.o(.text)
    ADC_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN1_RX0_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN1_RX1_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN1_SCE_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN1_TX_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN2_RX0_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN2_RX1_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN2_SCE_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CAN2_TX_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    CEC_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DCMI_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream0_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream1_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream2_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream3_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream4_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream5_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream6_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA1_Stream7_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2D_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream0_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream1_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream2_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream3_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream4_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream5_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream6_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    DMA2_Stream7_IRQHandler                  0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    ETH_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    ETH_WKUP_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI0_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI15_10_IRQHandler                     0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI1_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI2_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI3_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI4_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    EXTI9_5_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    FLASH_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    FMC_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    FPU_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C1_ER_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C1_EV_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C2_ER_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C2_EV_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C3_ER_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C3_EV_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C4_ER_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    I2C4_EV_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    LPTIM1_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    LTDC_ER_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    LTDC_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    OTG_FS_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    OTG_FS_WKUP_IRQHandler                   0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    OTG_HS_EP1_IN_IRQHandler                 0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    OTG_HS_EP1_OUT_IRQHandler                0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    OTG_HS_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    OTG_HS_WKUP_IRQHandler                   0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    PVD_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    QUADSPI_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    RCC_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    RNG_IRQHandler                           0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    RTC_Alarm_IRQHandler                     0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    RTC_WKUP_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SAI1_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SAI2_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SDMMC1_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPDIF_RX_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPI1_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPI2_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPI3_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPI4_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPI5_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    SPI6_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TAMP_STAMP_IRQHandler                    0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM1_BRK_TIM9_IRQHandler                 0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM1_CC_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM1_TRG_COM_TIM11_IRQHandler            0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM1_UP_TIM10_IRQHandler                 0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM2_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM3_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM4_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM5_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM6_DAC_IRQHandler                      0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM7_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM8_BRK_TIM12_IRQHandler                0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM8_CC_IRQHandler                       0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM8_TRG_COM_TIM14_IRQHandler            0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    TIM8_UP_TIM13_IRQHandler                 0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    UART4_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    UART5_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    UART7_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    UART8_IRQHandler                         0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    USART1_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    USART2_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    USART3_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    USART6_IRQHandler                        0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    WWDG_IRQHandler                          0x080003a3   Thumb Code     0  startup_stm32f746xx.o(.text)
    __user_initial_stackheap                 0x080003a5   Thumb Code     0  startup_stm32f746xx.o(.text)
    __aeabi_uldivmod                         0x080003c9   Thumb Code     0  lludivv7m.o(.text)
    _ll_udiv                                 0x080003c9   Thumb Code   240  lludivv7m.o(.text)
    __aeabi_memcpy                           0x080004b9   Thumb Code     0  rt_memcpy_v6.o(.text)
    __rt_memcpy                              0x080004b9   Thumb Code   138  rt_memcpy_v6.o(.text)
    _memcpy_lastbytes                        0x0800051f   Thumb Code     0  rt_memcpy_v6.o(.text)
    __aeabi_memclr                           0x08000543   Thumb Code     0  rt_memclr.o(.text)
    __rt_memclr                              0x08000543   Thumb Code     0  rt_memclr.o(.text)
    _memset                                  0x08000547   Thumb Code    64  rt_memclr.o(.text)
    __aeabi_memclr4                          0x08000587   Thumb Code     0  rt_memclr_w.o(.text)
    __aeabi_memclr8                          0x08000587   Thumb Code     0  rt_memclr_w.o(.text)
    __rt_memclr_w                            0x08000587   Thumb Code     0  rt_memclr_w.o(.text)
    _memset_w                                0x0800058b   Thumb Code    74  rt_memclr_w.o(.text)
    __use_two_region_memory                  0x080005d5   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_escrow$2region                 0x080005d7   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_expand$2region                 0x080005d9   Thumb Code     2  heapauxi.o(.text)
    __aeabi_memcpy4                          0x080005db   Thumb Code     0  rt_memcpy_w.o(.text)
    __aeabi_memcpy8                          0x080005db   Thumb Code     0  rt_memcpy_w.o(.text)
    __rt_memcpy_w                            0x080005db   Thumb Code   100  rt_memcpy_w.o(.text)
    _memcpy_lastbytes_aligned                0x08000623   Thumb Code     0  rt_memcpy_w.o(.text)
    __user_setup_stackheap                   0x0800063f   Thumb Code    74  sys_stackheap_outer.o(.text)
    exit                                     0x08000689   Thumb Code    18  exit.o(.text)
    __user_libspace                          0x0800069d   Thumb Code     8  libspace.o(.text)
    __user_perproc_libspace                  0x0800069d   Thumb Code     0  libspace.o(.text)
    __user_perthread_libspace                0x0800069d   Thumb Code     0  libspace.o(.text)
    _sys_exit                                0x080006a5   Thumb Code     8  sys_exit.o(.text)
    __I$use$semihosting                      0x080006b1   Thumb Code     0  use_no_semi.o(.text)
    __use_no_semihosting_swi                 0x080006b1   Thumb Code     2  use_no_semi.o(.text)
    __semihosting_library_function           0x080006b3   Thumb Code     0  indicate_semi.o(.text)
    EvrRtxDelay                              0x080007a1   Thumb Code     8  rtx_evr.o(.text.EvrRtxDelay)
    EvrRtxDelayCompleted                     0x080007a9   Thumb Code     8  rtx_evr.o(.text.EvrRtxDelayCompleted)
    EvrRtxDelayError                         0x080007b1   Thumb Code     8  rtx_evr.o(.text.EvrRtxDelayError)
    EvrRtxDelayStarted                       0x080007b9   Thumb Code     8  rtx_evr.o(.text.EvrRtxDelayStarted)
    EvrRtxEventFlagsWaitTimeout              0x080007c1   Thumb Code     8  rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout)
    EvrRtxKernelError                        0x080007c9   Thumb Code     8  rtx_evr.o(.text.EvrRtxKernelError)
    EvrRtxKernelErrorNotify                  0x080007d1   Thumb Code    10  rtx_evr.o(.text.EvrRtxKernelErrorNotify)
    EvrRtxKernelGetState                     0x080007e1   Thumb Code     8  rtx_evr.o(.text.EvrRtxKernelGetState)
    EvrRtxKernelGetTickCount                 0x080007e9   Thumb Code     8  rtx_evr.o(.text.EvrRtxKernelGetTickCount)
    EvrRtxKernelInitialize                   0x080007f1   Thumb Code     2  rtx_evr.o(.text.EvrRtxKernelInitialize)
    EvrRtxKernelInitialized                  0x080007f9   Thumb Code     2  rtx_evr.o(.text.EvrRtxKernelInitialized)
    EvrRtxKernelStart                        0x08000801   Thumb Code     2  rtx_evr.o(.text.EvrRtxKernelStart)
    EvrRtxKernelStarted                      0x08000809   Thumb Code     2  rtx_evr.o(.text.EvrRtxKernelStarted)
    EvrRtxMemoryAlloc                        0x08000811   Thumb Code    14  rtx_evr.o(.text.EvrRtxMemoryAlloc)
    EvrRtxMemoryBlockAlloc                   0x08000821   Thumb Code    10  rtx_evr.o(.text.EvrRtxMemoryBlockAlloc)
    EvrRtxMemoryBlockFree                    0x08000831   Thumb Code    12  rtx_evr.o(.text.EvrRtxMemoryBlockFree)
    EvrRtxMemoryBlockInit                    0x08000841   Thumb Code    14  rtx_evr.o(.text.EvrRtxMemoryBlockInit)
    EvrRtxMemoryFree                         0x08000851   Thumb Code    12  rtx_evr.o(.text.EvrRtxMemoryFree)
    EvrRtxMemoryInit                         0x08000861   Thumb Code    12  rtx_evr.o(.text.EvrRtxMemoryInit)
    EvrRtxMemoryPoolAllocTimeout             0x08000871   Thumb Code     8  rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout)
    EvrRtxMessageQueueCreated                0x08000879   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueCreated)
    EvrRtxMessageQueueError                  0x08000889   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueError)
    EvrRtxMessageQueueGet                    0x08000899   Thumb Code    14  rtx_evr.o(.text.EvrRtxMessageQueueGet)
    EvrRtxMessageQueueGetPending             0x080008a9   Thumb Code    12  rtx_evr.o(.text.EvrRtxMessageQueueGetPending)
    EvrRtxMessageQueueGetTimeout             0x080008b9   Thumb Code     8  rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout)
    EvrRtxMessageQueueInsertPending          0x080008c1   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueInsertPending)
    EvrRtxMessageQueueInserted               0x080008d1   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueInserted)
    EvrRtxMessageQueueNotInserted            0x080008e1   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueNotInserted)
    EvrRtxMessageQueueNotRetrieved           0x080008f1   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved)
    EvrRtxMessageQueuePut                    0x08000901   Thumb Code    16  rtx_evr.o(.text.EvrRtxMessageQueuePut)
    EvrRtxMessageQueuePutPending             0x08000911   Thumb Code    12  rtx_evr.o(.text.EvrRtxMessageQueuePutPending)
    EvrRtxMessageQueuePutTimeout             0x08000921   Thumb Code     8  rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout)
    EvrRtxMessageQueueRetrieved              0x08000929   Thumb Code    10  rtx_evr.o(.text.EvrRtxMessageQueueRetrieved)
    EvrRtxMutexAcquireTimeout                0x08000939   Thumb Code     8  rtx_evr.o(.text.EvrRtxMutexAcquireTimeout)
    EvrRtxMutexAcquired                      0x08000941   Thumb Code    10  rtx_evr.o(.text.EvrRtxMutexAcquired)
    EvrRtxMutexReleased                      0x08000951   Thumb Code    10  rtx_evr.o(.text.EvrRtxMutexReleased)
    EvrRtxSemaphoreAcquireTimeout            0x08000961   Thumb Code     8  rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout)
    EvrRtxThreadBlocked                      0x08000969   Thumb Code    10  rtx_evr.o(.text.EvrRtxThreadBlocked)
    EvrRtxThreadCreated                      0x08000979   Thumb Code    12  rtx_evr.o(.text.EvrRtxThreadCreated)
    EvrRtxThreadDestroyed                    0x08000989   Thumb Code     8  rtx_evr.o(.text.EvrRtxThreadDestroyed)
    EvrRtxThreadError                        0x08000991   Thumb Code    10  rtx_evr.o(.text.EvrRtxThreadError)
    EvrRtxThreadExit                         0x080009a1   Thumb Code     2  rtx_evr.o(.text.EvrRtxThreadExit)
    EvrRtxThreadFlagsWaitCompleted           0x080009a9   Thumb Code    14  rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted)
    EvrRtxThreadFlagsWaitTimeout             0x080009b9   Thumb Code     8  rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout)
    EvrRtxThreadJoined                       0x080009c1   Thumb Code     8  rtx_evr.o(.text.EvrRtxThreadJoined)
    EvrRtxThreadNew                          0x080009c9   Thumb Code    12  rtx_evr.o(.text.EvrRtxThreadNew)
    EvrRtxThreadPreempted                    0x080009d9   Thumb Code     8  rtx_evr.o(.text.EvrRtxThreadPreempted)
    EvrRtxThreadSwitched                     0x080009e1   Thumb Code     8  rtx_evr.o(.text.EvrRtxThreadSwitched)
    EvrRtxThreadUnblocked                    0x080009e9   Thumb Code    10  rtx_evr.o(.text.EvrRtxThreadUnblocked)
    EvrRtxThreadWatchdogExpired              0x080009f9   Thumb Code     8  rtx_evr.o(.text.EvrRtxThreadWatchdogExpired)
    EvrRtxThreadYield                        0x08000a01   Thumb Code     2  rtx_evr.o(.text.EvrRtxThreadYield)
    EvrRtxTimerCallback                      0x08000a09   Thumb Code    10  rtx_evr.o(.text.EvrRtxTimerCallback)
    HAL_GPIO_Init                            0x08000a19   Thumb Code  1004  stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init)
    HAL_GPIO_WritePin                        0x08000e09   Thumb Code    46  stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin)
    HAL_GetTick                              0x08000e39   Thumb Code   102  main.o(.text.HAL_GetTick)
    HAL_Init                                 0x08000ea1   Thumb Code    46  stm32f7xx_hal.o(.text.HAL_Init)
    HAL_InitTick                             0x08000ed1   Thumb Code    10  main.o(.text.HAL_InitTick)
    HAL_MPU_ConfigRegion                     0x08000ee1   Thumb Code   158  stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion)
    HAL_MPU_Disable                          0x08000f81   Thumb Code    34  stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable)
    HAL_MPU_Enable                           0x08000fa9   Thumb Code    48  stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable)
    HAL_MspInit                              0x08000fd9   Thumb Code     2  stm32f7xx_hal.o(.text.HAL_MspInit)
    HAL_NVIC_SetPriorityGrouping             0x08000fe1   Thumb Code    16  stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping)
    HAL_PWREx_EnableOverDrive                0x08000ff1   Thumb Code   198  stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive)
    HAL_RCC_ClockConfig                      0x080010b9   Thumb Code   620  stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig)
    HAL_RCC_GetSysClockFreq                  0x08001329   Thumb Code   230  stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq)
    HAL_RCC_OscConfig                        0x08001411   Thumb Code  1816  stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig)
    Init_Thread                              0x08001b29   Thumb Code    58  thread.o(.text.Init_Thread)
    LED_Initialize                           0x08001d99   Thumb Code   130  led_756g_eval.o(.text.LED_Initialize)
    LED_Off                                  0x08001e21   Thumb Code    60  led_756g_eval.o(.text.LED_Off)
    LED_On                                   0x08001e61   Thumb Code    60  led_756g_eval.o(.text.LED_On)
    OS_Tick_AcknowledgeIRQ                   0x08002069   Thumb Code    12  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    OS_Tick_Enable                           0x08002079   Thumb Code    60  os_systick.o(.text.OS_Tick_Enable)
    OS_Tick_GetIRQn                          0x080020b9   Thumb Code     6  os_systick.o(.text.OS_Tick_GetIRQn)
    OS_Tick_Setup                            0x080020c1   Thumb Code   126  os_systick.o(.text.OS_Tick_Setup)
    SystemCoreClockUpdate                    0x08002281   Thumb Code   302  system_stm32f7xx.o(.text.SystemCoreClockUpdate)
    SystemInit                               0x080023b1   Thumb Code    18  system_stm32f7xx.o(.text.SystemInit)
    Thread                                   0x080023c9   Thumb Code    44  thread.o(.text.Thread)
    _platform_post_stackheap_init            0x08002591   Thumb Code     8  rtx_lib.o(.text._platform_post_stackheap_init)
    main                                     0x080029d9   Thumb Code    48  main.o(.text.main)
    osDelay                                  0x08002a09   Thumb Code    84  rtx_delay.o(.text.osDelay)
    osKernelGetState                         0x08002a61   Thumb Code    66  rtx_kernel.o(.text.osKernelGetState)
    osKernelGetTickCount                     0x08002aa9   Thumb Code    58  rtx_kernel.o(.text.osKernelGetTickCount)
    osKernelInitialize                       0x08002ae9   Thumb Code    74  rtx_kernel.o(.text.osKernelInitialize)
    osKernelStart                            0x08002b39   Thumb Code    70  rtx_kernel.o(.text.osKernelStart)
    osMessageQueueGet                        0x08002b81   Thumb Code   126  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueuePut                        0x08002c01   Thumb Code   138  rtx_msgqueue.o(.text.osMessageQueuePut)
    osRtxErrorNotify                         0x08002c91   Thumb Code    48  rtx_config.o(.text.osRtxErrorNotify)
    osRtxIdleThread                          0x08002cd1   Thumb Code     8  rtx_config.o(.text.osRtxIdleThread)
    osRtxKernelBeforeInit                    0x08002cd9   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelBeforeInit)
    osRtxKernelErrorNotify                   0x08002ce1   Thumb Code    28  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    osRtxMemoryAlloc                         0x08002d31   Thumb Code   332  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x08002e81   Thumb Code   194  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x08002f49   Thumb Code   150  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x08002fe1   Thumb Code    74  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x08003031   Thumb Code   100  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x08003099   Thumb Code   152  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueueTimerSetup              0x080032a9   Thumb Code    62  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    osRtxMutexOwnerRelease                   0x080032f9   Thumb Code   152  rtx_mutex.o(.text.osRtxMutexOwnerRelease)
    osRtxMutexOwnerRestore                   0x08003391   Thumb Code   172  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    osRtxPendSV_Handler                      0x08003481   Thumb Code   184  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x08003539   Thumb Code    66  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadBeforeFree                    0x08003591   Thumb Code     8  rtx_thread.o(.text.osRtxThreadBeforeFree)
    osRtxThreadDelayRemove                   0x08003721   Thumb Code   156  rtx_thread.o(.text.osRtxThreadDelayRemove)
    osRtxThreadDelayTick                     0x080037c1   Thumb Code   336  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDestroy                       0x08003911   Thumb Code    96  rtx_thread.o(.text.osRtxThreadDestroy)
    osRtxThreadDispatch                      0x08003971   Thumb Code   150  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadJoinWakeup                    0x08003af1   Thumb Code    60  rtx_thread.o(.text.osRtxThreadJoinWakeup)
    osRtxThreadListGet                       0x08003b31   Thumb Code    54  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x08003b69   Thumb Code   118  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x08003be1   Thumb Code    50  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListSort                      0x08003c41   Thumb Code    88  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadReadyPut                      0x08003d01   Thumb Code    32  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x08003d21   Thumb Code    34  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadStackCheck                    0x08003d79   Thumb Code    60  rtx_thread.o(.text.osRtxThreadStackCheck)
    osRtxThreadStartup                       0x08003db9   Thumb Code   150  rtx_thread.o(.text.osRtxThreadStartup)
    osRtxThreadSwitch                        0x08003e51   Thumb Code    46  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x08003e81   Thumb Code   118  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x08003ef9   Thumb Code    70  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxThreadWatchdogRemove                0x08003fd9   Thumb Code   132  rtx_thread.o(.text.osRtxThreadWatchdogRemove)
    osRtxThreadWatchdogTick                  0x08004061   Thumb Code   248  rtx_thread.o(.text.osRtxThreadWatchdogTick)
    osRtxTick_Handler                        0x08004159   Thumb Code   276  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerSetup                          0x08004271   Thumb Code    48  rtx_timer.o(.text.osRtxTimerSetup)
    osRtxTimerThread                         0x080042a1   Thumb Code    50  rtx_timer.o(.text.osRtxTimerThread)
    osThreadExit                             0x080043c9   Thumb Code    36  rtx_thread.o(.text.osThreadExit)
    osThreadNew                              0x080043f1   Thumb Code   114  rtx_thread.o(.text.osThreadNew)
    osThreadYield                            0x08004469   Thumb Code    72  rtx_thread.o(.text.osThreadYield)
    osWatchdogAlarm_Handler                  0x080044b1   Thumb Code    10  rtx_lib.o(.text.osWatchdogAlarm_Handler)
    osZoneSetup_Callback                     0x080044c1   Thumb Code     8  rtx_lib.o(.text.osZoneSetup_Callback)
    _fp_init                                 0x080055db   Thumb Code    26  fpinit.o(x$fpl$fpinit)
    __fplib_config_fpu_vfp                   0x080055f3   Thumb Code     0  fpinit.o(x$fpl$fpinit)
    __fplib_config_pureend_doubles           0x080055f3   Thumb Code     0  fpinit.o(x$fpl$fpinit)
    osRtxConfig                              0x080055f4   Data         112  rtx_lib.o(.rodata)
    os_cb_sections                           0x08005664   Data          56  rtx_lib.o(.rodata)
    AHBPrescTable                            0x0800569c   Data          16  system_stm32f7xx.o(.rodata.AHBPrescTable)
    osRtxUserSVC                             0x080056bc   Data           4  rtx_lib.o(.rodata.osRtxUserSVC)
    Region$$Table$$Base                      0x0800572c   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x0800574c   Number         0  anon$$obj.o(Region$$Table)
    SystemCoreClock                          0x20010000   Data           4  system_stm32f7xx.o(.data.SystemCoreClock)
    osRtxInfo                                0x20010004   Data         164  rtx_kernel.o(.data.os)
    uwTickPrio                               0x200100ec   Data           4  stm32f7xx_hal.o(.data.uwTickPrio)
    __libspace_start                         0x200100f0   Data          96  libspace.o(.bss)
    __temporary_stack_top$libspace           0x20010150   Data           0  libspace.o(.bss)
    .bss.os.msgqueue.cb$$Base                0x2001819c   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x200181d0   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x20018220   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x200182c0   Number         0  rtx_lib.o(.bss.os.thread.cb)
    tid_Thread                               0x200186c0   Data           4  thread.o(.bss.tid_Thread)



==============================================================================

Memory Map of the image

  Image Entry point : 0x080001c9

  Load Region LR_IROM1 (Base: 0x08000000, Size: 0x00005840, Max: 0x00100000, ABSOLUTE)

    Execution Region ER_IROM1 (Exec base: 0x08000000, Load base: 0x08000000, Size: 0x0000574c, Max: 0x00100000, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x08000000   0x08000000   0x000001c8   Data   RO         1620    RESET               startup_stm32f746xx.o
    0x080001c8   0x080001c8   0x00000008   Code   RO         1653  * !!!main             c_w.l(__main.o)
    0x080001d0   0x080001d0   0x00000034   Code   RO         1828    !!!scatter          c_w.l(__scatter.o)
    0x08000204   0x08000204   0x0000001a   Code   RO         1830    !!handler_copy      c_w.l(__scatter_copy.o)
    0x0800021e   0x0800021e   0x00000002   PAD
    0x08000220   0x08000220   0x0000001c   Code   RO         1832    !!handler_zi        c_w.l(__scatter_zi.o)
    0x0800023c   0x0800023c   0x00000002   Code   RO         1690    .ARM.Collect$$libinit$$00000000  c_w.l(libinit.o)
    0x0800023e   0x0800023e   0x00000004   Code   RO         1702    .ARM.Collect$$libinit$$00000001  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1705    .ARM.Collect$$libinit$$00000004  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1707    .ARM.Collect$$libinit$$00000006  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1710    .ARM.Collect$$libinit$$0000000C  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1712    .ARM.Collect$$libinit$$0000000E  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1714    .ARM.Collect$$libinit$$00000010  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1717    .ARM.Collect$$libinit$$00000013  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1719    .ARM.Collect$$libinit$$00000015  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1721    .ARM.Collect$$libinit$$00000017  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1723    .ARM.Collect$$libinit$$00000019  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1725    .ARM.Collect$$libinit$$0000001B  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1727    .ARM.Collect$$libinit$$0000001D  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1729    .ARM.Collect$$libinit$$0000001F  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1731    .ARM.Collect$$libinit$$00000021  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1733    .ARM.Collect$$libinit$$00000023  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1735    .ARM.Collect$$libinit$$00000025  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1737    .ARM.Collect$$libinit$$00000027  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1741    .ARM.Collect$$libinit$$0000002E  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1743    .ARM.Collect$$libinit$$00000030  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1745    .ARM.Collect$$libinit$$00000032  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000000   Code   RO         1747    .ARM.Collect$$libinit$$00000034  c_w.l(libinit2.o)
    0x08000242   0x08000242   0x00000002   Code   RO         1748    .ARM.Collect$$libinit$$00000035  c_w.l(libinit2.o)
    0x08000244   0x08000244   0x00000002   Code   RO         1783    .ARM.Collect$$libshutdown$$00000000  c_w.l(libshutdown.o)
    0x08000246   0x08000246   0x00000000   Code   RO         1811    .ARM.Collect$$libshutdown$$00000002  c_w.l(libshutdown2.o)
    0x08000246   0x08000246   0x00000000   Code   RO         1813    .ARM.Collect$$libshutdown$$00000004  c_w.l(libshutdown2.o)
    0x08000246   0x08000246   0x00000000   Code   RO         1816    .ARM.Collect$$libshutdown$$00000007  c_w.l(libshutdown2.o)
    0x08000246   0x08000246   0x00000000   Code   RO         1819    .ARM.Collect$$libshutdown$$0000000A  c_w.l(libshutdown2.o)
    0x08000246   0x08000246   0x00000000   Code   RO         1821    .ARM.Collect$$libshutdown$$0000000C  c_w.l(libshutdown2.o)
    0x08000246   0x08000246   0x00000000   Code   RO         1824    .ARM.Collect$$libshutdown$$0000000F  c_w.l(libshutdown2.o)
    0x08000246   0x08000246   0x00000002   Code   RO         1825    .ARM.Collect$$libshutdown$$00000010  c_w.l(libshutdown2.o)
    0x08000248   0x08000248   0x00000000   Code   RO         1655    .ARM.Collect$$rtentry$$00000000  c_w.l(__rtentry.o)
    0x08000248   0x08000248   0x00000000   Code   RO         1663    .ARM.Collect$$rtentry$$00000002  c_w.l(__rtentry2.o)
    0x08000248   0x08000248   0x00000006   Code   RO         1675    .ARM.Collect$$rtentry$$00000004  c_w.l(__rtentry4.o)
    0x0800024e   0x0800024e   0x00000008   Code   RO         1664    .ARM.Collect$$rtentry$$00000008  c_w.l(__rtentry2.o)
    0x08000256   0x08000256   0x00000004   Code   RO         1666    .ARM.Collect$$rtentry$$0000000A  c_w.l(__rtentry2.o)
    0x0800025a   0x0800025a   0x00000000   Code   RO         1668    .ARM.Collect$$rtentry$$0000000C  c_w.l(__rtentry2.o)
    0x0800025a   0x0800025a   0x00000008   Code   RO         1669    .ARM.Collect$$rtentry$$0000000D  c_w.l(__rtentry2.o)
    0x08000262   0x08000262   0x00000002   Code   RO         1694    .ARM.Collect$$rtexit$$00000000  c_w.l(rtexit.o)
    0x08000264   0x08000264   0x00000000   Code   RO         1754    .ARM.Collect$$rtexit$$00000002  c_w.l(rtexit2.o)
    0x08000264   0x08000264   0x00000004   Code   RO         1755    .ARM.Collect$$rtexit$$00000003  c_w.l(rtexit2.o)
    0x08000268   0x08000268   0x00000006   Code   RO         1756    .ARM.Collect$$rtexit$$00000004  c_w.l(rtexit2.o)
    0x0800026e   0x0800026e   0x00000002   PAD
    0x08000270   0x08000270   0x00000118   Code   RO           56    .text               irq_armv7m.o
    0x08000388   0x08000388   0x00000040   Code   RO         1621    .text               startup_stm32f746xx.o
    0x080003c8   0x080003c8   0x000000f0   Code   RO         1643    .text               c_w.l(lludivv7m.o)
    0x080004b8   0x080004b8   0x0000008a   Code   RO         1645    .text               c_w.l(rt_memcpy_v6.o)
    0x08000542   0x08000542   0x00000044   Code   RO         1647    .text               c_w.l(rt_memclr.o)
    0x08000586   0x08000586   0x0000004e   Code   RO         1649    .text               c_w.l(rt_memclr_w.o)
    0x080005d4   0x080005d4   0x00000006   Code   RO         1651    .text               c_w.l(heapauxi.o)
    0x080005da   0x080005da   0x00000064   Code   RO         1660    .text               c_w.l(rt_memcpy_w.o)
    0x0800063e   0x0800063e   0x0000004a   Code   RO         1679    .text               c_w.l(sys_stackheap_outer.o)
    0x08000688   0x08000688   0x00000012   Code   RO         1681    .text               c_w.l(exit.o)
    0x0800069a   0x0800069a   0x00000002   PAD
    0x0800069c   0x0800069c   0x00000008   Code   RO         1691    .text               c_w.l(libspace.o)
    0x080006a4   0x080006a4   0x0000000c   Code   RO         1749    .text               c_w.l(sys_exit.o)
    0x080006b0   0x080006b0   0x00000002   Code   RO         1772    .text               c_w.l(use_no_semi.o)
    0x080006b2   0x080006b2   0x00000000   Code   RO         1774    .text               c_w.l(indicate_semi.o)
    0x080006b2   0x080006b2   0x00000006   PAD
    0x080006b8   0x080006b8   0x000000de   Code   RO           10    .text.CPU_CACHE_Enable  main.o
    0x08000796   0x08000796   0x00000002   PAD
    0x08000798   0x08000798   0x00000004   Code   RO           14    .text.Error_Handler  main.o
    0x0800079c   0x0800079c   0x00000004   PAD
    0x080007a0   0x080007a0   0x00000008   Code   RO          322    .text.EvrRtxDelay   rtx_evr.o
    0x080007a8   0x080007a8   0x00000008   Code   RO          330    .text.EvrRtxDelayCompleted  rtx_evr.o
    0x080007b0   0x080007b0   0x00000008   Code   RO          320    .text.EvrRtxDelayError  rtx_evr.o
    0x080007b8   0x080007b8   0x00000008   Code   RO          326    .text.EvrRtxDelayStarted  rtx_evr.o
    0x080007c0   0x080007c0   0x00000008   Code   RO          378    .text.EvrRtxEventFlagsWaitTimeout  rtx_evr.o
    0x080007c8   0x080007c8   0x00000008   Code   RO          166    .text.EvrRtxKernelError  rtx_evr.o
    0x080007d0   0x080007d0   0x0000000a   Code   RO          214    .text.EvrRtxKernelErrorNotify  rtx_evr.o
    0x080007da   0x080007da   0x00000006   PAD
    0x080007e0   0x080007e0   0x00000008   Code   RO          176    .text.EvrRtxKernelGetState  rtx_evr.o
    0x080007e8   0x080007e8   0x00000008   Code   RO          206    .text.EvrRtxKernelGetTickCount  rtx_evr.o
    0x080007f0   0x080007f0   0x00000002   Code   RO          168    .text.EvrRtxKernelInitialize  rtx_evr.o
    0x080007f2   0x080007f2   0x00000006   PAD
    0x080007f8   0x080007f8   0x00000002   Code   RO          170    .text.EvrRtxKernelInitialized  rtx_evr.o
    0x080007fa   0x080007fa   0x00000006   PAD
    0x08000800   0x08000800   0x00000002   Code   RO          178    .text.EvrRtxKernelStart  rtx_evr.o
    0x08000802   0x08000802   0x00000006   PAD
    0x08000808   0x08000808   0x00000002   Code   RO          180    .text.EvrRtxKernelStarted  rtx_evr.o
    0x0800080a   0x0800080a   0x00000006   PAD
    0x08000810   0x08000810   0x0000000e   Code   RO          156    .text.EvrRtxMemoryAlloc  rtx_evr.o
    0x0800081e   0x0800081e   0x00000002   PAD
    0x08000820   0x08000820   0x0000000a   Code   RO          162    .text.EvrRtxMemoryBlockAlloc  rtx_evr.o
    0x0800082a   0x0800082a   0x00000006   PAD
    0x08000830   0x08000830   0x0000000c   Code   RO          164    .text.EvrRtxMemoryBlockFree  rtx_evr.o
    0x0800083c   0x0800083c   0x00000004   PAD
    0x08000840   0x08000840   0x0000000e   Code   RO          160    .text.EvrRtxMemoryBlockInit  rtx_evr.o
    0x0800084e   0x0800084e   0x00000002   PAD
    0x08000850   0x08000850   0x0000000c   Code   RO          158    .text.EvrRtxMemoryFree  rtx_evr.o
    0x0800085c   0x0800085c   0x00000004   PAD
    0x08000860   0x08000860   0x0000000c   Code   RO          154    .text.EvrRtxMemoryInit  rtx_evr.o
    0x0800086c   0x0800086c   0x00000004   PAD
    0x08000870   0x08000870   0x00000008   Code   RO          456    .text.EvrRtxMemoryPoolAllocTimeout  rtx_evr.o
    0x08000878   0x08000878   0x0000000a   Code   RO          484    .text.EvrRtxMessageQueueCreated  rtx_evr.o
    0x08000882   0x08000882   0x00000006   PAD
    0x08000888   0x08000888   0x0000000a   Code   RO          480    .text.EvrRtxMessageQueueError  rtx_evr.o
    0x08000892   0x08000892   0x00000006   PAD
    0x08000898   0x08000898   0x0000000e   Code   RO          500    .text.EvrRtxMessageQueueGet  rtx_evr.o
    0x080008a6   0x080008a6   0x00000002   PAD
    0x080008a8   0x080008a8   0x0000000c   Code   RO          502    .text.EvrRtxMessageQueueGetPending  rtx_evr.o
    0x080008b4   0x080008b4   0x00000004   PAD
    0x080008b8   0x080008b8   0x00000008   Code   RO          504    .text.EvrRtxMessageQueueGetTimeout  rtx_evr.o
    0x080008c0   0x080008c0   0x0000000a   Code   RO          494    .text.EvrRtxMessageQueueInsertPending  rtx_evr.o
    0x080008ca   0x080008ca   0x00000006   PAD
    0x080008d0   0x080008d0   0x0000000a   Code   RO          496    .text.EvrRtxMessageQueueInserted  rtx_evr.o
    0x080008da   0x080008da   0x00000006   PAD
    0x080008e0   0x080008e0   0x0000000a   Code   RO          498    .text.EvrRtxMessageQueueNotInserted  rtx_evr.o
    0x080008ea   0x080008ea   0x00000006   PAD
    0x080008f0   0x080008f0   0x0000000a   Code   RO          508    .text.EvrRtxMessageQueueNotRetrieved  rtx_evr.o
    0x080008fa   0x080008fa   0x00000006   PAD
    0x08000900   0x08000900   0x00000010   Code   RO          488    .text.EvrRtxMessageQueuePut  rtx_evr.o
    0x08000910   0x08000910   0x0000000c   Code   RO          490    .text.EvrRtxMessageQueuePutPending  rtx_evr.o
    0x0800091c   0x0800091c   0x00000004   PAD
    0x08000920   0x08000920   0x00000008   Code   RO          492    .text.EvrRtxMessageQueuePutTimeout  rtx_evr.o
    0x08000928   0x08000928   0x0000000a   Code   RO          506    .text.EvrRtxMessageQueueRetrieved  rtx_evr.o
    0x08000932   0x08000932   0x00000006   PAD
    0x08000938   0x08000938   0x00000008   Code   RO          400    .text.EvrRtxMutexAcquireTimeout  rtx_evr.o
    0x08000940   0x08000940   0x0000000a   Code   RO          402    .text.EvrRtxMutexAcquired  rtx_evr.o
    0x0800094a   0x0800094a   0x00000006   PAD
    0x08000950   0x08000950   0x0000000a   Code   RO          408    .text.EvrRtxMutexReleased  rtx_evr.o
    0x0800095a   0x0800095a   0x00000006   PAD
    0x08000960   0x08000960   0x00000008   Code   RO          428    .text.EvrRtxSemaphoreAcquireTimeout  rtx_evr.o
    0x08000968   0x08000968   0x0000000a   Code   RO          264    .text.EvrRtxThreadBlocked  rtx_evr.o
    0x08000972   0x08000972   0x00000006   PAD
    0x08000978   0x08000978   0x0000000c   Code   RO          222    .text.EvrRtxThreadCreated  rtx_evr.o
    0x08000984   0x08000984   0x00000004   PAD
    0x08000988   0x08000988   0x00000008   Code   RO          276    .text.EvrRtxThreadDestroyed  rtx_evr.o
    0x08000990   0x08000990   0x0000000a   Code   RO          218    .text.EvrRtxThreadError  rtx_evr.o
    0x0800099a   0x0800099a   0x00000006   PAD
    0x080009a0   0x080009a0   0x00000002   Code   RO          272    .text.EvrRtxThreadExit  rtx_evr.o
    0x080009a2   0x080009a2   0x00000006   PAD
    0x080009a8   0x080009a8   0x0000000e   Code   RO          316    .text.EvrRtxThreadFlagsWaitCompleted  rtx_evr.o
    0x080009b6   0x080009b6   0x00000002   PAD
    0x080009b8   0x080009b8   0x00000008   Code   RO          314    .text.EvrRtxThreadFlagsWaitTimeout  rtx_evr.o
    0x080009c0   0x080009c0   0x00000008   Code   RO          262    .text.EvrRtxThreadJoined  rtx_evr.o
    0x080009c8   0x080009c8   0x0000000c   Code   RO          220    .text.EvrRtxThreadNew  rtx_evr.o
    0x080009d4   0x080009d4   0x00000004   PAD
    0x080009d8   0x080009d8   0x00000008   Code   RO          268    .text.EvrRtxThreadPreempted  rtx_evr.o
    0x080009e0   0x080009e0   0x00000008   Code   RO          270    .text.EvrRtxThreadSwitched  rtx_evr.o
    0x080009e8   0x080009e8   0x0000000a   Code   RO          266    .text.EvrRtxThreadUnblocked  rtx_evr.o
    0x080009f2   0x080009f2   0x00000006   PAD
    0x080009f8   0x080009f8   0x00000008   Code   RO          296    .text.EvrRtxThreadWatchdogExpired  rtx_evr.o
    0x08000a00   0x08000a00   0x00000002   Code   RO          244    .text.EvrRtxThreadYield  rtx_evr.o
    0x08000a02   0x08000a02   0x00000006   PAD
    0x08000a08   0x08000a08   0x0000000a   Code   RO          334    .text.EvrRtxTimerCallback  rtx_evr.o
    0x08000a12   0x08000a12   0x00000006   PAD
    0x08000a18   0x08000a18   0x000003ec   Code   RO         1466    .text.HAL_GPIO_Init  stm32f7xx_hal_gpio.o
    0x08000e04   0x08000e04   0x00000004   PAD
    0x08000e08   0x08000e08   0x0000002e   Code   RO         1472    .text.HAL_GPIO_WritePin  stm32f7xx_hal_gpio.o
    0x08000e36   0x08000e36   0x00000002   PAD
    0x08000e38   0x08000e38   0x00000066   Code   RO            2    .text.HAL_GetTick   main.o
    0x08000e9e   0x08000e9e   0x00000002   PAD
    0x08000ea0   0x08000ea0   0x0000002e   Code   RO         1327    .text.HAL_Init      stm32f7xx_hal.o
    0x08000ece   0x08000ece   0x00000002   PAD
    0x08000ed0   0x08000ed0   0x0000000a   Code   RO            4    .text.HAL_InitTick  main.o
    0x08000eda   0x08000eda   0x00000006   PAD
    0x08000ee0   0x08000ee0   0x0000009e   Code   RO         1427    .text.HAL_MPU_ConfigRegion  stm32f7xx_hal_cortex.o
    0x08000f7e   0x08000f7e   0x00000002   PAD
    0x08000f80   0x08000f80   0x00000022   Code   RO         1423    .text.HAL_MPU_Disable  stm32f7xx_hal_cortex.o
    0x08000fa2   0x08000fa2   0x00000006   PAD
    0x08000fa8   0x08000fa8   0x00000030   Code   RO         1425    .text.HAL_MPU_Enable  stm32f7xx_hal_cortex.o
    0x08000fd8   0x08000fd8   0x00000002   Code   RO         1331    .text.HAL_MspInit   stm32f7xx_hal.o
    0x08000fda   0x08000fda   0x00000006   PAD
    0x08000fe0   0x08000fe0   0x00000010   Code   RO         1395    .text.HAL_NVIC_SetPriorityGrouping  stm32f7xx_hal_cortex.o
    0x08000ff0   0x08000ff0   0x000000c6   Code   RO         1546    .text.HAL_PWREx_EnableOverDrive  stm32f7xx_hal_pwr_ex.o
    0x080010b6   0x080010b6   0x00000002   PAD
    0x080010b8   0x080010b8   0x0000026c   Code   RO         1567    .text.HAL_RCC_ClockConfig  stm32f7xx_hal_rcc.o
    0x08001324   0x08001324   0x00000004   PAD
    0x08001328   0x08001328   0x000000e6   Code   RO         1569    .text.HAL_RCC_GetSysClockFreq  stm32f7xx_hal_rcc.o
    0x0800140e   0x0800140e   0x00000002   PAD
    0x08001410   0x08001410   0x00000718   Code   RO         1565    .text.HAL_RCC_OscConfig  stm32f7xx_hal_rcc.o
    0x08001b28   0x08001b28   0x0000003a   Code   RO           25    .text.Init_Thread   thread.o
    0x08001b62   0x08001b62   0x00000006   PAD
    0x08001b68   0x08001b68   0x000000a2   Code   RO         1155    .text.IsClassMappingValid  rtx_thread.o
    0x08001c0a   0x08001c0a   0x00000006   PAD
    0x08001c10   0x08001c10   0x00000014   Code   RO           66    .text.IsException   rtx_delay.o
    0x08001c24   0x08001c24   0x00000004   PAD
    0x08001c28   0x08001c28   0x00000014   Code   RO          539    .text.IsException   rtx_kernel.o
    0x08001c3c   0x08001c3c   0x00000004   PAD
    0x08001c40   0x08001c40   0x00000014   Code   RO          779    .text.IsException   rtx_msgqueue.o
    0x08001c54   0x08001c54   0x00000004   PAD
    0x08001c58   0x08001c58   0x00000014   Code   RO         1071    .text.IsException   rtx_thread.o
    0x08001c6c   0x08001c6c   0x00000004   PAD
    0x08001c70   0x08001c70   0x0000002e   Code   RO           68    .text.IsIrqMasked   rtx_delay.o
    0x08001c9e   0x08001c9e   0x00000002   PAD
    0x08001ca0   0x08001ca0   0x0000002e   Code   RO          541    .text.IsIrqMasked   rtx_kernel.o
    0x08001cce   0x08001cce   0x00000002   PAD
    0x08001cd0   0x08001cd0   0x0000002e   Code   RO          781    .text.IsIrqMasked   rtx_msgqueue.o
    0x08001cfe   0x08001cfe   0x00000002   PAD
    0x08001d00   0x08001d00   0x0000002e   Code   RO         1073    .text.IsIrqMasked   rtx_thread.o
    0x08001d2e   0x08001d2e   0x00000002   PAD
    0x08001d30   0x08001d30   0x00000022   Code   RO          817    .text.IsMessageQueuePtrValid  rtx_msgqueue.o
    0x08001d52   0x08001d52   0x00000006   PAD
    0x08001d58   0x08001d58   0x00000014   Code   RO          545    .text.IsPrivileged  rtx_kernel.o
    0x08001d6c   0x08001d6c   0x00000004   PAD
    0x08001d70   0x08001d70   0x00000022   Code   RO         1153    .text.IsThreadPtrValid  rtx_thread.o
    0x08001d92   0x08001d92   0x00000006   PAD
    0x08001d98   0x08001d98   0x00000082   Code   RO           37    .text.LED_Initialize  led_756g_eval.o
    0x08001e1a   0x08001e1a   0x00000006   PAD
    0x08001e20   0x08001e20   0x0000003c   Code   RO           43    .text.LED_Off       led_756g_eval.o
    0x08001e5c   0x08001e5c   0x00000004   PAD
    0x08001e60   0x08001e60   0x0000003c   Code   RO           41    .text.LED_On        led_756g_eval.o
    0x08001e9c   0x08001e9c   0x00000004   PAD
    0x08001ea0   0x08001ea0   0x0000004e   Code   RO            8    .text.MPU_Config    main.o
    0x08001eee   0x08001eee   0x00000002   PAD
    0x08001ef0   0x08001ef0   0x00000018   Code   RO          673    .text.MemBlockPtr   rtx_memory.o
    0x08001f08   0x08001f08   0x0000000a   Code   RO          671    .text.MemHeadPtr    rtx_memory.o
    0x08001f12   0x08001f12   0x00000006   PAD
    0x08001f18   0x08001f18   0x00000052   Code   RO          829    .text.MessageQueueGet  rtx_msgqueue.o
    0x08001f6a   0x08001f6a   0x00000006   PAD
    0x08001f70   0x08001f70   0x000000ac   Code   RO          823    .text.MessageQueuePut  rtx_msgqueue.o
    0x0800201c   0x0800201c   0x00000004   PAD
    0x08002020   0x08002020   0x00000042   Code   RO          821    .text.MessageQueueRemove  rtx_msgqueue.o
    0x08002062   0x08002062   0x00000006   PAD
    0x08002068   0x08002068   0x0000000c   Code   RO         1296    .text.OS_Tick_AcknowledgeIRQ  os_systick.o
    0x08002074   0x08002074   0x00000004   PAD
    0x08002078   0x08002078   0x0000003c   Code   RO         1292    .text.OS_Tick_Enable  os_systick.o
    0x080020b4   0x080020b4   0x00000004   PAD
    0x080020b8   0x080020b8   0x00000006   Code   RO         1298    .text.OS_Tick_GetIRQn  os_systick.o
    0x080020be   0x080020be   0x00000002   PAD
    0x080020c0   0x080020c0   0x0000007e   Code   RO         1290    .text.OS_Tick_Setup  os_systick.o
    0x0800213e   0x0800213e   0x00000002   PAD
    0x08002140   0x08002140   0x00000068   Code   RO          603    .text.SVC_Setup     rtx_kernel.o
    0x080021a8   0x080021a8   0x00000010   Code   RO          984    .text.SetPendSV     rtx_system.o
    0x080021b8   0x080021b8   0x00000034   Code   RO         1029    .text.SetPrivileged  rtx_thread.o
    0x080021ec   0x080021ec   0x00000004   PAD
    0x080021f0   0x080021f0   0x00000018   Code   RO         1025    .text.StackOffsetR0  rtx_thread.o
    0x08002208   0x08002208   0x00000078   Code   RO           12    .text.SystemClock_Config  main.o
    0x08002280   0x08002280   0x0000012e   Code   RO         1630    .text.SystemCoreClockUpdate  system_stm32f7xx.o
    0x080023ae   0x080023ae   0x00000002   PAD
    0x080023b0   0x080023b0   0x00000012   Code   RO         1628    .text.SystemInit    system_stm32f7xx.o
    0x080023c2   0x080023c2   0x00000006   PAD
    0x080023c8   0x080023c8   0x0000002c   Code   RO           27    .text.Thread        thread.o
    0x080023f4   0x080023f4   0x00000004   PAD
    0x080023f8   0x080023f8   0x0000007c   Code   RO         1163    .text.ThreadFlagsCheck  rtx_thread.o
    0x08002474   0x08002474   0x00000004   PAD
    0x08002478   0x08002478   0x0000009e   Code   RO         1267    .text.TimerInsert   rtx_timer.o
    0x08002516   0x08002516   0x00000002   PAD
    0x08002518   0x08002518   0x00000028   Code   RO         1263    .text.TimerUnlink   rtx_timer.o
    0x08002540   0x08002540   0x00000010   Code   RO          605    .text.__NVIC_GetPriorityGrouping  rtx_kernel.o
    0x08002550   0x08002550   0x0000003c   Code   RO         1397    .text.__NVIC_SetPriorityGrouping  stm32f7xx_hal_cortex.o
    0x0800258c   0x0800258c   0x00000004   PAD
    0x08002590   0x08002590   0x00000008   Code   RO          648    .text._platform_post_stackheap_init  rtx_lib.o
    0x08002598   0x08002598   0x00000038   Code   RO         1165    .text.atomic_chk32_all  rtx_thread.o
    0x080025d0   0x080025d0   0x00000034   Code   RO         1167    .text.atomic_chk32_any  rtx_thread.o
    0x08002604   0x08002604   0x00000004   PAD
    0x08002608   0x08002608   0x0000002c   Code   RO          986    .text.atomic_dec16_nz  rtx_system.o
    0x08002634   0x08002634   0x00000004   PAD
    0x08002638   0x08002638   0x00000020   Code   RO          698    .text.atomic_dec32  rtx_mempool.o
    0x08002658   0x08002658   0x00000028   Code   RO          831    .text.atomic_dec32_nz  rtx_msgqueue.o
    0x08002680   0x08002680   0x00000034   Code   RO          988    .text.atomic_inc16_lim  rtx_system.o
    0x080026b4   0x080026b4   0x00000004   PAD
    0x080026b8   0x080026b8   0x00000038   Code   RO          992    .text.atomic_inc16_lt  rtx_system.o
    0x080026f0   0x080026f0   0x00000020   Code   RO          692    .text.atomic_inc32  rtx_mempool.o
    0x08002710   0x08002710   0x00000020   Code   RO          825    .text.atomic_inc32  rtx_msgqueue.o
    0x08002730   0x08002730   0x00000028   Code   RO          690    .text.atomic_link_get  rtx_mempool.o
    0x08002758   0x08002758   0x00000030   Code   RO          696    .text.atomic_link_put  rtx_mempool.o
    0x08002788   0x08002788   0x00000028   Code   RO          833    .text.atomic_wr8    rtx_msgqueue.o
    0x080027b0   0x080027b0   0x000000ac   Code   RO          793    .text.isrRtxMessageQueueGet  rtx_msgqueue.o
    0x0800285c   0x0800285c   0x00000004   PAD
    0x08002860   0x08002860   0x000000bc   Code   RO          789    .text.isrRtxMessageQueuePut  rtx_msgqueue.o
    0x0800291c   0x0800291c   0x00000004   PAD
    0x08002920   0x08002920   0x00000054   Code   RO          968    .text.isr_queue_get  rtx_system.o
    0x08002974   0x08002974   0x00000004   PAD
    0x08002978   0x08002978   0x0000005e   Code   RO          982    .text.isr_queue_put  rtx_system.o
    0x080029d6   0x080029d6   0x00000002   PAD
    0x080029d8   0x080029d8   0x00000030   Code   RO            6    .text.main          main.o
    0x08002a08   0x08002a08   0x00000054   Code   RO           64    .text.osDelay       rtx_delay.o
    0x08002a5c   0x08002a5c   0x00000004   PAD
    0x08002a60   0x08002a60   0x00000042   Code   RO          549    .text.osKernelGetState  rtx_kernel.o
    0x08002aa2   0x08002aa2   0x00000006   PAD
    0x08002aa8   0x08002aa8   0x0000003a   Code   RO          581    .text.osKernelGetTickCount  rtx_kernel.o
    0x08002ae2   0x08002ae2   0x00000006   PAD
    0x08002ae8   0x08002ae8   0x0000004a   Code   RO          537    .text.osKernelInitialize  rtx_kernel.o
    0x08002b32   0x08002b32   0x00000006   PAD
    0x08002b38   0x08002b38   0x00000046   Code   RO          553    .text.osKernelStart  rtx_kernel.o
    0x08002b7e   0x08002b7e   0x00000002   PAD
    0x08002b80   0x08002b80   0x0000007e   Code   RO          791    .text.osMessageQueueGet  rtx_msgqueue.o
    0x08002bfe   0x08002bfe   0x00000002   PAD
    0x08002c00   0x08002c00   0x0000008a   Code   RO          787    .text.osMessageQueuePut  rtx_msgqueue.o
    0x08002c8a   0x08002c8a   0x00000006   PAD
    0x08002c90   0x08002c90   0x00000030   Code   RO         1318    .text.osRtxErrorNotify  rtx_config.o
    0x08002cc0   0x08002cc0   0x0000000a   Code   RO          972    .text.osRtxEventFlagsObject  rtx_system.o
    0x08002cca   0x08002cca   0x00000006   PAD
    0x08002cd0   0x08002cd0   0x00000008   Code   RO         1316    .text.osRtxIdleThread  rtx_config.o
    0x08002cd8   0x08002cd8   0x00000002   Code   RO          533    .text.osRtxKernelBeforeInit  rtx_kernel.o
    0x08002cda   0x08002cda   0x00000006   PAD
    0x08002ce0   0x08002ce0   0x0000001c   Code   RO          535    .text.osRtxKernelErrorNotify  rtx_kernel.o
    0x08002cfc   0x08002cfc   0x00000004   PAD
    0x08002d00   0x08002d00   0x0000000c   Code   RO          964    .text.osRtxKernelGetState  rtx_system.o
    0x08002d0c   0x08002d0c   0x00000004   PAD
    0x08002d10   0x08002d10   0x0000000c   Code   RO         1033    .text.osRtxKernelGetState  rtx_thread.o
    0x08002d1c   0x08002d1c   0x00000004   PAD
    0x08002d20   0x08002d20   0x0000000c   Code   RO          599    .text.osRtxKernelState  rtx_kernel.o
    0x08002d2c   0x08002d2c   0x00000004   PAD
    0x08002d30   0x08002d30   0x0000014c   Code   RO          675    .text.osRtxMemoryAlloc  rtx_memory.o
    0x08002e7c   0x08002e7c   0x00000004   PAD
    0x08002e80   0x08002e80   0x000000c2   Code   RO          677    .text.osRtxMemoryFree  rtx_memory.o
    0x08002f42   0x08002f42   0x00000006   PAD
    0x08002f48   0x08002f48   0x00000096   Code   RO          669    .text.osRtxMemoryInit  rtx_memory.o
    0x08002fde   0x08002fde   0x00000002   PAD
    0x08002fe0   0x08002fe0   0x0000004a   Code   RO          688    .text.osRtxMemoryPoolAlloc  rtx_mempool.o
    0x0800302a   0x0800302a   0x00000006   PAD
    0x08003030   0x08003030   0x00000064   Code   RO          694    .text.osRtxMemoryPoolFree  rtx_mempool.o
    0x08003094   0x08003094   0x00000004   PAD
    0x08003098   0x08003098   0x00000098   Code   RO          686    .text.osRtxMemoryPoolInit  rtx_mempool.o
    0x08003130   0x08003130   0x0000000a   Code   RO          976    .text.osRtxMemoryPoolObject  rtx_system.o
    0x0800313a   0x0800313a   0x00000006   PAD
    0x08003140   0x08003140   0x0000000a   Code   RO          978    .text.osRtxMessageObject  rtx_system.o
    0x0800314a   0x0800314a   0x00000006   PAD
    0x08003150   0x08003150   0x0000000a   Code   RO          773    .text.osRtxMessageQueueId  rtx_msgqueue.o
    0x0800315a   0x0800315a   0x00000006   PAD
    0x08003160   0x08003160   0x00000144   Code   RO          819    .text.osRtxMessageQueuePostProcess  rtx_msgqueue.o
    0x080032a4   0x080032a4   0x00000004   PAD
    0x080032a8   0x080032a8   0x0000003e   Code   RO          771    .text.osRtxMessageQueueTimerSetup  rtx_msgqueue.o
    0x080032e6   0x080032e6   0x00000002   PAD
    0x080032e8   0x080032e8   0x0000000a   Code   RO         1021    .text.osRtxMutexObject  rtx_thread.o
    0x080032f2   0x080032f2   0x00000006   PAD
    0x080032f8   0x080032f8   0x00000098   Code   RO          848    .text.osRtxMutexOwnerRelease  rtx_mutex.o
    0x08003390   0x08003390   0x000000ac   Code   RO          852    .text.osRtxMutexOwnerRestore  rtx_mutex.o
    0x0800343c   0x0800343c   0x00000004   PAD
    0x08003440   0x08003440   0x0000000a   Code   RO          767    .text.osRtxObject   rtx_msgqueue.o
    0x0800344a   0x0800344a   0x00000006   PAD
    0x08003450   0x08003450   0x0000000a   Code   RO          850    .text.osRtxObject   rtx_mutex.o
    0x0800345a   0x0800345a   0x00000006   PAD
    0x08003460   0x08003460   0x0000000a   Code   RO          990    .text.osRtxObject   rtx_system.o
    0x0800346a   0x0800346a   0x00000006   PAD
    0x08003470   0x08003470   0x0000000a   Code   RO         1009    .text.osRtxObject   rtx_thread.o
    0x0800347a   0x0800347a   0x00000006   PAD
    0x08003480   0x08003480   0x000000b8   Code   RO          966    .text.osRtxPendSV_Handler  rtx_system.o
    0x08003538   0x08003538   0x00000042   Code   RO          980    .text.osRtxPostProcess  rtx_system.o
    0x0800357a   0x0800357a   0x00000006   PAD
    0x08003580   0x08003580   0x0000000a   Code   RO          974    .text.osRtxSemaphoreObject  rtx_system.o
    0x0800358a   0x0800358a   0x00000006   PAD
    0x08003590   0x08003590   0x00000008   Code   RO         1061    .text.osRtxThreadBeforeFree  rtx_thread.o
    0x08003598   0x08003598   0x00000088   Code   RO         1037    .text.osRtxThreadBlock  rtx_thread.o
    0x08003620   0x08003620   0x000000fa   Code   RO         1043    .text.osRtxThreadDelayInsert  rtx_thread.o
    0x0800371a   0x0800371a   0x00000006   PAD
    0x08003720   0x08003720   0x0000009c   Code   RO         1015    .text.osRtxThreadDelayRemove  rtx_thread.o
    0x080037bc   0x080037bc   0x00000004   PAD
    0x080037c0   0x080037c0   0x00000150   Code   RO         1017    .text.osRtxThreadDelayTick  rtx_thread.o
    0x08003910   0x08003910   0x00000060   Code   RO         1057    .text.osRtxThreadDestroy  rtx_thread.o
    0x08003970   0x08003970   0x00000096   Code   RO         1031    .text.osRtxThreadDispatch  rtx_thread.o
    0x08003a06   0x08003a06   0x00000002   PAD
    0x08003a08   0x08003a08   0x000000a2   Code   RO         1059    .text.osRtxThreadFree  rtx_thread.o
    0x08003aaa   0x08003aaa   0x00000006   PAD
    0x08003ab0   0x08003ab0   0x0000000c   Code   RO          815    .text.osRtxThreadGetRunning  rtx_msgqueue.o
    0x08003abc   0x08003abc   0x00000004   PAD
    0x08003ac0   0x08003ac0   0x0000000c   Code   RO         1035    .text.osRtxThreadGetRunning  rtx_thread.o
    0x08003acc   0x08003acc   0x00000004   PAD
    0x08003ad0   0x08003ad0   0x0000000c   Code   RO         1261    .text.osRtxThreadGetRunning  rtx_timer.o
    0x08003adc   0x08003adc   0x00000004   PAD
    0x08003ae0   0x08003ae0   0x0000000a   Code   RO         1065    .text.osRtxThreadId  rtx_thread.o
    0x08003aea   0x08003aea   0x00000006   PAD
    0x08003af0   0x08003af0   0x0000003c   Code   RO         1055    .text.osRtxThreadJoinWakeup  rtx_thread.o
    0x08003b2c   0x08003b2c   0x00000004   PAD
    0x08003b30   0x08003b30   0x00000036   Code   RO         1005    .text.osRtxThreadListGet  rtx_thread.o
    0x08003b66   0x08003b66   0x00000002   PAD
    0x08003b68   0x08003b68   0x00000076   Code   RO         1001    .text.osRtxThreadListPut  rtx_thread.o
    0x08003bde   0x08003bde   0x00000002   PAD
    0x08003be0   0x08003be0   0x00000032   Code   RO         1011    .text.osRtxThreadListRemove  rtx_thread.o
    0x08003c12   0x08003c12   0x00000006   PAD
    0x08003c18   0x08003c18   0x00000022   Code   RO         1019    .text.osRtxThreadListRoot  rtx_thread.o
    0x08003c3a   0x08003c3a   0x00000006   PAD
    0x08003c40   0x08003c40   0x00000058   Code   RO         1007    .text.osRtxThreadListSort  rtx_thread.o
    0x08003c98   0x08003c98   0x0000000a   Code   RO          970    .text.osRtxThreadObject  rtx_system.o
    0x08003ca2   0x08003ca2   0x00000006   PAD
    0x08003ca8   0x08003ca8   0x0000000a   Code   RO         1003    .text.osRtxThreadObject  rtx_thread.o
    0x08003cb2   0x08003cb2   0x00000006   PAD
    0x08003cb8   0x08003cb8   0x00000044   Code   RO         1161    .text.osRtxThreadPostProcess  rtx_thread.o
    0x08003cfc   0x08003cfc   0x00000004   PAD
    0x08003d00   0x08003d00   0x00000020   Code   RO         1013    .text.osRtxThreadReadyPut  rtx_thread.o
    0x08003d20   0x08003d20   0x00000022   Code   RO         1023    .text.osRtxThreadRegPtr  rtx_thread.o
    0x08003d42   0x08003d42   0x00000006   PAD
    0x08003d48   0x08003d48   0x00000014   Code   RO         1051    .text.osRtxThreadSetRunning  rtx_thread.o
    0x08003d5c   0x08003d5c   0x00000004   PAD
    0x08003d60   0x08003d60   0x00000014   Code   RO         1265    .text.osRtxThreadSetRunning  rtx_timer.o
    0x08003d74   0x08003d74   0x00000004   PAD
    0x08003d78   0x08003d78   0x0000003c   Code   RO         1045    .text.osRtxThreadStackCheck  rtx_thread.o
    0x08003db4   0x08003db4   0x00000004   PAD
    0x08003db8   0x08003db8   0x00000096   Code   RO         1063    .text.osRtxThreadStartup  rtx_thread.o
    0x08003e4e   0x08003e4e   0x00000002   PAD
    0x08003e50   0x08003e50   0x0000002e   Code   RO         1027    .text.osRtxThreadSwitch  rtx_thread.o
    0x08003e7e   0x08003e7e   0x00000002   PAD
    0x08003e80   0x08003e80   0x00000076   Code   RO         1041    .text.osRtxThreadWaitEnter  rtx_thread.o
    0x08003ef6   0x08003ef6   0x00000002   PAD
    0x08003ef8   0x08003ef8   0x00000046   Code   RO         1039    .text.osRtxThreadWaitExit  rtx_thread.o
    0x08003f3e   0x08003f3e   0x00000002   PAD
    0x08003f40   0x08003f40   0x00000098   Code   RO         1053    .text.osRtxThreadWatchdogInsert  rtx_thread.o
    0x08003fd8   0x08003fd8   0x00000084   Code   RO         1047    .text.osRtxThreadWatchdogRemove  rtx_thread.o
    0x0800405c   0x0800405c   0x00000004   PAD
    0x08004060   0x08004060   0x000000f8   Code   RO         1049    .text.osRtxThreadWatchdogTick  rtx_thread.o
    0x08004158   0x08004158   0x00000114   Code   RO          962    .text.osRtxTick_Handler  rtx_system.o
    0x0800426c   0x0800426c   0x00000004   PAD
    0x08004270   0x08004270   0x00000030   Code   RO         1231    .text.osRtxTimerSetup  rtx_timer.o
    0x080042a0   0x080042a0   0x00000032   Code   RO         1235    .text.osRtxTimerThread  rtx_timer.o
    0x080042d2   0x080042d2   0x00000006   PAD
    0x080042d8   0x080042d8   0x000000dc   Code   RO         1233    .text.osRtxTimerTick  rtx_timer.o
    0x080043b4   0x080043b4   0x00000004   PAD
    0x080043b8   0x080043b8   0x00000010   Code   RO         1157    .text.osThreadEntry  rtx_thread.o
    0x080043c8   0x080043c8   0x00000024   Code   RO         1111    .text.osThreadExit  rtx_thread.o
    0x080043ec   0x080043ec   0x00000004   PAD
    0x080043f0   0x080043f0   0x00000072   Code   RO         1069    .text.osThreadNew   rtx_thread.o
    0x08004462   0x08004462   0x00000006   PAD
    0x08004468   0x08004468   0x00000048   Code   RO         1101    .text.osThreadYield  rtx_thread.o
    0x080044b0   0x080044b0   0x0000000a   Code   RO          644    .text.osWatchdogAlarm_Handler  rtx_lib.o
    0x080044ba   0x080044ba   0x00000006   PAD
    0x080044c0   0x080044c0   0x00000008   Code   RO          646    .text.osZoneSetup_Callback  rtx_lib.o
    0x080044c8   0x080044c8   0x00000050   Code   RO           72    .text.svcRtxDelay   rtx_delay.o
    0x08004518   0x08004518   0x00000016   Code   RO          551    .text.svcRtxKernelGetState  rtx_kernel.o
    0x0800452e   0x0800452e   0x00000002   PAD
    0x08004530   0x08004530   0x0000001c   Code   RO          583    .text.svcRtxKernelGetTickCount  rtx_kernel.o
    0x0800454c   0x0800454c   0x00000004   PAD
    0x08004550   0x08004550   0x00000304   Code   RO          597    .text.svcRtxKernelInitialize  rtx_kernel.o
    0x08004854   0x08004854   0x00000004   PAD
    0x08004858   0x08004858   0x000000a4   Code   RO          601    .text.svcRtxKernelStart  rtx_kernel.o
    0x080048fc   0x080048fc   0x00000004   PAD
    0x08004900   0x08004900   0x00000198   Code   RO          835    .text.svcRtxMessageQueueGet  rtx_msgqueue.o
    0x08004a98   0x08004a98   0x00000322   Code   RO          775    .text.svcRtxMessageQueueNew  rtx_msgqueue.o
    0x08004dba   0x08004dba   0x00000006   PAD
    0x08004dc0   0x08004dc0   0x0000018c   Code   RO          827    .text.svcRtxMessageQueuePut  rtx_msgqueue.o
    0x08004f4c   0x08004f4c   0x00000004   PAD
    0x08004f50   0x08004f50   0x0000008a   Code   RO         1195    .text.svcRtxThreadExit  rtx_thread.o
    0x08004fda   0x08004fda   0x00000006   PAD
    0x08004fe0   0x08004fe0   0x00000582   Code   RO         1067    .text.svcRtxThreadNew  rtx_thread.o
    0x08005562   0x08005562   0x00000006   PAD
    0x08005568   0x08005568   0x0000005a   Code   RO         1183    .text.svcRtxThreadYield  rtx_thread.o
    0x080055c2   0x080055c2   0x00000006   PAD
    0x080055c8   0x080055c8   0x00000012   Code   RO         1159    .text.xPSR_InitVal  rtx_thread.o
    0x080055da   0x080055da   0x0000001a   Code   RO         1766    x$fpl$fpinit        fz_wm.l(fpinit.o)
    0x080055f4   0x080055f4   0x000000a8   Data   RO          654    .rodata             rtx_lib.o
    0x0800569c   0x0800569c   0x00000010   Data   RO         1633    .rodata.AHBPrescTable  system_stm32f7xx.o
    0x080056ac   0x080056ac   0x00000010   Data   RO           49    .rodata.LED_PIN     led_756g_eval.o
    0x080056bc   0x080056bc   0x00000004   Data   RO          656    .rodata.osRtxUserSVC  rtx_lib.o
    0x080056c0   0x080056c0   0x00000024   Data   RO          651    .rodata.os_idle_thread_attr  rtx_lib.o
    0x080056e4   0x080056e4   0x00000018   Data   RO          653    .rodata.os_timer_mq_attr  rtx_lib.o
    0x080056fc   0x080056fc   0x00000024   Data   RO          652    .rodata.os_timer_thread_attr  rtx_lib.o
    0x08005720   0x08005720   0x0000000b   Data   RO          635    .rodata.str1.1      rtx_kernel.o
    0x0800572b   0x0800572b   0x00000001   PAD
    0x0800572c   0x0800572c   0x00000020   Data   RO         1827    Region$$Table       anon$$obj.o


    Execution Region RW_IRAM2 (Exec base: 0x20000000, Load base: 0x08005840, Size: 0x00000000, Max: 0x00010000, ABSOLUTE)

    **** No section assigned to this execution region ****


    Execution Region RW_IRAM1 (Exec base: 0x20010000, Load base: 0x08005750, Size: 0x00008cc8, Max: 0x00040000, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20010000   0x08005750   0x00000004   Data   RW         1632    .data.SystemCoreClock  system_stm32f7xx.o
    0x20010004   0x08005754   0x000000a4   Data   RW          636    .data.os            rtx_kernel.o
    0x200100a8   0x080057f8   0x00000041   Data   RW         1223    .data.os            rtx_thread.o
    0x200100e9   0x08005839   0x00000003   PAD
    0x200100ec   0x0800583c   0x00000004   Data   RW         1385    .data.uwTickPrio    stm32f7xx_hal.o
    0x200100f0        -       0x00000060   Zero   RW         1692    .bss                c_w.l(libspace.o)
    0x20010150        -       0x00000004   Zero   RW           16    .bss.HAL_GetTick.ticks  main.o
    0x20010154   0x08005840   0x00000004   PAD
    0x20010158        -       0x00008040   Zero   RW          650    .bss.os             rtx_lib.o
    0x20018198        -       0x00000001   Zero   RW         1308    .bss.os             os_systick.o
    0x20018199   0x08005840   0x00000003   PAD
    0x2001819c        -       0x00000034   Zero   RW          660    .bss.os.msgqueue.cb  rtx_lib.o
    0x200181d0        -       0x00000050   Zero   RW          661    .bss.os.msgqueue.mem  rtx_lib.o
    0x20018220        -       0x000000a0   Zero   RW          657    .bss.os.thread.cb   rtx_lib.o
    0x200182c0        -       0x00000200   Zero   RW          658    .bss.os.thread.idle.stack  rtx_lib.o
    0x200184c0        -       0x00000200   Zero   RW          659    .bss.os.thread.timer.stack  rtx_lib.o
    0x200186c0        -       0x00000004   Zero   RW           29    .bss.tid_Thread     thread.o
    0x200186c4   0x08005840   0x00000004   PAD
    0x200186c8        -       0x00000200   Zero   RW         1619    HEAP                startup_stm32f746xx.o
    0x200188c8        -       0x00000400   Zero   RW         1618    STACK               startup_stm32f746xx.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

       280         16          0          0          0        901   irq_armv7m.o
       250          0         16          0          0       3470   led_756g_eval.o
       584          0          0          0          4       4759   main.o
       204          0          0          0          1       5748   os_systick.o
        56          6          0          0          0        758   rtx_config.o
       230          0          0          0          0       2849   rtx_delay.o
       470          0          0          0          0      26437   rtx_evr.o
      1502          0         11        164          0      20549   rtx_kernel.o
        26          0        268          0      34148       6194   rtx_lib.o
       710          0          0          0          0       2412   rtx_memory.o
       478          0          0          0          0      13409   rtx_mempool.o
      3180          0          0          0          0      16032   rtx_msgqueue.o
       334          0          0          0          0       9941   rtx_mutex.o
       944         10          0          0          0       7014   rtx_system.o
      5356          0          0         65          0      37241   rtx_thread.o
       548          0          0          0          0       9974   rtx_timer.o
        64         26        456          0       1536        916   startup_stm32f746xx.o
        48          0          0          4          0       8069   stm32f7xx_hal.o
       316          0          0          0          0      10698   stm32f7xx_hal_cortex.o
      1050          0          0          0          0       5466   stm32f7xx_hal_gpio.o
       198          0          0          0          0       5981   stm32f7xx_hal_pwr_ex.o
      2666          0          0          0          0       8298   stm32f7xx_hal_rcc.o
       320          0         16          4          0       3425   system_stm32f7xx.o
       102          0          0          0          4        784   thread.o

    ----------------------------------------------------------------------
     20602         58        800        240      35704     211325   Object Totals
         0          0         32          0          0          0   (incl. Generated)
       686          0          1          3         11          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

         8          0          0          0          0         68   __main.o
         0          0          0          0          0          0   __rtentry.o
        20          0          0          0          0          0   __rtentry2.o
         6          0          0          0          0          0   __rtentry4.o
        52          8          0          0          0          0   __scatter.o
        26          0          0          0          0          0   __scatter_copy.o
        28          0          0          0          0          0   __scatter_zi.o
        18          0          0          0          0         80   exit.o
         6          0          0          0          0        152   heapauxi.o
         0          0          0          0          0          0   indicate_semi.o
         2          0          0          0          0          0   libinit.o
         6          0          0          0          0          0   libinit2.o
         2          0          0          0          0          0   libshutdown.o
         2          0          0          0          0          0   libshutdown2.o
         8          4          0          0         96         68   libspace.o
       240          0          0          0          0        100   lludivv7m.o
        68          0          0          0          0         68   rt_memclr.o
        78          0          0          0          0         80   rt_memclr_w.o
       138          0          0          0          0         68   rt_memcpy_v6.o
       100          0          0          0          0         80   rt_memcpy_w.o
         2          0          0          0          0          0   rtexit.o
        10          0          0          0          0          0   rtexit2.o
        12          4          0          0          0         68   sys_exit.o
        74          0          0          0          0         80   sys_stackheap_outer.o
         2          0          0          0          0         68   use_no_semi.o
        26          0          0          0          0        116   fpinit.o

    ----------------------------------------------------------------------
       946         16          0          0         96       1096   Library Totals
        12          0          0          0          0          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

       908         16          0          0         96        980   c_w.l
        26          0          0          0          0        116   fz_wm.l

    ----------------------------------------------------------------------
       946         16          0          0         96       1096   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

     21548         74        800        240      35800     211585   Grand Totals
     21548         74        800        240      35800     211585   ELF Image Totals
     21548         74        800        240          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                22348 (  21.82kB)
    Total RW  Size (RW Data + ZI Data)             36040 (  35.20kB)
    Total ROM Size (Code + RO Data + RW Data)      22588 (  22.06kB)

==============================================================================

